<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Dou Meishi's Blog]]></title>
<description><![CDATA[Dou Meishi's Blog]]></description>
<link>https://dou-meishi.github.io/org-blog/</link>
<lastBuildDate>Sun, 28 Jan 2024 13:10:01 +0800</lastBuildDate>
<item>
  <title><![CDATA[Org Static Blog: A Simple Static Site Generator]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgafbecae">Go through the manual</a></li>
<li><a href="#org78688c1">Minimal Configuration</a></li>
<li><a href="#org4e41046">Question</a></li>
<li><a href="#org0ae630e">Build My Blog Site</a></li>
<li><a href="#org5f867cc">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
I picked up most of my computer skills from reading posts online, and
it got me thinking about having my own blog where I can share what
I've learned. But I've always been a bit hesitant about learning all
the complicated stuff in web development.  Recently, I came across a
third-party emacs package called <code>org-static-blog</code> while searching for
the built-in functionality <code>org-publish</code>.  After browsing a few blog
sites created with this package, I was impressed by its simplicity and
the ability to blog using org files. It became clear that this package
is exactly what I need at this stage.
</p>

<p>
After a few minites of survey, I observed the following facts.
</p>

<ol class="org-ol">
<li>The source code is simple enough. There is only a single elisp
script with less than 1000 lines.  The code is well-organized, with
customization variables appearing first, followed by commands. It
doesn't involve any complex or cryptic syntax.</li>

<li>The developer maintains this project over 8 years and he continues to use it in his blog site.</li>

<li>There are a few appealing blog sites are created by org static blog,
e.g.,  <a href="https://bastibe.de/about.html">Bastian</a>,  <a href="https://jao.io/blog/about.html">Jose Antonio Ortega Ruiz</a>,  <a href="https://justin.abrah.ms/">Justin Abrahms</a>, <a href="http://alhassy.com/about">Musa Al-hassy</a>&#x2026;</li>
</ol>

<p>
Finally, I decide to give it a try. I hope it can give me a way to
share my thoughts on the internet.
</p>

<div id="outline-container-orgafbecae" class="outline-2">
<h2 id="orgafbecae">Go through the manual</h2>
<div class="outline-text-2" id="text-orgafbecae">
<p>
The <a href="https://github.com/bastibe/org-static-blog/blob/master/README.org">README</a> contains a brief introduction to the usage and a minimal working example.
</p>

<p>
First, let us review the introduction.
</p>

<blockquote>
<p>
Static blog generators are a dime a dozen. This is one more, which focuses on being simple. All files are simple org-mode files in a directory. The only requirement is that every org file must have a <code>#+TITLE</code> and a <code>#+DATE</code>, and optionally, <code>#+FILETAGS</code>, <code>#+DESCRIPTION</code> and <code>#+IMAGE</code>.
</p>
</blockquote>

<p>
After collecting the appropriate org files, publishing them by org
static blog needs only two steps: 1) customizing org static blog
parameters; 2) calling <code>org-static-blog-publish</code> to publish all posts,
or calling <code>org-static-blog-publish-filename</code> to publish only a
particular post.
</p>

<p>
The blog site generated by org static blog consists of six parts.
</p>

<ol class="org-ol">
<li><i>Posts.</i> Every org file in <code>org-static-blog-posts-directory</code> is one blog post.
Each blog post is rendered as its own HTML page.</li>

<li><i>Index.</i> The index page contains the last few blog posts on a single page.
The number of entries on  the index page can be customized
using <code>org-static-blog-index-length</code>.</li>

<li><i>Tags.</i> Each blog post can be tagged, and each tag links to a page
that lists all other posts of the same tag. This feature is only
enabled when <code>org-static-blog-enable-tags</code> is <code>t</code>.</li>

<li><i>Archives.</i> This page lists the publishing dates and headlines of every blog post.</li>

<li><i>RSS Feeds.</i> This is a machine-readable XML file that contains every blog
post. It is not meant to be consumed by humans. Instead RSS readers
can use the RSS feed to aggregate entries from multiple blogs.</li>

<li><i>Drafts.</i> They are rendered like regular blog posts, but are not included
in the index, the archive, or the RSS feed.</li>
</ol>

<p>
Every HTML page in org static blog can be customized in the following aspects.
</p>

<ol class="org-ol">
<li><code>org-static-blog-page-header</code>. This is inserted into the <code>&lt;head&gt;</code> of every page.
Use this to include custom CSS and JavaScript for your blog.</li>

<li><code>org-static-blog-page-preamble</code>. This is inserted just before the
content of every page. This is a good place to put the header or
menus for your blog.</li>

<li><code>org-static-blog-page-postamble</code>. This is inserted after the content
of every generated page: after any blog post page, after the index
page, the tag pages and the archive. This is where you can include
copyright notices.</li>

<li><code>org-static-blog-post-preamble</code> and
<code>org-static-blog-post-postamble</code>. The returned values are prepended
and appended to every blog post. If you want to change the
formatting of dates, titles, or the tag list, overwrite these
functions. In particular the content of
<code>org-static-blog-post-comments</code> is inserted at the end of each blog
post. Use this to add a comment box.</li>
</ol>

<p>
Other features:
</p>

<ol class="org-ol">
<li>Optionally show a preview of the post (instead of the full post) on
the index page setting <code>org-static-blog-use-preview</code> to <code>t</code>. The region
of the post used as a preview is, by default, its first paragraph,
but can be fine-tuned using <code>org-static-blog-preview-start</code> and
<code>org-static-blog-preview-end</code>.</li>

<li><p>
Activate a few convenience key bindings by
</p>

<div class="org-src-container">
<pre class="src src-elisp">(add-to-list 'auto-mode-alist
             (cons (concat
                    org-static-blog-posts-directory <span style="color: #2aa198;">".*\\.org\\'"</span>)
                   'org-static-blog-mode))
</pre>
</div>

<p>
These key bindings are:
</p>

<ol class="org-ol">
<li><code>C-c C-f</code> / <code>C-c C-b</code> to open next/previous post.</li>
<li><code>C-c C-p</code> to open the matching published HTML file of a post.</li>
<li><code>C-c C-n</code> to create a new blog post.</li>
</ol></li>
</ol>
</div>
</div>

<div id="outline-container-org78688c1" class="outline-2">
<h2 id="org78688c1">Minimal Configuration</h2>
<div class="outline-text-2" id="text-org78688c1">
<p>
Following the example in its manual, I try to build a blog site at
<code>./org-blog/</code> with a folder <code>./org-blog/org/</code> containing several org
files.
</p>

<p>
The first step is, of course, installing the package.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(package-install 'org-static-blog)
</pre>
</div>

<p>
The next step is setting up variables. I want to do the following things.
</p>

<ol class="org-ol">
<li>Set the site title to <i>Hello, Org Static Blog</i></li>
<li>Set the url of the site to <code>file:///home/dou/Documents/2024-01-22-TryOrgStaticBlog/org-blog/</code></li>
<li>Set the directory that holds all html files to <code>./org-blog/</code></li>
<li>Set the directory that holds all org files to be published to  <code>./org-blog/org/</code></li>
<li>Set the directory that holds all drafts to  <code>./org-blog/drafts/</code></li>
<li>Set the page header as the content of the file <code>./org-blog/static/header.html</code></li>
<li>Set the page preamble as the content of the file <code>./org-blog/static/preamble.html</code></li>
<li>Set the page postamble as the content of the file <code>./org-blog/static/postamble.html</code></li>
<li>Enable tags</li>
<li>Enable preview</li>
</ol>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">org-static-blog</span>)

(<span style="color: #859900; font-weight: bold;">setq</span> dms/org-static-blog-root-dir <span style="color: #2aa198;">"/home/dou/Documents/2024-01-22-TryOrgStaticBlog/org-blog/"</span>)

(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-title <span style="color: #2aa198;">"Hello, Org Static Blog"</span>)
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-url (format <span style="color: #2aa198;">"file://%s"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-directory (format <span style="color: #2aa198;">"%s"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-posts-directory (format <span style="color: #2aa198;">"%sorg"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-drafts-directory (format <span style="color: #2aa198;">"%sdrafts"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-header (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/header.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-preamble (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/preamble.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-postamble (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/postamble.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-enable-tags t)
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-use-preview t)
</pre>
</div>

<p>
Contents of <code>header.html</code>, <code>preamble.html</code> and <code>postamble.html</code> are given as follows.
Assets <code>static/style.css</code> and <code>static/favicon.ico</code> are downloaded from <a href="https://github.com/bastibe/bastibe.github.com/tree/master/static">Bastian</a>.
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">meta</span> <span style="color: #268bd2;">name</span>=<span style="color: #2aa198;">"author"</span> <span style="color: #268bd2;">content</span>=<span style="color: #2aa198;">"Dou Meishi"</span>&gt;
&lt;<span style="color: #268bd2;">meta</span> <span style="color: #268bd2;">name</span>=<span style="color: #2aa198;">"referrer"</span> <span style="color: #268bd2;">content</span>=<span style="color: #2aa198;">"no-referrer"</span>&gt;
&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"static/style.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
&lt;<span style="color: #268bd2;">link</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"static/favicon.ico"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"icon"</span> /&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"header"</span>&gt;
  Hello, Org Static Blog
&lt;/<span style="color: #268bd2;">div</span>&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-html">Created by &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://github.com/bastibe/org-static-blog/"</span>&gt;Org Static Blog&lt;/<span style="color: #268bd2;">a</span>&gt;
</pre>
</div>

<p>
Currently, the project layout looks like
</p>

<pre class="example" id="orga3f5248">
org-blog/
├── drafts
├── org
│   └── notes.org
└── static
    ├── favicon.ico
    ├── header.html
    ├── postamble.html
    ├── preamble.html
    └── style.css

3 directories, 6 files
</pre>

<p>
Finally, call  <code>org-static-blog-publish</code> to generate the site. At this time, the project layout becomes
</p>

<pre class="example" id="org23be5b2">
org-blog/
├── archive.html
├── drafts
├── index.html
├── notes.html
├── org
│   └── notes.org
├── rss.xml
├── static
│   ├── favicon.ico
│   ├── header.html
│   ├── postamble.html
│   ├── preamble.html
│   └── style.css
└── tags.html

3 directories, 11 files
</pre>
</div>
</div>

<div id="outline-container-org4e41046" class="outline-2">
<h2 id="org4e41046">Question</h2>
<div class="outline-text-2" id="text-org4e41046">
<ol class="org-ol">
<li><p>
Does it scans all org files in <code>org-static-blog-posts-directory</code> recursively or not?
</p>

<p>
Yes. For example, a folder named <code>2024/</code> in it will be published to the folder <code>2024/</code> in
<code>org-static-blog-publish-directory</code>.
</p></li>

<li><p>
Does it support following symbolic links when checking org files?
</p>

<p>
Yes but no. I test the following based on the project layout in the <i>Minimal Configuration</i> section.
I renamed the ordinary file <code>notes.org</code> inside <code>org-blog/org/</code> to <code>org-blog/../</code> but leave
a symbolic link. So the project layout becomes.
</p>

<pre class="example" id="org6dbeaf9">
org-blog/
├── drafts
├── org
│   └── notes.org -&gt; /home/dou/Documents/2024-01-22-TryOrgStaticBlog/notes.org
└── static
    ├── favicon.ico
    ├── header.html
    ├── postamble.html
    ├── preamble.html
    └── style.css

3 directories, 6 files
</pre>

<p>
However, calling <code>org-static-blog-pulish</code> exports <code>org-blog/org/notes.org</code> to <code>~/Documents/notes.html</code>.
</p>

<p>
This issue comes function <code>org-static-blog-get-post-public-path</code>. Running either
</p>

<div class="org-src-container">
<pre class="src src-elisp">(org-static-blog-get-post-public-path <span style="color: #2aa198;">"~/Documents/2024-01-22-TryOrgStaticBlog/notes.org"</span>)
</pre>
</div>

<p>
or
</p>

<div class="org-src-container">
<pre class="src src-elisp">(org-static-blog-get-post-public-path <span style="color: #2aa198;">"~/Documents/2024-01-22-TryOrgStaticBlog/org-blog/org/notes.org"</span>)
</pre>
</div>

<p>
gives the result <code>../../notes.html</code>.
</p></li>

<li><p>
What will happen if <code>org-static-blog-publish-directory</code> is the same
as <code>org-static-blog-posts-directory</code>?  In this case, what will happen
if <code>org-static-blog-drafts-directory</code> is a subfolder?
</p>

<p>
It behaves like exporting all org files to the same directory, and posts inside
the drafts directory will not be included in the index.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org0ae630e" class="outline-2">
<h2 id="org0ae630e">Build My Blog Site</h2>
<div class="outline-text-2" id="text-org0ae630e">
<p>
It is also not hard to extend the minimal configuration to build a
real blog site.  But before tweaking these scripts and assets, I need,
of course, get a public URL for hosting the site. Fortunately, GitHub
Pages allows hosting directly from a GitHub repository. What I need to
do is create a publich repo, say <code>org-blog</code>, and go to <code>Settings -&gt; Pages</code>
and set the deploy target to <code>https://dou-meishi.github.io/blog/</code>.  Now
I can replace the previous local URL to this one in the script and
assets.
</p>

<p>
Besides changing the publish URL, there are a few other things to make
the site a slightly more visual appealing.
</p>

<ol class="org-ol">
<li><p>
Add a top bar at each page, showing links to the homepage and the archive page.
</p>

<p>
This can be easily done by modifying the <code>preamble.html</code>
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"header"</span>&gt;
  &lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"sitelinks"</span>&gt;
    &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/index.html"</span>&gt;Home&lt;/<span style="color: #268bd2;">a</span>&gt;
    |
    &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/archive.html"</span>&gt;All Posts&lt;/<span style="color: #268bd2;">a</span>&gt;
  &lt;/<span style="color: #268bd2;">div</span>&gt;
&lt;/<span style="color: #268bd2;">div</span>&gt;
</pre>
</div></li>

<li><p>
Render math formulae. This can also be achieved by adding appropriate javascript
and stylesheets. Currently, I use <a href="https://katex.org/docs/browser">KaTeX</a>, which seems to be faster than MathJax.
</p>

<div class="org-src-container">
<pre class="src src-html"><span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">Math Support by KaTeX</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">link</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span>&gt;
<span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">The loading of KaTeX is deferred to speed up page rendering</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">script</span> defer <span style="color: #268bd2;">src</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span>&gt;&lt;/<span style="color: #268bd2;">script</span>&gt;
<span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">To automatically render math in text elements, include the auto-render extension:</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">script</span> defer <span style="color: #268bd2;">src</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span> <span style="color: #268bd2;">onload</span>=<span style="color: #2aa198;">"renderMathInElement(document.body);"</span>&gt;&lt;/<span style="color: #268bd2;">script</span>&gt;
</pre>
</div></li>

<li><p>
Customize the top of the index page. This is done by setting the
<code>org-static-blog-index-front-matter</code> variable in the lisp script.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-index-front-matter
      <span style="color: #2aa198;">"&lt;h1 class=title&gt; Recent Posts &lt;/h1&gt;"</span>)
</pre>
</div></li>

<li><p>
Change the default ellipsis <code>(...)</code> used in preview to  <code>...</code>
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-preview-ellipsis <span style="color: #2aa198;">"..."</span>)
</pre>
</div></li>

<li><p>
Use a different CSS stylesheet. I have been using <a href="http://gongzhitaao.org/orgcss">this stylesheet</a>
for three years and always appreciating its clean design. It is
designed for HTML exported from org files by <code>org-publish</code>. To adapt
it to files exported by <code>org-static-blog</code>, I add several additional
rules in <a href="https://dou-meishi.github.io/org-blog/static/dou-org-blog.css">a patched CSS</a>.
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"https://gongzhitaao.org/orgcss/org.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/static/dou-org-blog.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
</pre>
</div></li>

<li><p>
Sync posts from my document folder. As I mentioned in <a href="../2024-01-14-TryOrgPublish/notes.html">the previous post</a>, my notes resides in different event directories
in the document folder, and, of course, I do not want to share the whole <code>~/Documents/</code> folder.
So I list all files I want to share in <code>~/.unison/syncpost.prf</code>, which looks like
</p>

<div class="org-src-container">
<pre class="src src-text">source default.prf

root = /home/dou/Documents
root = /home/dou/Documents/2024-01-24-MyOrgBlog/

nodeletion = /home/dou/Documents

path = 2023-09-19-Compactness/notes.org
path = 2023-10-23-BanachSpaceExample/notes.org
path = 2024-01-07-ReviewUnison/basics.org
path = 2024-01-07-ReviewUnison/advanced.org
path = 2024-01-11-CodeBlockinLaTeX/notes.org
path = 2024-01-11-CodeBlockinLaTeX/simple-code.png
path = 2024-01-11-CodeBlockinLaTeX/tcolorbox-listings.png
path = 2024-01-14-TryOrgPublish/notes.org
path = 2024-01-22-TryOrgStaticBlog/notes.org
</pre>
</div>

<p>
Whenever I want to post something, I just check this file, run <code>unison-gui syncpost</code>,
and execute all lisp script in the <code>build-blog.el</code>.
</p></li>
</ol>

<p>
The lisp script and static assets are all included in <a href="https://github.com/Dou-Meishi/org-blog">my git repo</a> for this blog.
</p>
</div>
</div>

<div id="outline-container-org5f867cc" class="outline-2">
<h2 id="org5f867cc">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-org5f867cc">
<p>
Below are other users' configuration on org static blog.
</p>

<ol class="org-ol">
<li>a simple setup: <a href="https://jao.io/blog/simplicity.html">simplicity - programming (and other) musings</a></li>
<li>another simple setup <a href="https://justin.abrah.ms/dotfiles/emacs.html#orgc787b23">Justin's emacs configuration - Writting - Blogging</a></li>
<li>an extensive setup: <a href="http://alhassy.com/AlBasmala#Why-not-use-an-existing-blogging-platform">AlBasmala: Blogging with Emacs &amp; Org-mode (•̀ᴗ•́)و</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-22-TryOrgStaticBlog/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-22-TryOrgStaticBlog/notes.html</guid>
  <pubDate>Mon, 22 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Review org-publish Utility]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org98e45c0">Go through the manual</a></li>
<li><a href="#org1a7a3e3">Practice</a></li>
<li><a href="#org8f592d2">Questions</a></li>
<li><a href="#orgf796ee0">Further consideration</a></li>
<li><a href="#org7b524b2">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
Recently, I finally decided to create my personal blog site. I
researched a few tools and then I suddenly remembered the <code>org-publish</code>
function in Emacs. Although I have been using Emacs and Org mode for
three years, I never wrote a script in elisp. But since my interest in
Emacs is continuously growing, I think it's a good time to play around
with it. It is also a good practice for me to understand the source code
of <a href="https://github.com/bastibe/org-static-blog/tree/master">Org Static Blog</a>, which is the actual blogging tool I want to use.
</p>

<div id="outline-container-org98e45c0" class="outline-2">
<h2 id="org98e45c0">Go through the manual</h2>
<div class="outline-text-2" id="text-org98e45c0">
<p>
According to <a href="https://orgmode.org/manual/Publishing.html">the manual</a>, publishing in org-mode is configured almost
entirely through setting the value of one variable, called
<code>org-publish-project-alist</code>. Each element of the list configures one
project, and may be in one of the two following forms:
</p>

<ol class="org-ol">
<li><code>("project-name" :property value :property value ...)</code></li>
<li><code>("project-name" :components ("project-name" "project-name" ...))</code></li>
</ol>

<p>
After properly configuring the variable, calling <code>org-publish</code> will prompt for a project name
and publish all files that belong to it. Calling <code>org-publish-all</code> will publish all projects.
</p>

<p>
Publishing means that a file is copied to the destination directory and possibly transformed in the process.
The transformation is controlled by the property <code>publishing-function</code>. Typical values include
</p>

<ol class="org-ol">
<li><code>org-html-publish-to-html</code>, which calls the HTML exporter to export org files to HTML files;</li>
<li><code>org-publish-attachment</code>, which does not modify files but simply copy them.</li>
</ol>

<p>
We may also generate a sitemap for a given project by customizing following properties;
see <a href="https://orgmode.org/manual/Site-map.html">Section 14.1.7</a> in the org manual. Interesting properties include:
</p>

<ol class="org-ol">
<li><code>sitemap-format-entry</code>: tell how a published entry is formatted in the sitemap;</li>
<li><code>sitemap-sort-folders</code>: where folders should appear in the sitemap;</li>
<li><code>sitemap-sort-files</code>: how the files are sorted in the sitemap.</li>
</ol>
</div>
</div>

<div id="outline-container-org1a7a3e3" class="outline-2">
<h2 id="org1a7a3e3">Practice</h2>
<div class="outline-text-2" id="text-org1a7a3e3">
<p>
<i>A simple setting:</i> given a folder <code>./content</code> with several org files in it, we want to publish them
into a different folder <code>./public</code>. Assets should be copied too.
</p>

<blockquote>
<p>
It is convenient to put publishing related source in a standalone <code>build.el</code> file.
Visit it in Emacs and call <code>eval-buffer</code> to publish projects defined it.
</p>
</blockquote>

<p>
First, we define our <code>sitemap-format-entry</code> function, which will format an entry into
a timestamp followed by a URL whose description is the title of the entry.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-sitemap-format-entry</span> (entry style project)
  <span style="color: #2aa198;">"Format ENTRY in org-publish PROJECT Sitemap as [date] [[file][title]]."</span>
  (<span style="color: #859900; font-weight: bold;">let</span> ((filetitle (org-publish-find-title entry project)))
    (<span style="color: #859900; font-weight: bold;">if</span> (= (length filetitle) 0)
        (format <span style="color: #2aa198;">"*%s*"</span> entry)
      (format <span style="color: #2aa198;">"[%s] [[file:%s][%s]]"</span>
              (format-time-string <span style="color: #2aa198;">"%Y-%m-%d"</span>
                                  (org-publish-find-date entry project))
              entry
              filetitle))))
</pre>
</div>

<p>
Then, we set <code>org-publish-project-alist</code>. We create two projects, one for exporting org files
and other one for copying assets. Both projects recursively search files based on a particular REGEXP on
file extension. In addition, we require to generate a sitemap and format entries by our
<code>dms/org-sitemap-format-entry</code> function. In addition, entries  are sorted by date
and organized as a plain list, instead of nested list containing subfolders.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Define the publishing project</span>
(<span style="color: #859900; font-weight: bold;">setq</span> org-publish-project-alist
      (list
       (list <span style="color: #2aa198;">"try-org-publish-org"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"./content"</span>
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"./public"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #657b83; font-weight: bold;">:recursive</span> t
             <span style="color: #657b83; font-weight: bold;">:auto-sitemap</span> t
             <span style="color: #657b83; font-weight: bold;">:sitemap-title</span> <span style="color: #2aa198;">"Doumeishi's Mainpage"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-format-entry</span> 'dms/org-sitemap-format-entry
             <span style="color: #657b83; font-weight: bold;">:sitemap-sort-files</span> 'anti-chronologically
             <span style="color: #657b83; font-weight: bold;">:sitemap-style</span> 'list
             )
       (list <span style="color: #2aa198;">"try-org-publish-assets"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"./content"</span>
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"css</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">js</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">jpg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gif</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">pdf</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">mp3</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">ogg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">swf</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">mov"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"./public"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-publish-attachment
             <span style="color: #657b83; font-weight: bold;">:recursive</span> t
             )
       )
)
</pre>
</div>

<p>
Finally, we publish all projects.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Generate the site output</span>
(org-publish-all t)

(message <span style="color: #2aa198;">"Publish complete!"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-org8f592d2" class="outline-2">
<h2 id="org8f592d2">Questions</h2>
<div class="outline-text-2" id="text-org8f592d2">
<ol class="org-ol">
<li><p>
Can I customize the way of Emacs searching for intended org files rather than
a base dir + extension?
</p>

<p>
Yes, we can first exclude all files by setting the base extension to <code>"dummy"</code> and then use <code>:include</code>
to include a list of files we want to publish.
</p></li>

<li><p>
Aware of privacy, can I customize the exporting scheme to exclude publishing particular files?
</p>

<p>
Yes, we can set the <code>exclude</code> property. Or we can set the <code>:exclude-tags</code> property.
</p></li>

<li><p>
Can I adjust publication settings for particular subfolders?
</p>

<p>
Yes, we can exclude the subfolder from existing projects, then create a new project for it
and apply different rules for this subfolder.
</p></li>

<li><p>
How the <i>last modified</i> time is set? I want it to be set by the mtime of org files.
</p>

<p>
I am not sure about this. With some test I found that if I run the script in Emacs
then everything work as expected. But if I run the script in terminal by
<code>emacs -Q --script</code> then every exported file will update the modification time
to the current time.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-orgf796ee0" class="outline-2">
<h2 id="orgf796ee0">Further consideration</h2>
<div class="outline-text-2" id="text-orgf796ee0">
<p>
<i>A slightly complicated setting:</i> my document folder consists of event directories and looks like
</p>

<pre class="example" id="orge336f51">
.
├── 2023-09-03-CustomizePrompt/
├── 2023-11-18-ContentManagementSystem/
├── 2024-01-03-ReviewPham/
├── 2024-01-07-ReviewUnison/
├── 2024-01-11-CodeBlockinLaTeX/
</pre>

<p>
In each event directory, there is an org file <code>notes.org</code> which contains my notes on this event.
I want to generate a sitemap for my document folder (or some folder with the same
strcture) such that I can review what I have done in browser. In particular, I want to
publish only those event notes, i.e., no other org files are exported during the creation of
my sitemap. Moreover, I want to publish those notes in-place, i.e., the generated html should
be placed in the its event directory.
</p>

<p>
In order to do this, we can first define two variables. One is the root directory to be considered,
and is set to <code>~/Document</code>. The other one is a textual file, in which every line specifies a event
name that should not be published.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">dms/org-publish-event-root-dir</span> <span style="color: #2aa198;">"~/Documents"</span>
  <span style="color: #2aa198;">"The directory contains a list of event directories."</span>)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">dms/org-publish-nopublish-events-fp</span> <span style="color: #2aa198;">"~/org/nopublish-events.txt"</span>
  <span style="color: #2aa198;">"The file path whose content is a list of event names</span>
<span style="color: #2aa198;">which should not be considered when do publishing.</span>
<span style="color: #2aa198;">This file should be a textual file and each line corresponds to</span>
<span style="color: #2aa198;">an event name."</span>)
</pre>
</div>

<p>
Then we define a function to generate the list of event notes to be published.
In this function I first filtered the event directory under the root folder with
the content of that nopublish file, then I concat the filename <code>notes.org</code>
for each event and check the existence of such file.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-publish-get-event-notes</span> ()
  <span style="color: #2aa198;">"Return a list of event notes to be published according to the value</span>
<span style="color: #2aa198;">of dms/org-publish-event-root-dir and dms/org-publish-nopublish-events-fp.</span>

<span style="color: #2aa198;">An event is a directory whose name has the format YYYY-MM-DD-EventName.</span>
<span style="color: #2aa198;">A event note is the file named notes.org under the event directory."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span> ((events (directory-files dms/org-publish-event-root-dir nil
                    <span style="color: #2aa198;">"^[0-9]\\{</span><span style="color: #268bd2;">4\\</span><span style="color: #2aa198;">}-[0-9]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}-[0-9]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}-.+"</span>))
         (nopublish-event-alist
          (<span style="color: #859900; font-weight: bold;">if</span> dms/org-publish-nopublish-events-fp
              (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
                (insert-file-contents dms/org-publish-nopublish-events-fp)
                (split-string (buffer-string) <span style="color: #2aa198;">"\n"</span> t))))
         (filtered-events (seq-difference events nopublish-event-alist))
         (event-notes-to-publish
          (mapcar (<span style="color: #859900; font-weight: bold;">lambda</span> (event) (concat
                                   (file-name-as-directory event)
                                   <span style="color: #2aa198;">"notes.org"</span>)) <span style="color: #cb4b16; font-weight: bold;">filtered-events)))</span>
    (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (event-note)
                  (file-exists-p (concat (file-name-as-directory
                                          dms/org-publish-event-root-dir)
                                         event-note)))
                event-notes-to-publish)))
</pre>
</div>

<p>
After that we define the way to format the event note in the sitemap, i.e.,
formatting as <code>=date= [[path][title]]</code>.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-sitemap-format-event-note-entry</span> (entry style project)
  <span style="color: #2aa198;">"Format an event note ENTRY in org-publish PROJECT Sitemap as</span>
<span style="color: #2aa198;">=date= [[file][title]]."</span>
  (<span style="color: #859900; font-weight: bold;">let</span> ((filetitle (org-publish-find-title entry project)))
    (<span style="color: #859900; font-weight: bold;">if</span> (= (length filetitle) 0)
        (format <span style="color: #2aa198;">"*%s*"</span> entry)
      (format <span style="color: #2aa198;">"=%s= [[file:%s][%s]]"</span>
              (format-time-string <span style="color: #2aa198;">"%Y-%m-%d"</span>
                                  (org-publish-find-date entry project))
              entry
              filetitle))))
</pre>
</div>

<p>
Finally, we set up the project alist variable and publish. By the way, we can always check the returned value
of <code>dms/org-publish-get-event-notes</code> to see the list of files to be published.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Define the publishing project</span>
(<span style="color: #859900; font-weight: bold;">setq</span> org-publish-project-alist
      (list
       (list <span style="color: #2aa198;">"event-notes"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> dms/org-publish-event-root-dir
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"dummy"</span>
             <span style="color: #657b83; font-weight: bold;">:include</span> (dms/org-publish-get-event-notes)
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> dms/org-publish-event-root-dir
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #657b83; font-weight: bold;">:recursive</span> nil
             <span style="color: #657b83; font-weight: bold;">:auto-sitemap</span> t
             <span style="color: #657b83; font-weight: bold;">:sitemap-title</span> <span style="color: #2aa198;">"Event Notes"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-filename</span> <span style="color: #2aa198;">"index.org"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-format-entry</span> 'dms/org-sitemap-format-event-note-entry
             <span style="color: #657b83; font-weight: bold;">:sitemap-sort-files</span> 'anti-chronologically
             <span style="color: #657b83; font-weight: bold;">:sitemap-style</span> 'list
             )))

<span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Generate the site output</span>
(org-publish-all t)

(message <span style="color: #2aa198;">"Publish complete!"</span>)
</pre>
</div>

<p>
We can place this script in our <code>.emacs.d/</code> directory.
Whenever we want to rebuild the index page of the document folder,
simply visit it and run <code>eval-buffer</code>.
</p>
</div>
</div>

<div id="outline-container-org7b524b2" class="outline-2">
<h2 id="org7b524b2">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-org7b524b2">
<ol class="org-ol">
<li><a href="https://orgmode.org/manual/Publishing.html">Publishing - The Org Mode Manual</a></li>
<li><a href="https://taingram.org/blog/org-mode-blog.html">Building a Emacs Org-Mode Blog</a></li>
<li><a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">Build Your Website with Org Mode - System Crafaters</a></li>
<li><a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">Publishing Org-mode files to HTML</a></li>
<li><a href="https://remacs.cc/posts/%E9%9D%A2%E5%90%91%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84emacs%E6%95%99%E7%A8%8B17.-%E9%80%9A%E8%BF%87org-mode%E5%86%99%E5%8D%9A%E5%AE%A2/">面向产品经理的Emacs教程：17. 通过Org mode写博客</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-14-TryOrgPublish/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-14-TryOrgPublish/notes.html</guid>
  <pubDate>Sun, 14 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Insert Code Block in LaTeX]]></title>
  <description><![CDATA[
<p>
The most simple way of inserting code blocks in LaTeX is the built-in
command <code>\verb</code> and environment <code>verbatim</code>.
</p>

<p>
The command <code>\verb</code> can produce inline code. It is better than
<code>\texttt</code> for source code because characters in <code>\verb</code> will be treated
literally. For example, <code>\verb+\textbf{a}+</code> produces <code>\textbf{a}</code>
in monospace font, but <code>\texttt{\textbf{a}}</code> produces a single
character <b><code>a</code></b>, in bold monospace font. Here, the <code>+</code> character after <code>\verb</code>
acts as a delimiter. Any character except letters and <code>*</code> can be used as a delimiter
in <code>\verb</code>. For example, <code>\verb|...|</code> is equivalent to <code>\verb+...+</code>.
</p>

<p>
Similar to <code>\verb</code>, texts enclosed inside the environment <code>verbatim</code> are printed literally.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\documentclass</span>{<span style="color: #657b83; font-weight: bold;">article</span>}
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">document</span>}

The command <span style="color: #859900; font-weight: bold;">\verb</span>|\verb| can produce inline code.

The <span style="color: #859900; font-weight: bold;">\verb</span>+\verb|\textbf{a}|+ produces <span style="color: #859900; font-weight: bold;">\verb</span>|\textbf{a}|,
but <span style="color: #859900; font-weight: bold;">\verb</span>+\texttt{\textbf{a}}+ produces <span style="color: #859900; font-weight: bold;">\texttt</span>{<span style="color: #859900; font-weight: bold;">\textbf</span>{<span style="font-weight: bold;">a</span>}}.

<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">verbatim</span>}
Text enclosed inside verbatim environment
is printed directly
and all \LaTeX{} commands are ignored.

Blank lines           and spaces are preserved.
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">verbatim</span>}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">document</span>}
</pre>
</div>

<p>
The LaTeX code above produces the following output.
</p>


<figure id="orgcc70cd4">
<img src="./simple-code.png" alt="simple-code.png">

</figure>

<p>
Besides the built-in commands, there are various packages providing more features for redering code blocks.
These packages generally are more powerful and can add syntax highlighting, line numbers, background color
and etc. Usual choices include <code>listings</code> package,  <code>minted</code> package
and <code>tcolorbox</code> package. While  <code>listings</code> and  <code>minted</code> are mainly focusing on redering source codes,
<code>tcolorbox</code> is a general package for redering contents in a box.
Actually, <code>tcolorbox</code> internally loads <code>listings</code> or <code>minted</code> packages.
</p>

<div id="outline-container-org44219d9" class="outline-2">
<h2 id="org44219d9">Create Own Code Block Environment with tcolorbox</h2>
<div class="outline-text-2" id="text-org44219d9">
<p>
When <code>tcolorbox</code> is loaded with the option <code>listings</code>, it provides various useful predefined commands
for rendering source blocks by loading <code>listings</code> package automatically. Besides the <code>listings</code> option,
we can also toggle the <code>breakable</code> option to allow a box to span across pages.
</p>

<p>
In the following example, we create two code block envrionments with <code>tcolorbox</code> and <code>listings</code> in preamble.
These two envrionments are basically identical, except that one can read code from external
files and we do no need to copy the code from source files into our latex manuscript.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\documentclass</span>{<span style="color: #657b83; font-weight: bold;">article</span>}

<span style="color: #859900; font-weight: bold;">\usepackage</span>{<span style="color: #657b83; font-weight: bold;">xcolor</span>}
<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">define colors</span>
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codebg}{RGB}{253, 246, 227}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codefg}{RGB}{101, 123, 131}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegreen}{RGB}{133, 153, 0}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegray}{RGB}{147, 161, 161}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codecyan}{RGB}{42, 161, 152}

<span style="color: #859900; font-weight: bold;">\usepackage</span>[listings,breakable,skins]{<span style="color: #657b83; font-weight: bold;">tcolorbox</span>}
<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">declare our code block environment</span>
  <span style="color: #859900; font-weight: bold;">\newtcblisting</span>{tcbcodeblock}[1]{<span style="color: #93a1a1;">%</span>
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }

<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">like tcbcodeblock, but read code from files</span>
  <span style="color: #859900; font-weight: bold;">\newtcbinputlisting</span>{<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>}[2]{<span style="color: #93a1a1;">%</span>
    listing file={#2},
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>

<p>
In the main document, we can use <code>tcbcodeblock</code> as a normal environment
with one mandatory argument, which specifies the language of source code,
and use <code>tcbinputcodeblock</code> as a normal command with two mandatory arguments,
which specify the language of source code and the name of the source file.
See the table in <a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/listings/listings.pdf">the manual</a> of <code>listings</code> for a complete list of supported languages.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">document</span>}
After declaring our own environment <span style="color: #859900; font-weight: bold;">\verb</span>|tcbcodeblock|.
we can enclose source codes in it and render them in <span style="color: #859900; font-weight: bold;">\LaTeX</span>.

This is a code block of <span style="color: #859900; font-weight: bold;">\TeX</span>.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{TeX}
Hello, <span style="color: #859900; font-weight: bold;">\TeX</span>!
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

This is a code block of Python.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{Python}
# python code
print("Hello, world!")
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

This is a code block of C.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{C}
// C code
#include &lt;stdio.h&gt;
int main() {
   printf("Hello, World!");
   return 0;
}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

The <span style="color: #859900; font-weight: bold;">\verb</span>|\tcbinputcodeblock| can read codes from a file
and render them in a source block like <span style="color: #859900; font-weight: bold;">\verb</span>|\tcbcodeblock|.
This is the <span style="color: #859900; font-weight: bold;">\LaTeX</span>\ source code of this manuscript.
<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>{[LaTeX]TeX}{./tcolorbox-listings.tex}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">document</span>}
</pre>
</div>


<figure id="org643c108">
<img src="./tcolorbox-listings.png" alt="tcolorbox-listings.png">

</figure>
</div>
</div>

<div id="outline-container-org26fc407" class="outline-2">
<h2 id="org26fc407">Explanation of the Created Code Environment</h2>
<div class="outline-text-2" id="text-org26fc407">
<p>
First, we load <code>tcolorbox</code> with appropriate options. In addition, we load the <code>xcolor</code> package for color support.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\usepackage</span>{<span style="color: #657b83; font-weight: bold;">xcolor</span>}
<span style="color: #859900; font-weight: bold;">\usepackage</span>[listings,breakable,skins]{<span style="color: #657b83; font-weight: bold;">tcolorbox</span>}
</pre>
</div>

<p>
Then, we create our own code environment for furture uses.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">define colors</span>
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codebg}{RGB}{253, 246, 227}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codefg}{RGB}{101, 123, 131}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegreen}{RGB}{133, 153, 0}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegray}{RGB}{147, 161, 161}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codecyan}{RGB}{42, 161, 152}
</pre>
</div>

<p>
After that, we create a new envrionment <code>tcbcodeblock</code> with one argument, which is used to specify the code language.
This envrionment can render source code in a box with following features.
</p>

<ol class="org-ol">
<li>Use the <code>enhanced</code> skin.</li>
<li>Box corners are squared.</li>
<li>Box borders are drawn with black lines.</li>
<li>Text color is set to <code>codefg</code>, which is defined previously by RGB(101, 123, 131).</li>
<li>Background color is set to <code>codebg</code>, which is defined previously by RGB(253, 246, 227).</li>
<li>This box can span across multiple pages.</li>
<li>Minimal margin layout with <code>\fbox</code> style.</li>
<li>Show code only (if the source code is latex manuscript, you can remove the <code>listing only</code> option to show
the expected latex output of the latex code enclosed in this envrionment).</li>
<li>Use the predefined style <code>tcblatex</code>. This overwirtes options of the <code>listings</code> package by
options of <code>tcolorbox</code> package. If this line is absent, some of your settings of <code>tcolorbox</code> will not take
effects in this environment.</li>
<li>Set the language of the source code. This is used to identify strings, comments and keywords in the code.</li>
<li>Does not render space as character <code>␣</code>.</li>
<li>Does not render space in strings as character <code>␣</code>.</li>
<li>Text color of comments, keywords and strings are set to  <code>codegray</code>, <code>codegreen</code> and <code>codecyan</code> respectively.</li>
<li>Set text font to monospace and footnote size.</li>
</ol>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">declare our code block environment</span>
  <span style="color: #859900; font-weight: bold;">\newtcblisting</span>{tcbcodeblock}[1]{<span style="color: #93a1a1;">%</span>
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>

<p>
In addition, we provide a command <code>tcbinputcodeblock</code>, which functions like <code>tcbcodeblock</code> but
read code from external files. It accepts two arguments, one is the language and the other one is the
name of the source file.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">like tcbcodeblock, but read code from files</span>
  <span style="color: #859900; font-weight: bold;">\newtcbinputlisting</span>{<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>}[2]{<span style="color: #93a1a1;">%</span>
    listing file={#2},
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc4fc538" class="outline-2">
<h2 id="orgc4fc538">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-orgc4fc538">
<ol class="org-ol">
<li><a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/tcolorbox/tcolorbox.pdf">the official manual of tcolorbox - CTAN</a></li>
<li><a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/listings/listings.pdf">the official manual of listings - CTAN</a></li>
<li><a href="https://liam.page/2016/07/22/using-the-tcolorbox-package-to-create-a-new-theorem-environment/">LaTeX 黑魔法（一）：tcolorbox 宏包简明教程</a></li>
<li><a href="https://www.overleaf.com/learn/latex/Code_listing">Code listing - Overleaf</a></li>
<li><a href="https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted">Code Highlighting with minted</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-latex.html">latex</a> </div>]]></description>
  <category><![CDATA[latex]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-11-CodeBlockinLaTeX/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-11-CodeBlockinLaTeX/notes.html</guid>
  <pubDate>Thu, 11 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[An Advanced Guide to Unison]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0b3c5f4">Preferences</a></li>
<li><a href="#org0f0b2ed">Setting Preference</a></li>
<li><a href="#org312df37">Profiles</a></li>
<li><a href="#org57a2ef7">Path Specification</a></li>
<li><a href="#org55ef2db">Ignoring</a></li>
<li><a href="#org036ff8d">Backup</a></li>
<li><a href="#org3c99753">Scenario: Synchronize with a USB Drive</a>
<ul>
<li><a href="#org88731ce">Possible Errors</a></li>
<li><a href="#org9edca16">Syncrhonize with FAT/NTFS Filesystems</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
In the previous blog, we introduced basics of <a href="https://github.com/bcpierce00/unison">Unison</a>, the lightweight yet versatile file-synchronization tool for Unix and Windows.
In this blog, we will cover more advanced topics, including <i>profiles</i>, <i>ignoring</i>, <i>backup,</i> etc.
You can also find the complete documentation in <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
</p>

<div id="outline-container-org0b3c5f4" class="outline-2">
<h2 id="org0b3c5f4">Preferences</h2>
<div class="outline-text-2" id="text-org0b3c5f4">
<p>
Many details of Unison’s behavior are configurable by user-settable <i>preferences</i> (or, arguments,
options, in other words). If we type <code>unison -help</code>, then the outputs will look like
</p>

<pre class="example" id="org1225f28">
Usage: unison [options]
    or unison root1 root2 [options]
    or unison profilename [options]

Basic options:

  General:
   -doc xxx            show documentation ('-doc topics' lists topics)
   -version            print version and exit

  What to sync:
   ...

  How to sync:
   ...

  ...
</pre>

<p>
Here, we see that there are three ways to run Unison, and each way accepts <code>[options]</code>,
standing for various options grouped and detailed below the <i>Usage</i> section.
</p>

<p>
The most general way of running Unison is the first one <code>unison [options]</code>.
Indeed, you can set the two directories that you want to synchronize
inside the options. For example,
</p>

<div class="org-src-container">
<pre class="src src-bash">unison work mirror
</pre>
</div>

<p>
is equivalent to
</p>

<div class="org-src-container">
<pre class="src src-bash">unison -root work -root mirror
</pre>
</div>

<p>
Here, the preference <code>root</code> appears twice, standing for the root directories we want to synchronize.
</p>

<p>
The thrid way of running Unison, <code>unison profilename [options]</code>, is a convenient way
to apply a collection of preferences predefined in profile. Of course, the preferences given
after the <code>profilename</code> will override the values defined in the profile if necessary.
</p>

<p>
Unison provides a lot of preferences for customizing its behaviors and it is recommended to
go through these options once by typing <code>unison -help</code>.
</p>
</div>
</div>

<div id="outline-container-org0f0b2ed" class="outline-2">
<h2 id="org0f0b2ed">Setting Preference</h2>
<div class="outline-text-2" id="text-org0f0b2ed">
<p>
There are two ways to set the values of preferences: temporarily, by providing command-line arguments
to a particular run of Unison, or permanently, by adding commands to a profile in the <code>.unison</code> directory on
the client host.
</p>

<p>
In the command line, if we want to set a value of a preference, say <code>p</code>, then we should be careful about its type.
</p>

<ul class="org-ul">
<li>If <code>p</code> is a boolean flag, then adding an argument <code>-p=false</code> will set <code>p</code> to false and adding <code>-p=true</code> (or simply
<code>-p</code>) will set <code>p</code> to true.</li>

<li>If <code>p</code> is a numeric or string preference, then adding an argument <code>-p value</code> is enough.</li>
</ul>

<p>
In the profile, a line in the form <code>p = value</code> works for both boolean flags and non-boolean falgs.
</p>
</div>
</div>

<div id="outline-container-org312df37" class="outline-2">
<h2 id="org312df37">Profiles</h2>
<div class="outline-text-2" id="text-org312df37">
<p>
A <i>profile</i> is a text file that specifies permanent settings for roots, paths, ignore patterns, and other preferences.
Profiles should reside in the <code>.unison</code> directory on the <i>client</i> machine.
The <code>.unison</code> directory is by default set to <code>$HOME/.unison</code> in Unix; see <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>
for more details on its location in other systems and how to change it.
</p>

<p>
If Unison is started  with just one argument <code>name</code> on the command line, it looks for a profile called
<code>name</code> (or <code>name.prf</code>, if not found) in the <code>.unison</code> directory.
 If Unison is started with no arguments, it will behave as <code>name</code> has been set to <code>default</code>,
i.e., looking for a profile called <code>default</code> or <code>default.prf</code>.
</p>

<p>
Inside a profile,
</p>

<ul class="org-ul">
<li>blank lines and lines beginning with <code>#</code> both are ignored;</li>
<li>a line of the form <code>p = value</code> sets the value of preference <code>p</code> to <code>value</code>;</li>
<li>Spaces and tabs before and after <code>p</code> and <code>value</code> are ignored;</li>
<li>Spaces, tabs, and non-printable characters within values are treated literally,
so that e.g. <code>root = /foo bar</code> refers to a directory containing a space;</li>
<li>a line of the form <code>include name</code> causes the file <code>name</code> (or <code>name .prf</code>,
if not found) to be read at the point, and included as if its contents;</li>
<li>a line of the form <code>source name</code> does the same as <code>include name</code> except that it does not
attempt to add a suffix to name;</li>
<li>Similar lines of the form <code>include? name</code> or <code>source? name</code> do the same
as their respective lines without the question mark except that it does not constitute an error to specify a
non-existing file name.</li>
</ul>

<p>
A profile may include a special preference <code>label</code> to provide a description of the options selected in this
profile. Its value is listed along with the profile name in the graphical user interface.
</p>
</div>
</div>

<div id="outline-container-org57a2ef7" class="outline-2">
<h2 id="org57a2ef7">Path Specification</h2>
<div class="outline-text-2" id="text-org57a2ef7">
<p>
Several Unison preferences (e.g., <code>ignore</code>, <code>backup</code>, <code>merge</code>, etc.) specify individual paths or sets of paths.
These preferences can be set to any of the following patterns.
</p>

<ol class="org-ol">
<li><code>Name name</code> matches any path in which the last component matches <code>name</code>.
For example, <code>Name N</code> can match a pathlike <code>mirror/N</code>, even if it is a directory.</li>

<li><code>Path path</code> matches exactly the path <code>path</code>.</li>

<li><code>BelowPath path</code> matches the path <code>path</code> and any path below.</li>
</ol>

<p>
In those forms, the <code>name</code> or <code>path</code> argument can be a glob pattern, which means
<code>*</code>, <code>?</code>, <code>[]</code> and <code>{}</code> have their special meanings.
</p>
</div>
</div>

<div id="outline-container-org55ef2db" class="outline-2">
<h2 id="org55ef2db">Ignoring</h2>
<div class="outline-text-2" id="text-org55ef2db">
<p>
We can instruct Unison to ignore paths by setting the preference <code>ignore</code>. For example, the below line
in a profile tells Unison to ignore the path <code>a/b</code>:
</p>

<pre class="example" id="orgdd6d085">
ignore = Path a/b
</pre>

<p>
Of course, you can set <code>ignore</code> multiple times to ignore as many files as you want.
</p>

<p>
There is also an <code>ignorenot</code> preference, which specifies a set of patterns for paths that should not be
ignored, even if they match an ignore pattern.
</p>

<p>
Here are a few extra points regarding the ignore preference you probably want to know.
</p>

<ol class="org-ol">
<li>If a directory is ignored, then <i>all its descendants</i> will be too.</li>

<li>Be careful about renaming directories containing ignored files. Because Unison understands the rename
as a delete plus a create, any ignored files in the directory will be lost.</li>

<li>The interaction of these two sets of patterns can be a little tricky.
If a path matches an <i>ignore</i> pattern and does not match an
<i>ignorenot</i> pattern, then this whole path <i>including everything below it</i> will be ignored.
For example, if the ignore pattern contains <code>Name data</code> and the ignorenot pattern contains <code>Name *.py</code>,
then Unison still ignores a path like <code>data/a.py</code>.</li>
</ol>
</div>
</div>

<div id="outline-container-org036ff8d" class="outline-2">
<h2 id="org036ff8d">Backup</h2>
<div class="outline-text-2" id="text-org036ff8d">
<p>
When Unison overwrites (or deletes) a file or directory while propagating changes from the other replica,
it can keep the old version around as a backup. Similar to ignoring, you can set the preference <code>backup</code>
to require what kind of files should be backed up. For example,
</p>

<pre class="example" id="orga95de67">
backup = Name *
</pre>

<p>
causes Unison to create backups for <i>all</i> files and directories. You can also set the preference
<code>backupnot</code> for exceptions, just like <code>ignorenot</code> for <code>ignore</code>.
</p>

<p>
The location of backup files are controlled by <code>backuploc</code>, whose value must be either
</p>

<ul class="org-ul">
<li><code>local</code>, meaning that backup files are stored in the same directory as the original;</li>
<li><code>central</code>, which is the default value, meaning that all backup files should be stored in
the directory specified by preference <code>backupdir</code>. The default value of <code>backupdir</code> is
<code>.unison/backup</code>.</li>
</ul>

<p>
We can have finer controls on backup files by setting preferences like
<code>maxbackups</code>, <code>backupprefix</code>, <code>backupsuffix</code> and etc.
</p>

<p>
It is important to note that Unison will backup will only be checked against updated paths,
not their descendants. For example, if you set <code>backup = Name *.txt</code> and then delete a whole directory named
<code>foo</code> containing some text files, these files will not be backed up because Unison will just check that <code>foo</code>
is updated and it does not match <code>*.txt</code>. Similarly, if the directory itself happened to be called <code>foo.txt</code>,
then the whole directory and all the files in it will be backed up, regardless of their names.
</p>
</div>
</div>

<div id="outline-container-org3c99753" class="outline-2">
<h2 id="org3c99753">Scenario: Synchronize with a USB Drive</h2>
<div class="outline-text-2" id="text-org3c99753">
<p>
Assume We want to synchronize our home directory <code>/home/dou</code> with a USB drive,
mounted at <code>/media/dou/KINGSTON</code>.
It is very likely that Unison will raise errors time to time. But don't worry. Those errors are
intended and we explain them below.
</p>
</div>

<div id="outline-container-org88731ce" class="outline-3">
<h3 id="org88731ce">Possible Errors</h3>
<div class="outline-text-3" id="text-org88731ce">
<p>
If our USB drive is empty, the first time we run Unison will simply copying files.
Suppose we have done and reject the USB drive. What will happen if we accidentally
run Unison again, e.g., triggered by a crontab task?
</p>

<p>
The answer is that Unison will try to <i>remove our whole home directory</i>!
As Unison keeps a records of the state of last synchronization,
it sees that <code>/home/dou</code> hasn't changed and <code>/media/dou/KINGSTON</code> is now empty.
So it will try the apply the changes made in the latter to the former,
which results the deletion of a whoe replica.
Fortunately, if <code>confirmbigdel</code> is set to true, which is the default case,
Unison will ask for the confirmation of such deletion.
If Unison is run in batch mode, it will simply abort and exit.
</p>

<p>
If what we want to do is synchronizing <code>/home/dou/Documents</code> with <code>/media/dou/KINGSTON/Documents</code>,
then Unison might throw the <i>No such file or directory</i> error.
This is the case when our USB drive is rejected, the default mount point <code>/media/dou/KINGSTON</code>
is also deleted. As the second root directory
 <code>/media/dou/KINGSTON/Documents</code>  does not exist, Unison will first try to
cd to the parent directory <code>/media/dou/KINGSTON</code>, which does not exist too.
So Unison exits with <i>Fatal Error: Cannot find canonical name of &#x2026;</i>
</p>
</div>
</div>

<div id="outline-container-org9edca16" class="outline-3">
<h3 id="org9edca16">Syncrhonize with FAT/NTFS Filesystems</h3>
<div class="outline-text-3" id="text-org9edca16">
<p>
If Unison is running on a Unix-like machine but told to synchronize
with FAT/NTFS filesystems, the <code>fat</code> preference should be set to true,
which is equivalent to
</p>

<ul class="org-ul">
<li>do not synchronize permissions, <code>perms = 0</code>;</li>
<li>never use chmod, <code>dontchmod = true</code>;</li>
<li>treat filenames as case insensitive, <code>ignorecase = true</code>;</li>
<li>do not attempt to synchronize symbolic links, <code>links = false</code>;</li>
<li>ignore inode number changes when detecting updates, <code>ignoreinodenumbers = true</code>.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/advanced.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/advanced.html</guid>
  <pubDate>Sun, 07 Jan 2024 21:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Beginner's Guide to Unison]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4cc1eed">A Demo</a></li>
<li><a href="#org18b194c">Basic Concepts</a></li>
<li><a href="#org182b82d">Typical Usage</a></li>
<li><a href="#org60c31f2">Caveats and Shortcomings</a></li>
<li><a href="#org4bc05c3">Going Further</a></li>
</ul>
</div>
</nav>
<p>
<a href="https://github.com/bcpierce00/unison">Unison</a> is a file-synchronization tool for Unix and Windows. It allows two replicas of a collection of files and
directories to be stored on different hosts (or different disks on the same host), modified separately, and then
brought up to date by propagating the changes in each replica to the other.
</p>

<p>
<b>Note:</b> This review is a short summary of <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
Please use version 2.52 or newer to avoid version interoperability issues.
</p>

<div id="outline-container-org4cc1eed" class="outline-2">
<h2 id="org4cc1eed">A Demo</h2>
<div class="outline-text-2" id="text-org4cc1eed">
<p>
Unison can be used with either of two user interfaces: a textual interface and a graphical interface.
</p>

<p>
Let's consider a simple scenario and see how to synchronize two directories on a single machine.
</p>

<ol class="org-ol">
<li value="0">install Unison. Basically, we need only two executable binary files, <code>unison</code> and <code>unison-gui</code>,
downloaded from the proper release tarball in <a href="https://github.com/bcpierce00/unison">its github repository</a>.</li>

<li><p>
Set up a <code>work</code> directory and a <code>mirror</code> direcotry for our illustration
</p>

<div class="org-src-container">
<pre class="src src-bash">    mkdir work
    touch work/a work/b
    mkdir work/d
    touch work/d/f
    cp -r work mirror
</pre>
</div></li>

<li>Try synchronizing <code>work</code> and <code>mirror</code>. Since they are identical, synchronizing them won’t propagate
any changes, but Unison will remember the current state of both directories so that it will be able to tell
next time what has changed by typing <code>unison work mirror</code>.

<ul class="org-ul">
<li><i>textual interface:</i> you should see a message notifying you that all the files are actually equal and then get returned to
the command line, and you may also get a warning message for creating <i>archives</i> (the private data structure used by Unison)
as this is the first run of Unison.</li>

<li><i>graphical interface:</i> You should get a big empty window with a message at the bottom notifying you <i>everything is up-to-date</i>.</li>
</ul></li>

<li><p>
Make some changes in <code>work</code> and <code>mirror</code>
</p>

<div class="org-src-container">
<pre class="src src-bash">    rm work/a
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello"</span> &gt; work/b
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello"</span> &gt; mirror/b
    date &gt; mirror/c
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hi there"</span> &gt; work/d/h
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello there"</span> &gt; mirror/d/h
</pre>
</div></li>

<li><p>
Try synchronizing <code>work</code> and <code>mirror</code> again by typing <code>unison work mirror</code>.
</p>

<p>
Let us elaborate the behaviors of the textual interface in this case.
</p>

<ol class="org-ol">
<li value="0">Unison will display <i>only</i> the files that are different and ask for actions one by one.
If a file has been changed in the same way and remain identical in both directories,
Unison will simply note the file is up-to-date and nothing will be shown. So we expect three
changes to be decided: the absent file of <code>a</code> in <code>work</code>, the new file <code>c</code> in <code>mirror</code>
and the conflicting changes on <code>d/h</code>.</li>

<li><p>
Unison will notify the creation of <code>c</code> in <code>mirror</code> and prompt a line like
</p>

<pre class="example" id="org298f060">
         &lt;--- new file   c  [f]
</pre>

<p>
We can follow Unison’s recommendation, press <code>f</code> or <code>[ENTER]</code> at the prompt.
Or we can simply ignore this file and leave both replicas alone by pressing <code>/</code>.
Pressing <code>?</code> for a list of possible responses and their meanings.
See also <a href="https://stackoverflow.com/questions/64587602/how-does-one-use-the-matching-condition-commands-for-the-unison-cli">this question</a> for explanation on the key <code>L</code> and matching conditions.
</p></li>

<li><p>
Similarly, Unison will notify the delete of <code>a</code> in work and prompt a line like
</p>

<pre class="example" id="org550d8b9">
deleted  ---&gt;            a  [f]
</pre></li>

<li><p>
For conflicting changes on <code>d/h</code>, Unison will prompt a line like
</p>

<pre class="example" id="orgfab7013">
new file &lt;-?-&gt; new file   d/h  []
</pre></li>

<li><p>
Suppose we skip the file <code>d/h</code> and accept changes on file <code>a</code> and <code>c</code>, Unison
will briefly summarize the actions it is supposed to do and asks for
confirmation
</p>

<pre class="example" id="org2ba5235">
2 items will be synced, 1 skipped
0 B to be synced from work to mirror
32 B to be synced from mirror to work

Proceed with propagating updates? []
</pre></li>

<li>Finally, if we confirm then Unison will apply changes and output logs of the process.</li>
</ol>

<p>
The usage of the graphical interface is similar. The main window shows all the files that have been modified.
To override a default action (or to select an action in the case when there is no default), first select the file
by clicking on its name, then press the desired action key metioned before.
When you are satisfied with the propagation of changes as shown in the main window,
click the <i>Go</i> button to set them in motion.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org18b194c" class="outline-2">
<h2 id="org18b194c">Basic Concepts</h2>
<div class="outline-text-2" id="text-org18b194c">
<p>
Below is a short summary of <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
</p>

<ol class="org-ol">
<li><i>Roots.</i> A replica’s root tells Unison where to find a set of files to be synchronized, either on the local machine or on
a remote host. The pattern of the root is <code>[protocol:]//[user@][host][:port][path]</code>.
When <code>path</code> is given without any protocol prefix, the protocol is assumed to be <code>file</code>.
Other possible protocol arguments include <code>ssh</code> and <code>socket</code>.
If <code>path</code> is a relative path, then it actually specifies a local root relative to the directory where Unison is started.</li>

<li><i>Paths.</i> A <i>path</i> refers to a point within a set of files being synchronized; it is specified relative to the root of the
replica. Formally, a path is just a sequence of names, separated by <code>/</code>.
The empty path (i.e., the empty sequence of names) denotes the whole replica.
Unison displays the empty path as <code>[root]</code>.</li>

<li><i>Descendants.</i>   If <code>p</code> is a path and <code>q</code> is a path beginning with <code>p</code>, then <code>q</code> is said to be a <i>descendant</i> of <code>p</code>.
Thus, each path is also a descendant of itself.</li>

<li><p>
<i>Contents.</i> The <i>contents</i> of a path <code>p</code> in a particular replica could be a file, a directory, a symbolic link, or absent (if p
does not refer to anything at all in that replica). More specifically:
</p>

<ol class="org-ol">
<li>If <code>p</code> refers to an ordinary file, then the contents of p are the actual contents of this file (a string of
bytes) plus the current permission bits of the file.</li>

<li>If <code>p</code> refers to a symbolic link, then the contents of <code>p</code> are just the string specifying where the link points.</li>

<li>If <code>p</code> refers to a directory, then the contents of p are just the token <i>DIRECTORY</i> plus the current
permission bits of the directory.</li>

<li>If <code>p</code> does not refer to anything in this replica, then the contents of <code>p</code> are the token <i>ABSENT</i>.</li>
</ol>

<p>
Unison keeps a record (named <i>archives</i>) of the contents of each path after each successful synchronization
of that path (i.e., it remembers the contents at the last moment when they were the same in the two replicas).
</p></li>

<li><i>Update.</i> A path is <i>updated</i> (in some replica) if its current contents are different from its contents the
last time it was successfully synchronized.</li>

<li><i>Conflicts.</i> A path is said to be <i>conflicting</i> if the following conditions <i>all</i> hold:

<ol class="org-ol">
<li>it has been updated in one replica,</li>

<li>any of its descendants has been updated in the other replica,</li>

<li>its contents in the two replicas are not identical.</li>
</ol></li>

<li><i>Reconciliation.</i> Unison operates in several distinct stages:

<ol class="org-ol">
<li>On each host, it compares its archive file (which records the state of each path in the replica when it
was last synchronized) with the current contents of the replica, to determine which paths have been updated.</li>

<li>It checks for <i>false conflicts</i>  — paths that have been updated on both replicas, but whose current
values are identical. These paths are silently marked as synchronized in the archive files in both replicas.</li>

<li>It displays all the updated paths to the user. For updates that do not conflict, it suggests a default
action (propagating the new contents from the updated replica to the other). Conflicting updates are
just displayed. The user is given an opportunity to examine the current state of affairs, change the
default actions for nonconflicting updates, and choose actions for conflicting updates.</li>

<li>It performs the selected actions, one at a time. Each action is performed by first transferring the new
contents to a temporary file on the receiving host, then atomically moving them into place.</li>

<li>It updates its archive files to reflect the new state of the replicas.</li>
</ol></li>

<li><p>
<i>Invariants.</i> Unison is careful to protect both its internal state and the state of the replicas at every point in this
process. Specifically, the following guarantees are enforced:
</p>

<ol class="org-ol">
<li>At every moment, each path in each replica has either

<ol class="org-ol">
<li>its original contents (i.e., no change at all has been made to this path), or</li>

<li>its correct final contents (i.e., the value that the user expected to be propagated from the other replica).</li>
</ol></li>

<li>At every moment, the information stored on disk about Unison’s private state can be either

<ol class="org-ol">
<li>unchanged, or</li>
<li>updated to reflect those paths that have been successfully synchronized.</li>
</ol></li>
</ol>

<p>
If Unison gets interrupted during ensuring those guarantees, some manual cleanup may be required.
In this case, a file called DANGER.README will be left in the <code>.unison</code> directory,
containing information about the operation that was interrupted.
The next time you try to run Unison, it will notice this file and warn you about it.
</p>

<p>
If Unison is interrupted, it may sometimes leave temporary working files (with suffix <code>.tmp</code>) in the replicas.
It is safe to delete these files. Also, if the backups flag is set, Unison will leave around old versions of files
that it overwrites, with names like <code>file.0.unison.bak</code>. These can be deleted safely when they are no longer wanted.
</p>

<p>
If Unison finds that its archive files have been deleted (or that the archive format has changed and they
cannot be read, or that they don’t exist because this is the first run of Unison on these particular roots),
it takes a conservative approach: it behaves as though the replicas had both been completely empty at the
point of the last synchronization. Thus, It is also safe to delete those archive files on both replicas.
The next time Unison runs, it will assume that all the files it sees in the replicas are new.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org182b82d" class="outline-2">
<h2 id="org182b82d">Typical Usage</h2>
<div class="outline-text-2" id="text-org182b82d">
<p>
Once you are comfortable with the basic operation of Unison, you may find yourself wanting to use it
regularly to synchronize your commonly used files. There are several possible ways of going about this:
</p>

<ol class="org-ol">
<li>Synchronize your whole home directory, using the <i>Ignore facility</i> to
avoid synchronizing particular directories and files.</li>

<li>Synchronize your whole home directory, but tell Unison to synchronize only some of
the files and subdirectories within it. This can be accomplished by specifying the <code>-path</code>
arguments in your <i>profile</i>.</li>

<li>Create another directory called <code>shared</code> (or <code>current</code>, or whatever) on each host,
and put all the files you want to synchronize into this directory. Tell Unison to synchronize <code>shared</code>
among different hosts.</li>

<li>Create another directory called <code>shared</code> (or <code>current</code>, or whatever) on each host,
and put <i>links</i> to all the files you want to synchronize into this directory. Use the <code>follow</code> preference
to make Unison treat these links as transparent.</li>
</ol>

<p>
Unison is designed for synchronizing pairs of replicas. However, it is possible to use it to keep larger groups
of machines in sync by performing multiple pairwise synchronizations.
If you need to do this, the most reliable way to set things up is to organize the machines into a <i>star topology</i>
with one machine designated as the <i>hub</i> and the rest as <i>spokes</i> and with each spoke machine
synchronizing only with the hub.
</p>
</div>
</div>

<div id="outline-container-org60c31f2" class="outline-2">
<h2 id="org60c31f2">Caveats and Shortcomings</h2>
<div class="outline-text-2" id="text-org60c31f2">
<p>
Here are some things to be careful of when using Unison.
</p>

<ol class="org-ol">
<li>Unison cannot understand rename, and sees it as a delete and a separate create.</li>

<li><p>
You need to be very <i>CAREFUL</i> when renaming directories containing <code>ignored</code> files.
</p>

<p>
For example, suppose Unison is synchronizing directory <code>A</code> between the two machines called the <i>local</i>
and the <i>remote</i> machine; suppose directory <code>A</code> contains a subdirectory <code>D</code>; and suppose <code>D</code> on the
local machine contains a file or subdirectory <code>P</code> that matches an ignore directive in the profile used to
synchronize. Thus path <code>A/D/P</code> exists on the local machine but not on the remote machine.
</p>

<p>
If <code>D</code> is renamed to <code>Dnew</code> on the remote machine, and this change is propagated to the local machine, all
such files or subdirectories <code>P</code> will be deleted. This is because Unison sees the rename as a delete and
a separate create: it deletes the old directory (including the ignored files) and creates a new one (not
including the ignored files, since they are completely invisible to it).
</p></li>

<li><p>
It could be very <i>DANGEROUS</i> to use Unison with removable media such as USB drives
unless you are careful.
</p>

<p>
If you synchronize a directory that is stored on removable media when the media is not present, it will look to Unison as though
the whole directory has been deleted, and it will proceed to delete the directory from the other replica!
</p></li>

<li>Archives are created based on names of roots (and other informations), meaning that renaming roots
results Unison think it never sync these before. For example, assume you have run Unison to sync
<code>work</code> and <code>mirror</code> before, and you rename <code>mirror</code> to <code>backup</code> then change some files in
<code>backup</code>. Now, running <code>unison</code> work backup will create new archives and ask you to resolve conflicts.
In this case, you may find the option <code>-prefer backup</code> be useful, which effectively choose files
in <code>backup</code> to resolve possible conflicts.</li>

<li>If you want to run Unison continuously as a crontab task, then you have to ensure the same
script will not be called unless its previous call has finished. Otherwise there will be two
running Unison instance caring about same targets and interfere each other. For example,
it could be that a sync of big files takes more than 10 minutes, which would create problems
if you have set every 10 minutes a new sync would be started.</li>

<li>The graphical user interface is single-threaded. This means that if Unison is performing some long-
running operation, the display will not be repainted until it finishes. We recommend not trying to do
anything with the user interface while Unison is in the middle of detecting changes or propagating files.</li>
</ol>
</div>
</div>

<div id="outline-container-org4bc05c3" class="outline-2">
<h2 id="org4bc05c3">Going Further</h2>
<div class="outline-text-2" id="text-org4bc05c3">
<p>
The official manual is <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">here</a> and the FAQ is <a href="https://alliance.seas.upenn.edu/~bcpierce/wiki/index.php">here</a>.
</p>

<p>
Besides the basic concepts mentioned in this blog, you may also want to look at the
following sections in the official manual:
</p>

<ul class="org-ul">
<li>Section 6.1 Running Unison</li>
<li>Section 6.2 The <code>.unison</code> Directory</li>
<li>Section 6.4 Preferences</li>
<li>Section 6.5 Profiles</li>
<li>Section 6.6 Sample Profiles</li>
<li>Section 6.7 Keeping Backups</li>
<li>Section 6.8 Merging Conflicting Versions</li>
<li>Section 6.12 Path Specification</li>
<li>Section 6.13 Ignoring Paths</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/basics.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/basics.html</guid>
  <pubDate>Sat, 06 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Examples of Banach Spaces]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org79a12d3">Prerequisite Concepts</a></li>
<li><a href="#orga15a0dd">Definition</a></li>
<li><a href="#org00a12c1">Main Results</a></li>
<li><a href="#orgb90be52">Examples</a></li>
</ul>
</div>
</nav>
<p>
This note gives some common examples of Banach spaces as well as some
counterexamples.
</p>

<p>
Readers may refer to <i>Chapter 7: Complete Metric Space and Functional
Space</i> in the book <i>Munkres, J. Topology Second Edition</i> for more
details.
</p>

<div id="outline-container-org79a12d3" class="outline-2">
<h2 id="org79a12d3">Prerequisite Concepts</h2>
<div class="outline-text-2" id="text-org79a12d3">
<ul class="org-ul">
<li>normed linear space</li>
<li>complete metric space</li>
<li>the metric induced by a norm</li>
<li>continuity</li>
</ul>
</div>
</div>

<div id="outline-container-orga15a0dd" class="outline-2">
<h2 id="orga15a0dd">Definition</h2>
<div class="outline-text-2" id="text-orga15a0dd">
<p>
A complete normed linear space is called a <b>Banach space</b>.
</p>

<p>
Some common used functional spaces are listed below.
</p>

<ol class="org-ol">
<li>\(Y^X\): the set of all functions from \(X\) to \(Y\).</li>
<li>\(\mathcal{B}(X;Y)\): the set of all bounded functions from \(X\) to \(Y\).</li>
<li>\(\mathcal{C}(X;Y)\): the set of all continuous functions from \(X\) to
\(Y\).</li>
</ol>

<p>
Given a metric space \((Y,d)\), the <b>sup metric</b> on
\(\mathcal{B}(X;Y)\) corresponding to \(d\) is defined by
\[
\rho(f,g):=\sup_{x\in X}d(f(x),g(x)).
\]
</p>

<p>
The <b>standard bounded metric</b> \(\bar{d}\) derived from \(d\) is defined by
\[
\bar{d}(x,y):=\min(d(x,y),1).
\]
</p>

<p>
Given a metric space \((Y,d)\), the <b>uniform metric</b> on \(Y^X\)
corresponding to \(d\) is defined by
\[
\bar{\rho}(f,g):=\sup_{x\in X}\bar{d}(f(x),g(x)).
\]
Clearly, the relation between uniform metric and sup metric is
\[
\bar{\rho}(f,g) = \min(\rho(f,g),1).
\]
</p>

<p>
Given a normed linear space \((Y,\|\cdot\|)\), the <b>sup norm</b> on \(Y^X\)
corresponding to \(\|\cdot\|\) is defined by
\[
\|f\|_\infty:=\sup_{x\in X}\|f(x)\|.
\]
</p>
</div>
</div>

<div id="outline-container-org00a12c1" class="outline-2">
<h2 id="org00a12c1">Main Results</h2>
<div class="outline-text-2" id="text-org00a12c1">
<p>
<b>Lemma 1.</b> If \((Y,d)\) is complete, then \((Y^X,\bar{\rho})\) is also
complete.
</p>

<p>
<b>Lemma 2.</b> Let \(X\) be a topological space and \((Y,d)\) be a metric space
(not necessarily complete), then \(\mathcal{B}(X;Y)\) and
\(\mathcal{C}(X;Y)\) are both closed sets in \((Y^X,\bar{\rho})\).
</p>

<p>
<b>Theorem 3.</b> Let Let \(X\) be a topological space and \((Y,d)\) be a
<i>complete</i> metric space, then \(\mathcal{B}(X;Y)\) and \(\mathcal{C}(X;Y)\)
are both complete in the uniform metric.
</p>
</div>
</div>

<div id="outline-container-orgb90be52" class="outline-2">
<h2 id="orgb90be52">Examples</h2>
<div class="outline-text-2" id="text-orgb90be52">
<p>
<b>Example.</b> \((\mathcal{C}[a,b],\|\cdot\|_\infty)\) is a Banach
space.
</p>

<p>
<b>Example.</b> \((\mathcal{B}[a,b],\|\cdot\|_\infty)\) is a Banach space.
</p>

<p>
<b>Example.</b> \((\ell_\infty,\|\cdot\|_\infty)\)
is a Banach space, where
\[
\ell_\infty := \{\mathbf{x}\in\mathbb{R}^\mathbb{N}\mid
\|\mathbf{x}\|_\infty < \infty\}.
\]
</p>

<p>
<b>Example.</b> \((\mathcal{C}^1[a,b],\|\cdot\|_\infty)\) is not complete,
because \(\mathcal{C}^1[a,b]\) is not closed in \((Y^X,\bar{\rho})\).
Consider \(f_n(x):=\sqrt{x^2+\frac{1}{n}}\). It is easy to check that
\(f_n\) converges to \(|x|\).
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-10-23-BanachSpaceExample/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-10-23-BanachSpaceExample/notes.html</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Compactness]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb1327ff">Prerequisite Concepts</a></li>
<li><a href="#orge937615">Definitions</a></li>
<li><a href="#org963470b">Main Results</a></li>
<li><a href="#orgd4394c2">Detailed Proofs</a></li>
</ul>
</div>
</nav>
<p>
This note is a review of Chapter IV.8 of the book
<i>An introduction to set theory and topology</i>
by Freiwald.
</p>

<div id="outline-container-orgb1327ff" class="outline-2">
<h2 id="orgb1327ff">Prerequisite Concepts</h2>
<div class="outline-text-2" id="text-orgb1327ff">
<ul class="org-ul">
<li>topological space and its subspace</li>
<li>T1 topological space and T2 topological space</li>
<li>Lindelöf topological space</li>
<li>sequence convergence in a topological space</li>
<li>continuity of functions between topological spaces</li>
<li>first countability of topological spaces</li>
<li>pseudometric space and metric space</li>
<li>separable metric space</li>
</ul>
</div>
</div>

<div id="outline-container-orge937615" class="outline-2">
<h2 id="orge937615">Definitions</h2>
<div class="outline-text-2" id="text-orge937615">
<p>
Two equivalent definition of a <b>compact</b> topological space \((X,\mathcal{T})\):
</p>

<ol class="org-ol">
<li>Any open cover of \(X\) has a finite open subcover<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.</li>
<li>Any family of closed sets \(\mathcal{F}\) with <i>Finite Intersection Property</i>
has \(\bigcap\mathcal{F}\neq\emptyset\)<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>.</li>
</ol>

<p>
A subset \(K\) in \((X,\mathcal{T})\) is called a <b>compact subset</b>
if the subspace \((K, \mathcal{T}_K)\) is compact<sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup>.
</p>

<p>
Three more different notions of <i>compactness</i>.
</p>

<dl class="org-dl">
<dt>sequentially compact</dt><dd>every sequence has a convergent subsequence</dd>
<dt>countably compact</dt><dd>every countable open cover of \(X\) has a finite subcover</dd>
<dt>pseudocompact</dt><dd>every continuous function \(f:X\to\mathbb{R}\) is bounded.</dd>
</dl>

<p>
In addition, if \(X\) is a pseudometric space, there is another important property.
</p>

<dl class="org-dl">
<dt>totally bounded</dt><dd>for each \(\epsilon > 0\), \(X\) can be covered by
a finite number of \(\epsilon\)-balls.</dd>
</dl>
</div>
</div>

<div id="outline-container-org963470b" class="outline-2">
<h2 id="org963470b">Main Results</h2>
<div class="outline-text-2" id="text-org963470b">
<p>
Let \((X, \mathcal{T})\) be a topological space.
</p>

<p>
<b>Theorem 8.5.</b> <a id="org9ff266f"></a> <i>Let \(K \subset X\).</i>
</p>

<p>
<i>1. \(K\) is closed \(\Longrightarrow\) \(K\) is compact, if \(X\) is compact.</i>
</p>

<p>
<i>2. \(K\) is compact \(\Longrightarrow\) \(K\) is closed, if \(X\) is Hausdorff.</i>
</p>

<p>
<b>Theorem 8.11.</b> <a id="org83b3360"></a> <i>The following implications hold generally.</i>
\[ X\text{ is (sequentially) compact }\Rightarrow X\text{ is countably compact }
\Rightarrow X\text{ is pseudocompact}.\]
</p>

<p>
<b>Lemma 8.12.</b> <a id="orgbe75744"></a> \(X\) is countably compact \(\Longrightarrow\) \(X\) is sequentially compact,
if \(X\) is first countable.
</p>

<p>
<b>Lemma 8.16.</b> <a id="org2eb4465"></a> A totally bounded pseudometric space is separable, and thus Lindelöf.
</p>

<p>
<b>Theorem 8.17.</b> <a id="orgdb4504f"></a> In a pseudometric space \((X,d)\),
the property of compactness, sequentially compactness, countably compactness
and pseudocompactness are all equivalent.
</p>
</div>
</div>

<div id="outline-container-orgd4394c2" class="outline-2">
<h2 id="orgd4394c2">Detailed Proofs</h2>
<div class="outline-text-2" id="text-orgd4394c2">
<p>
<i>Proof to <a href="#org9ff266f">Theorem 8.5</a>.</i>
Assume \(K\) is closed and \(X\) is compact, then any open cover
of \(K\) would form an open cover of \(X\) if augmented by \(K^\mathsf{c}\).
This implies that a finite subcover of \(K\) exists.
</p>

<p>
Assume \(K\) is compact and \(X\) is Hausdorff. Pick any \(p\in
K^\mathsf{c}\).  For any \(q \in K\), there exists a neighborhood \(V_q\)
of \(q\) and a neighborhood \(W_q\) of \(p\) such that \(V_q \cap W_q =
\emptyset\). By the compactness of \(K\), there exists finite many \(q_i\)
such that \(\bigcup_{i=1}^n V_{q_i}\supset K\).  This implies that
\(\bigcap_{i=1}^n W_{q_i}\subset K^\mathsf{c}\) is a neighborhood of
\(p\). Hence, \(p\) is an interior point of \(K^\mathsf{c}\).
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#org83b3360">Theorem 8.11</a>.</i>
</p>

<p>
Compact \(\Rightarrow\) countably compact. Obviously.
</p>

<p>
Sequentially compact \(\Rightarrow\) countably compact.
If not, there exists a countable open cover
\((V_i)_{i=0}^\infty\)
of \(X\) which has no finite subcover.
Let \(x_k\in\bigl(\bigcup_{i=0}^k V_i\bigr)^\mathsf{c}\).
Clearly, the sequence \((x_k)\) has no convergent subsequence.
This contradicts with the hypothesis.
</p>

<p>
Countably compact \(\Rightarrow\) pseudocompact.
For any real-valued continuous function \(f:X\to\mathbb{R}\),
\((f^{-1}(-n,n))_{n=1}^{\infty}\) is a countable open cover of \(X\),
and thus has a finite subcover. WLOG, assume the finite subcover
is \((f^{-1}(-n,n))_{n=1}^{M}\). Clearly, \(f\) is bounded by \(M\).
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#orgbe75744">Lemma 8.12</a>.</i>
First, we prove that \(X\) <span class="underline">is countably compact if and only if every sequence
has a cluster point</span>. The <i>if</i> part has been proved in Theorem 8.11. To prove
the <i>only if</i> part, assume \(X\) be countably compact and \((x_n)\) is a sequence
with no cluster point. Let \(T_n\) be the tail set of \((x_n)\):
\[T_n:=\{x_k\mid k\geq n\}.\]
Let \(\overline{T}_n\) be the closure of \(T_n\). Since \(X\) is countably compact,
the countable family of closed sets \(\{\overline{T}_n \mid n\in\mathbb{N}\}\)
must have
\[\bigcap_{n=0}^\infty\overline{T}_n\neq\emptyset.\]
Pick \(x\in \bigcap_{n=0}^\infty\overline{T}_n\).
For any \(n\), there is \(x\in \overline{T}_n\).
Hence, for any neighborhood \(N_x\) of \(x\), there is \(N_x\cap T_n\neq\emptyset\).
Recalling the definition of \(T_n\), we conclude that \(x\) is a cluster point
of \((x_n)\). However, this contradicts with the hypothesis that \((x_n)\) has
no cluster point. We finish the <i>only if</i> part.
</p>

<p>
Then we prove this lemma.
Let \(X\) be countably compact and first countable.
For any sequence \((x_n)\), it has a cluster point \(x\).
There must exist a subsequence of \((x_n)\) which converges to \(x\).
</p>

<ul class="org-ul">
<li>Let \((B_k)\) be a countable shrinking neighborhood base at \(x\).
Since \((x_n)\) is frequently in \(B_1\), we can pick \(n_1\) so that \(x_{n_1}\in B_1\).
Since \((x_n)\) is frequently in \(B_2\), we can pick \(n_2 > n_1\) so that \(x_{n_2}\in B_2\).
Continue inductively: having chosen \(n_1 < n_2 < \cdots < n_k\) so that
\(x_{n_k}\in U_k \subset U_{k-1} \subset \cdots U_1\), we can then choose \(n_{k+1} > n_k\)
so that \(x_{n_{k+1}}\in U_{k+1}\subset U_k\). Clearly, \((x_{n_k})_{k=1}^\infty\) converges
to \(x\).</li>
</ul>

<p>
In conclusion, if \(X\) is countably compact, then every sequence has a cluster point.
Since \(X\) is first countable, we conclude that every sequence has a convergent
subsequence.
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#org2eb4465">Lemma 8.16</a>.</i>
Let \((X,d)\) be a totally bounded pseudometric space.
</p>

<p>
First, we prove that <span class="underline">a totally bounded pseudometric space is
separable</span>. For each \(n\in\mathbb{N}\), there exists finite many points
\(x^{(n)}_1,x^{(n)}_2,\ldots x^{(n)}_{k_n}\) such that \(X\) can be
covered by \(\frac{1}{n}\)-balls centered at these points.  We claim
that \[ E:=\bigcup_{n=1}^\infty \{x^{(n)}_i\mid 1\leq i\leq k_n\} \]
is a dense subset of \(X\).
</p>

<ul class="org-ul">
<li>For any \(x\in X\) and arbitrary small \(\epsilon > 0\),
we can find \(x^{(n)}_i\in E\) such that \(d( x^{(n)}_i, x ) < \epsilon\).
This is done by choosing \(n > \frac{1}{\epsilon}\) and \(i=1\).</li>
</ul>

<p>
Then, we prove that <span class="underline">a separable pseudometric space is second countable</span>.
Let \(D=\{x_k\mid x\in\mathbb{N}\}\) be a dense subset of \(X\).
We claim that
\[
\mathcal{O} := \bigcup_{k=1}^\infty \{B_{\frac{1}{n}}(x_k)\mid n\in\mathbb{N}\}
\]
is a countable topological base.
</p>

<ul class="org-ul">
<li>For any \(x\in V\in\mathcal{T}_d\), there exists some \(\epsilon > 0\)
such that \(B_\epsilon(x)\subset V\). As \(D\) is dense in \(X\), there is
\(x_k\in D\) such that \(d(x_k, x) < \frac{\epsilon}{2}\). Choose \(n\)
such that \(\frac{1}{n} < \frac{\epsilon}{2}\), we have
\(B_{\frac{1}{n}}(x_k)\subset B_\epsilon(x)\subset V\).</li>
</ul>

<p>
Finally, we prove that <span class="underline">a second countable pseudometric space is Lindelöf</span>.
Let \(\mathcal{B}\) be a countable base of \(\mathcal{T}\), and let \(\mathcal{U}\)
be an arbitrary open cover of \(X\). For any \(x\in X\),
there exists \(U_x\in\mathcal{U}\) such that \(x\in U_x\).
Since \(\mathcal{B}\) is a base, for each \(x\), there exists a \(B_x\in\mathcal{B}\)
such that \(x\in B_x\subset U_x\). Therefore,
\[
\mathcal{V}:=\bigcup_{x\in X}B_x
\]
forms an open cover of \(X\). However, \(\mathcal{V}\subset\mathcal{B}\) must be
countable. Hence, \(\mathcal{V}\) can be represented as
\[
\mathcal{V}:=\bigcup_{i=1}^\infty B_{x_i}.
\]
We conclude that \(\bigcup_{i=1}^\infty U_{x_i}\) is a countable subcover.
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#orgdb4504f">Theorem 8.17</a>.</i>
Based on Theorem 8.11, we need only to prove the following implications.
</p>

<dl class="org-dl">
<dt>Countably compactness implies sequentially compactness</dt><dd>As any pseudometric space is first countable,
then countably compactness implies sequentially compactness by
Lemma 8.12.</dd>
<dt>Countably compactness implies compactness</dt><dd><p>
By Lemma 8.16, any totally bounded pseudometric space is Lindelöf.
Hence, it is sufficient to prove that a countably pseudometric space
is totally bounded.
</p>

<p>
If a countably compact pseudometric space is not totally bounded,
then there exists \(\epsilon > 0\) such that \(X\) cannot be covered
by finite many \(\epsilon\)-balls. Obviously, \(X\) is nonempty.
Pick \(x_1 \in X\). As \(\{B_\epsilon(x_1)\}\) cannot cover \(X\),
we can pick \(x_2\in X\) such that \(d(x_2,x_1) \geq \epsilon\).
Again, as \(\{B_\epsilon(x_1), B_\epsilon(x_2)\}\) cannot cover \(X\),
we can pick \(x_3\in X\) such that \(d(x_3,x_1) \geq \epsilon\)
and \(d(x_3,x_2)\geq \epsilon\). Continue inductively,
we may construct a sequence \((x_n)\) such that \(d(x_i,x_j) \geq \epsilon\)
for each \(i\neq j\). Clearly, this sequence has no convergent subsequence.
However, since we have proved that
<i>countably compactness implies sequentially compactness</i>, \((x_n)\) must have a
convergent subsequence, leading to a contradiction.
</p></dd>
<dt>Pseudocompactness implies countably compactness</dt><dd>Assume \(X\) is pseudocompact but is not countably compact.
As \(X\) is not countably compact, there exists a sequence \((x_n)\) with
no cluster point.

<ul class="org-ul">
<li>STEP I. Ensure \(d(x_n,x_m) > 0\) for all \(n\neq m\). If not, we may
pick a subsequence \((x_{a_k})\) such that \(d(x_{a_n},x_{a_m}) > 0\)
for all \(n\neq m\).

<ul class="org-ul">
<li>The subsequence is constructed by observing
the following fact: /for any \(n\), the set \[ E_n:= \{m > n \mid
      d(x_m,x_n) =0\} \] must be finite. Otherwise, there would be
convergent subsequence, and contradicts with the assumption that
\((x_n)\) has no cluster point.</li>
</ul></li>

<li>STEP II. Construct a sequence of open sets \((U_n)_{n=1}^\infty\)
such that 1) \(x_n\in U_n\); 2) \(U_i\cap U_j=\emptyset\) if \(i\neq
    j\); 3) \(\mathrm{diam}\,U_n\to 0\).

<ul class="org-ul">
<li>For any \(x_m\), there exists an open ball \(B_{\delta_m}(x_m)\)
containing only finte many \(x_n\)'s (since \(x_m\) is not a cluster
point of \((x_n)\)). Because \(d(x_n,x_m) > 0\) for all \(n\neq m\),
the \(\delta_m\) may be shrunk such that \(B_{\delta_m}(x_m)\)
contains no other \(x_n\)'s except \(x_m\). In other words,
\[
      d(x_m, x_n) \geq \delta_m,\qquad\forall n\neq m.
      \]
Let \(\epsilon_m=\min(\delta_m/3, \frac{1}{m})\). Then we claim
that \(U_n=B_{\epsilon_n}(x_n)\) forms the desired sequence of
open sets. Clearly, \(x_n\in U_n\) and
\(\operatorname{diam}U_n\to0\). To see that \(U_n\cap
      U_m=\emptyset\) if \(n\neq m\), we need only to note that
\(\epsilon_n + \epsilon_m \leq \delta_n/3 + \delta_m/3 <
      d(x_n,x_m)\).</li>
</ul></li>

<li>STEP III. Show \(f_n(x)=n\frac{d(x_n,U_n^\mathsf{c})}{d(x_n,U_n^\mathsf{c})}\)
and \(f=\sum_{n=1}^\infty f_n\) are well defined.

<ul class="org-ul">
<li>As \(x_n\not\in U_n^\mathsf{c}\) and \(U_n^\mathsf{c}\) is closed,
the distance \(d(x_n,U_n^\mathsf{c}\) cannot be 0. Moreover,
\(d(x,U_n^\mathsf{c}\neq 0\) if and only \(x\in U_n\). Hence,
for any \(x\), there exists at most one \(f_n\) such that
\(f_n(x)\neq 0\). Therefore, \(f=\sum_n f_n\) is finite at any
\(x\).</li>
</ul></li>

<li>STEP IV. Prove that \(f\) is an unbounded continuous function.

<ul class="org-ul">
<li><p>
Since \(f(x_n)=f_n(x_n)=n\), we have \(f\) is unbounded. To prove
\(f\) is continuous, we first note that \(f_n\) is continuous.
</p>

<ul class="org-ul">
<li>If \(d\) is a metric on \(X\) and \(E\) is a subset of \(X\), then
for any \(x,y\in X\), there is
\[
        d(x,E) \leq d(y,E) + d(x,y).
        \]
Therefore, \(d(\cdot,E)\) must be continuous.
(If \(d(x_n,x)\to0\), then \(|d(x_n,E)-d(x,E)|\leq d(x_n,x)\to0\).)</li>
</ul>

<p>
Then we prove that for any \(a\in X\), there exists a open set
\(V_a\) such that \(f|_{V_a}=\sum_{n=1}^Nf_n\) for some \(N\).
</p>

<ul class="org-ul">
<li>If \(d(a,x_n)=0\) for some \(n\), then \(V_a\) can be set to \(U_n\) and
\(N=n\).</li>

<li>Suppose \(d(a,x_n)>0\) for all \(n\). Since \(a\) is not a cluster
point of \(x_n\), there exists an open ball \(B_\delta(a)\)
containing no \(x_n\). In other words,
\[
        d(a,x_n) \geq \delta,\qquad\forall n.
        \]
Let \(V_a=B_{\delta/2}(a)\). Then for any \(x\in V_a\),
\[
        d(x,x_n) \geq d(a,x_n) - d(a,x) \geq \delta/2,\qquad\forall n.
        \]
Recalling that \(\operatorname{diam}U_n\to0\),
there must exist \(N\) such that for all \(n\geq N\),
\(\operatorname{diam}U_n < \delta/2\).
Therefore, for any \(x\in V_a\), we have \(x\not\in U_n\) for all
\(n\geq N\). In otherwords, \(f_n(x)=0\) for all \(n\geq N\) if
\(x\in V_a\).</li>
</ul>

<p>
Therefore, \(f\) is continous at any point \(a\).
</p></li>
</ul></li>
</ul></dd>
</dl>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
An open cover of \(X\) is a family of open sets \(\mathcal{O}\)
such that \(\bigcup\mathcal{O} \supset X\).
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
A family \(\mathcal{F}\) of sets with finite intersection property
if every finite subfamily of \(\mathcal{F}\) has nonempty intersection.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Compactness is a property of topological spaces.
It is different from the definition of closed sets.
We can say a topological space is compact,
but it make no sense to say a topological space is closed.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-09-19-Compactness/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-09-19-Compactness/notes.html</guid>
  <pubDate>Tue, 19 Sep 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Optimality Conditions in Convex Optimization]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0d2f20f">Lagrangian and KKT Points</a></li>
<li><a href="#orga782b09">Dual Problem</a></li>
</ul>
</div>
</nav>
<p>
Consider the following constrained optimization problem
\[\begin{aligned}
\min_{x\in\mathbb{R}^n}\quad & f(x) \\
\mathrm{s.t.}\quad & c_i(x) = 0,\qquad i\in\mathcal{E},\\
&c_i(x) \geq 0,\qquad i\in\mathcal{I}.
\end{aligned}\]
Here, \(f\) is a convex function, and
\(\{c_i \mid i\in\mathcal{E}\cup\mathcal{I}\}\) are linear functions. This
problem encompasses linear programming and quadratic programming, and
represents a special case of general convex optimization problems.
Therefore, it serves as an good starting point for learning about
optimization methods.
</p>

<p>
Let us start by some notations and terminologies.
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Concept</th>
<th scope="col" class="org-left">Notation</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Feasible set</td>
<td class="org-left">\(\Omega\)</td>
<td class="org-left">the set of \(x\) satisfying all constraints</td>
</tr>

<tr>
<td class="org-left">Minimizer</td>
<td class="org-left">\(x^\ast\)</td>
<td class="org-left">the smallest feasible point in its neighbors</td>
</tr>

<tr>
<td class="org-left">Mimimum</td>
<td class="org-left">\(f^\ast\)</td>
<td class="org-left">\(f(x^\ast)\)</td>
</tr>
</tbody>
</table>

<p>
Below is a very basic property of minimizers.
</p>

<p>
<i>Minimizer is stable.</i> If \(x^\ast\) is a minimizer of the considered
optimization problem, then
\[ \langle \nabla f(x^\ast), x-x^\ast \rangle \geq 0, \qquad \forall x \in\Omega.\]
</p>

<p>
In general, if \(f\) is convex, then for any two points \(x_1\) and \(x_2\),
there is
\[ f(x_2) \geq f(x_1) + \langle \nabla f(x_1), x_2 - x_1\rangle. \]
Therefore, for the considered problem any stable point is also a
minimizer.
</p>

<div id="outline-container-org0d2f20f" class="outline-2">
<h2 id="org0d2f20f">Lagrangian and KKT Points</h2>
<div class="outline-text-2" id="text-org0d2f20f">
<p>
The <i>Lagrangian</i> of the considered problem is defined by
\[ L(x, u, v) := f(x) - u^\intercal \mathbf{g}(x) - v^\intercal \mathbf{h}(x),
\qquad x\in\mathbb{R}^n, u\in\mathbb{R}_+^{|\mathcal{I}|}, v\in\mathbb{R}^{|\mathcal{E}|},\]
where \(\mathbf{g}(x)\geq 0\) is the collection of inequality constraints
and \(\mathbf{h}(x)=0\) is the collection of equality constraints. It is
important to note that by writting \(L(x,u,v)\) the multiplier \(u\)
associated with inequality constraints is required to be nonnegative.
</p>

<p>
A KKT point \((x^\ast, u^\ast, v^\ast)\) is a point in the domain of
Lagrangian \(L\) which satsifies the following set of conditions (known as
KKT conditions) \[\begin{cases}
\nabla_{x}L(x^\ast, u^\ast, v^\ast) = 0, \\
\nabla_{u}L(x^\ast, u^\ast, v^\ast) \leq 0, \\
\nabla_{v}L(x^\ast, u^\ast, v^\ast) = 0, \\
\langle \nabla_{u}L(x^\ast, u^\ast, v^\ast), u^\ast\rangle = 0.
\end{cases}\] The last equality is known as the <i>Complementary
slackness</i> condition. In addition, \(u^\ast\geq 0\) is included implicitly
by writting \(L(x^\ast,u^\ast,v^\ast)\).
</p>

<p>
For the considered problem. KKT conditions are necessary.
</p>

<p>
<b>KKT conditions are necessary.</b> <i>If \(x^\ast\) is a minimizer of the
considered problem, then there exists
\(u^\ast\in\mathbb{R}_+^{|\mathcal{I}|}\) and
\(v^\ast\in\mathbb{R}^{|\mathcal{E}|}\) such that
\((x^\ast, u^\ast, v^\ast)\) is a KKT point.</i>
</p>

<blockquote>
<p>
The proof, which utilizes Farkas' lemma, is omitted.
</p>
</blockquote>

<p>
It turns out that KKT conditions are also sufficient to ensure
optimality. To see this, we need to introduce a useful concept <i>saddle
points of Lagrangian</i>.
</p>

<p>
<i>A saddle point of Lagrangian</i> is a point \((x^\ast, u^\ast, v^\ast)\)
which satisfying that
\[ L(x^\ast, u, v) \leq L(x^\ast, u^\ast, v^\ast) \leq L(x, u^\ast, v^\ast),\qquad\forall x, u, v.\]
It is implicit in this definition that \(u^\ast\geq0\) and \(u\geq0\), since
this requirement follows from writing out \(L(x^\ast, u^\ast, v^\ast)\)
and \(L(x^\ast, u, v)\). This convention will be assumed throughout,
unless otherwise specified.
</p>

<p>
The saddle point condition is the most restrictive condition for a
convex optimization problem.
</p>

<p>
<i>Any saddle point is a KKT point, and moreover, any saddle point is a
global minimizer.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> Suppose \((x^\ast,u^\ast,v^\ast)\) is a saddle point. Fix
\(u^\ast,v^\ast\), \(L(\cdot,u^\ast,v^\ast)\) has a minimizer \(x^\ast\).
Therefore \[ \nabla_xL(x^\ast,u^\ast,v^\ast) = 0.\] Fix
\(x^\ast,u^\ast\), \(L(x^\ast,u^\ast,\cdot)\) has a maximizer \(v^\ast\).
Therefore \[ \nabla_vL(x^\ast,u^\ast,v^\ast) = 0.\] Fix
\(x^\ast,v^\ast\), \(L(x^\ast, u, v^\ast)\) has a maxmizer \(u^\ast\) on
\(\mathbb{R}_+^{|\mathcal{I}|}\). Therefore
\[ \langle \nabla_uL(x^\ast,u^\ast,v^\ast), u-u^\ast\rangle \leq 0,\qquad\forall u\geq 0.\]
By choosing \(u=u^\ast+\epsilon_i\), where \(\epsilon_i\) is a unit vector
with only one nonzero component,
\[ \nabla_uL(x^\ast,u^\ast,v^\ast) \leq 0.\] Moreover, by choosing
\(u=0\) and \(u=2u^\ast\), it is clear that
\[ \langle \nabla_uL(x^\ast,u^\ast,v^\ast), u^\ast\rangle = 0.\] This
concludes that \((x^\ast,u^\ast,v^\ast)\) is a KKT point.
</p>

<p>
As \((x^\ast,u^\ast,v^\ast)\) satisfies the KKT conditions, it holds
that \[\mathbf{g}(x^\ast)\geq0,\qquad\mathbf{h}(x^\ast)=0.\] This
implies that \(x^\ast\in\Omega\). In addition, KKT conditions imply that
\[(u^\ast)^\intercal \mathbf{g}(x^\ast) = 0,\qquad (v^\ast)^\intercal \mathbf{h}(x^\ast) = 0.\]
For any \(x\in\Omega\), there is
\[(u^\ast)^\intercal \mathbf{g}(x) \geq 0, \qquad (v^\ast)^\intercal \mathbf{h}(x) = 0.\]
Hence,
\[ f(x) \geq L(x, u^\ast, v^\ast) \geq L(x^\ast, u^\ast, v^\ast) = f(x^\ast),\]
where the second inequality uses the fact that
\((x^\ast,u^\ast,v^\ast)\) is a saddle point. This concludes that
\((x^\ast,u^\ast,v^\ast)\) is a global minimizer.
</p>

<p>
Q.E.D.
</p>
</blockquote>

<p>
Finally, we can prove the sufficiency of KKT conditions by showing that
for the considered problem any KKT point is a saddle point.
</p>

<p>
<b>KKT conditions are sufficient.</b> <i>For the considered problem, if
\((x^\ast, u^\ast, v^\ast)\) is a KKT point, then it is also a saddle
point of Lagrangian. Consequently, it is a global minimizer.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> On one hand, \((u^\ast, v^\ast)\) is a maximizer of
\(L(x^\ast, \cdot, \cdot)\) on
\(\mathbb{R}^{|\mathcal{I}|}_+\times\mathbb{R}^{|\mathcal{E}|}\) because
\(\mathbf{g}(x^\ast)\geq 0\) and \(\mathbf{h}(x^\ast)=0\).
</p>

<p>
On the otherhand, \(x^\ast\) is a minimizer of
\(L(\cdot, u^\ast, v^\ast)\) on \(\mathbb{R}^n\) because it is convex and
there is \(\nabla_xL(x^\ast, u^\ast, v^\ast)=0\).
</p>

<p>
Q.E.D.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orga782b09" class="outline-2">
<h2 id="orga782b09">Dual Problem</h2>
<div class="outline-text-2" id="text-orga782b09">
<p>
Recall the definition of Lagrangian
\[ L(x, u, v) := f(x) - u^\intercal \mathbf{g}(x) - v^\intercal \mathbf{h}(x),
\qquad x\in\mathbb{R}^n, u\in\mathbb{R}_+^{|\mathcal{I}|}, v\in\mathbb{R}^{|\mathcal{E}|}.\]
It is not hard to show that
\[ \max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} L(x, u, v) =
\begin{cases}
\infty, \qquad \mathrm{if}\ x\not\in\Omega,\\
f(x),\qquad\mathrm{if}\ x\in\Omega.
\end{cases}\] Hence, the original optimization problem (referred to as
the <i>primal problem</i> below) can be rewritten as
\[ \min_{x\in\mathbb{R}^n}\max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} L(x, u, v).\]
The <i>Dual problem</i> is then defined by
\[ \max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} \min_{x\in\mathbb{R}^n} L(x, u, v).\]
</p>

<p>
Dual problem has the following properties:
</p>

<ul class="org-ul">
<li>the objective function \(\min_{x}L(x,u,v)\) is concave, regardless of
the convexity of \(f, \mathbf{g}\) and \(\mathbf{h}\).</li>
<li>the optimal objective value is not greater than the optimal value of
the primal problem.</li>
</ul>

<p>
The first property is expected because \(u\) and \(v\) appear linear in \(L\),
and the \(\min\) operator does not break the concavity. The second
property, also known as the <i>weak duality</i>, is a direct consequence of
the following general proposition.
</p>

<p>
<b>Min Max is greater or equal to Max Min</b>. <i>For any function
\(f: X\times Y \to \mathbb{R}\), the following inequality holds trivially</i>
\[ \min_{x\in X}\max_{y\in Y} f(x, y) \geq \max_{y\in Y}\min_{x\in X} f(x, y).\]
</p>

<p>
The <i>duality gap</i> is then defined as the difference between the optimal
values between the primal and dual problems. We have seen that this gap
is always nonnegative. If the duality gap is zero, then we say that
<i>strong duality</i> holds.
</p>

<p>
<b>Strong duality holds if constraints are linear.</b> <i>For the considered
problem, where \(f\) is convex and constraints are linear, the strong
duality holds if any minimizer of the primal problem exists.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> Assume \(x^\ast\) is a minimizer of the primal problem. Due to
the necessity of KKT conditions, there exists \(u^\ast\) and \(v^\ast\)
such that \((x^\ast, u^\ast, v^\ast)\) forms a KKT point. In addition,
we have proved that, for the considered problem, any KKT point is also
a saddle point of Lagrangian. Hence, \[ \begin{aligned}
  f(x^\ast) &= \min_{x}\max_{u\geq0, v} L(x, u, v)& \qquad&  \\
  &\geq \max_{u\geq 0, v}\min_{x}L(x, u, v) & \qquad&\textsf{(weaker duality)} \\
  &\geq \min_{x}L(x, u^\ast, v^\ast)&\qquad& \\
  &= L(x^\ast, u^\ast, v^\ast) &\qquad&\textsf{(saddle point)} \\
  &= f(x^\ast)&\qquad &\textsf{(KKT point)}.
  \end{aligned} \]
</p>

<p>
Q.E.D.
</p>
</blockquote>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-30-OptimalityandKKTCondition/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-30-OptimalityandKKTCondition/notes.html</guid>
  <pubDate>Sun, 30 Apr 2023 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
