<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Dou Meishi's Blog]]></title>
<description><![CDATA[Dou Meishi's Blog]]></description>
<link>https://dou-meishi.github.io/org-blog/</link>
<lastBuildDate>Fri, 09 Feb 2024 18:58:00 +0800</lastBuildDate>
<item>
  <title><![CDATA[How I create backups]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org478b2bc">Different focus of syncing and backing up</a></li>
<li><a href="#org7191ebb">Presync</a></li>
<li><a href="#org9045173">Backup</a></li>
</ul>
</div>
</nav>
<p>
In <a href="https://dou-meishi.github.io/org-blog/2023-09-16-UltimateFileManagement/events-oriented-file-storage-framework">the previous post</a>, I discussed the how I organize the folder
<code>~/Documents/</code>. In my home directory <code>~/</code>, there are another two folders
with special purposes: <code>~/Assets/</code> and <code>~/AAA/</code>.
</p>

<p>
Generally speaking, <code>AAA/</code> severs as a trash bin; <code>Assets/</code> severs as a
repo for large files; <code>Documents/</code> severs as the main workspace,
containing all event folders; see <a href="https://dou-meishi.github.io/org-blog/2023-09-16-UltimateFileManagement/events-oriented-file-storage-framework">this post</a> for what is an event
folder.  During backups, <code>AAA/</code> is ignored, and only <code>Assets/</code> and
<code>Documents/</code> are considered.
</p>

<p>
In general, if any folder or file outside these three folders is of
interest, they should have a local backup in <code>Assets/</code> or <code>Documents/</code>,
maintaining by a special script <code>dms-presync</code>. This script should be
executed before the actual backup process begins.
</p>

<div id="outline-container-org478b2bc" class="outline-2">
<h2 id="org478b2bc">Different focus of syncing and backing up</h2>
<div class="outline-text-2" id="text-org478b2bc">
<p>
First, I would like to give some difference between syncing and
backing up based on personal experiences.
</p>

<p>
In synchronization, it is generally advised to treat folder as the
smallest unit and avoid excluding some files or subfolders within the
folder. Doing so ensures a seamless experience in switching machines
to work on the same folder. When a folder is integrated into the
synchronization framework, one should expect to have an identical
experience across different machines.
</p>

<p>
On the other hand, backup procedures differ. In the context of backup,
the primary goal is to prevent any data loss, rather than emphasizing
a seamless experience when switching between machines. Consequently,
certain unnecessary files could and should be ignored.
</p>
</div>
</div>

<div id="outline-container-org7191ebb" class="outline-2">
<h2 id="org7191ebb">Presync</h2>
<div class="outline-text-2" id="text-org7191ebb">
<p>
The purpose of this stage is to ensure that it is sufficient to
consider only the two folders <code>Assets/</code> and <code>Documents/</code> in creating
backups.
</p>

<ol class="org-ol">
<li>Normalize event folders in <code>Documents/</code>.</li>

<li><p>
Ensure all files of interest have an up-to-date version in <code>Assets/</code> or <code>Documents/</code>.
</p>

<p>
Some folders involved in this stage include, e.g., <code>~/.local/share/fonts/</code>,
<code>~/org/</code> and <code>~/.themes/</code>.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org9045173" class="outline-2">
<h2 id="org9045173">Backup</h2>
<div class="outline-text-2" id="text-org9045173">
<p>
The actual backup process can be generally split into two steps:
backup <code>.git/</code> folders and backup other folders.
</p>

<p>
For each git repos, I manually back them up to the special upstream
<code>backup</code>, which could be a remote repo in some cloud server or a local
repo in the backup drive.<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>
</p>

<p>
Suppose then I want to backup all necessary files in <code>/home/dou</code> to
<code>/media/dou/BACKUP/dou/</code>, I go through the following steps (in this
stage, all <code>.git/</code> folders are ignored).
</p>

<ol class="org-ol">
<li value="0">Ensure <code>/media/dou/BACKUP/dou/</code> is a git repo.</li>

<li>Run <code>unison backup</code> to bakcup <code>~/Assets/</code> and <code>~/Documents/</code>.</li>

<li>Commit in <code>/media/dou/BACKUP/dou/</code>.</li>
</ol>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
The command <code>find . -name ".git"</code> can list all git repos.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-think.html">think</a> </div>]]></description>
  <category><![CDATA[think]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-02-01-TopLevelFolders/how-i-sync-and-backup-files.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-02-01-TopLevelFolders/how-i-sync-and-backup-files.html</guid>
  <pubDate>Sat, 03 Feb 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Event-oriented File Storage Framework]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org27e4ed2">Organize files into events</a>
<ul>
<li><a href="#org1329096">Groupping files into categories is not I want</a></li>
<li><a href="#org09579f7">Tagging every file is not I want</a></li>
<li><a href="#org3f8c44e">Event directory is all I need</a></li>
</ul>
</li>
<li><a href="#orge3c4ce8">Further discussion on the event-oriented approach</a>
<ul>
<li><a href="#org7f6d476">Share assets between events</a></li>
<li><a href="#org2bd43df">Write a descriptive journal for each event</a></li>
<li><a href="#orge6f3230">How to transform a folder to an event folder</a></li>
<li><a href="#org828a94a">Tips</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
Every day, as I create, receive or update a lot of files (like notes,
blogs, papers, books, assets, slides, git repositories, experimental
codes, and various other types), I find myself pondering the
possibility of having a cohesive method to store, access, and back
them up.
</p>

<p>
After years of thinking and trying, I guess it is time to settle down
my framework of <i>storing</i> files. This framework aims to be simple and
clean, and serve as a solid foundation for scripting access and backup
functionalities that meet my specific requirements..
</p>

<div id="outline-container-org27e4ed2" class="outline-2">
<h2 id="org27e4ed2">Organize files into events</h2>
<div class="outline-text-2" id="text-org27e4ed2">
<p>
The central idea of this file storage framework is organizing files
into different <i>events</i>. As I described in <a href="../2023-04-09-ManageFiles/notes.html">this post</a>, an event is simple
a folder with name pattern <code>YYYY-mm-dd-BriefName/</code>.  Almost all my files
are placed in <code>~/Documents/</code> folder, under which I put all my event
folders.
</p>

<pre class="example" id="org3307b7a">
drwxrwxr-x  2 dou dou   4096 Jan 29 10:53 2023-04-09-ManageFiles/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:10 2023-04-30-OptimalityandKKTCondition/
drwxrwxr-x  2 dou dou   4096 Jan 31 00:07 2023-09-16-UltimateFileManagement/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2023-09-19-Compactness/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2023-10-23-BanachSpaceExample/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2024-01-07-ReviewUnison/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2024-01-11-CodeBlockinLaTeX/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2024-01-14-TryOrgPublish/
drwxrwxr-x  2 dou dou   4096 Jan 28 13:02 2024-01-22-TryOrgStaticBlog/
</pre>

<p>
When I review or share my works, event is the smallest unit.
</p>

<p>
Before elaborating on reasons why I choose this <i>event</i>-oriented
approach, let me first discuss two approaches that I tried but gave up
eventually.
</p>
</div>

<div id="outline-container-org1329096" class="outline-3">
<h3 id="org1329096">Groupping files into categories is not I want</h3>
<div class="outline-text-3" id="text-org1329096">
<p>
The first approach I tried is <i>category</i>-oriented. It is not surprised,
since we all have those pre-created folders named <i>Documents</i>, <i>Videos</i>,
<i>Musics</i> etc. To better classifying my files, I created new folders
named <i>References</i>, <i>Slides</i>, <i>Codes</i>, <i>Subjects</i>, and later on more specific
folders such as <i>Manuscripts</i>, <i>Notes</i>, <i>Templates</i>, <i>Plugins</i>.
</p>

<p>
Some of those folders work well, like <i>Musics</i>, <i>Books</i> and <i>Plugins</i>.  They
are well defined and I am very confident on whether a new file or
folder should be placed inside them and whether some file or folder I
am looking for will be there. However, some folders quickly become too
deep and their positions overlap with other folders. For example, the
<i>Subjects</i> folder is created with subfolders named <i>Math</i>, <i>Physics</i> and <i>CS</i>,
and each subfolder contains course subsubfolders like
<i>RealAnalysis</i>, <i>Probability</i> and <i>Mechanics</i>.
</p>

<pre class="example" id="org108b7bd">
Subjects/
├── CS/
├── Math/
│   ├── Probability/
│   └── RealAnalysis/
└── Physics/
    └── Mechanics/
</pre>

<p>
Looks like neatly organized, right? But when it comes to practice, it
is a totally different story. Imagine that I attend one lecture of
probability, downloaded professor's slide and the homework. After
several days of self-studying, I probably finished the homework and
wrote a small note on what I had learnt. Now, how do I deal with those
files?
</p>

<p>
If I insist on organizing files according to their categories, the
slide and note should be placed in the top level <i>Slides</i> folder and
<i>Notes</i> folder respectively. It seems that only the homework will be
placed in the <i>Probability</i> folder, which is clearly not a folder meant
for homeworks however.  Moreover, when I move that slide into the
<i>Slides</i> folder, should I follow the original hierarchy like
<code>Slides/Math/Probability/</code>? Should I also move that note into
<code>Notes/Math/Probability/</code>?  What if I also wrote some experimental
code?
</p>

<p>
Manually enforcing that a file should be placed inside a certain
category folder is boring. Doing so also breaks the connection between
a group of files. In this scenario, these files are produced within a
small period of time and have strong connections to each other. In
addition, storing them in different folders is a bad idea for
synchronization. Imagine that I have to switch between different
machines during writing my note and that homework. Comparing with a
single folder, storing in several folders with complex hierarchy
structures is clearly more troublesome.
</p>

<p>
There are also other problems with this category-oriented approach,
like the inefficiency introduced by very deep folder structures, and
unbalanced folder sizes.
</p>

<p>
While I may continue to use folders like <i>Musics</i>, <i>Videos</i> and <i>Books</i>, I
will certainly not continue to create new top level folders and
enforce that any file matching a category should be placed inside the
corresponding top level folder.
</p>
</div>
</div>

<div id="outline-container-org09579f7" class="outline-3">
<h3 id="org09579f7">Tagging every file is not I want</h3>
<div class="outline-text-3" id="text-org09579f7">
<p>
After the failure of category-based approach, I was still looking for
a way to organize my files in a logical structure.  Soon or later, I
realized that one of the crucial drawbacks of the previous approach is
the exclusive nature of categories, i.e., a file must belong to one
category (one top-level folder) or another one, but not both.
</p>

<p>
Indeed, it is quite natural to think a file can only sit in one place
on the disk. However, in terms of the various attributes of a
particular file, we may want to find it in different locations. Take
the example mentioned before of attending a lecture. It would be very
natural to assume the note should appear in both
<code>Notes/Math/Probability/</code> and <code>Subjects/Math/Probability/</code>.  When I am
looking for a slide, I may consult the top-level folder <i>Slides</i>. When I
am looking for all staffs related to a particular subject, I may
consult the top-level folder <i>Subjects</i>.
</p>

<p>
Following this line of thinking, I then realized that the (sub)folder
name acts like tags. A file in <code>Notes/Math/Probability/</code> are expected to
have tags <i>Notes</i>, <i>Math</i> and <i>Probability</i>. In this point of view, the
deep hierarchy structure is actually not important. It is meaningless
to differentiate between folder <code>Notes/Math/Probability/</code> and folder
<code>Math/Probability/Notes/</code>.
</p>

<p>
Then I imagined a tag-based approach of organizing files. A file may
have arbitrary tags, e.g., <code>tagA, tagB, tagC</code>.  For each tag, I create a
top-level folder with the same name. The true location of a file does
not matter. I can put it at anywhere. However, as long as I give a tag
to the file, I will create a symbolic link of this file in the
corresponding tag folder. Then it is not hard to write a small script
which can list all files having a particular collection of tags.
</p>

<p>
Of course, there are other ways of implementing a tag-based file
system. Besides the way of symbolic links, one can also use
</p>

<ol class="org-ol">
<li>hard links;</li>
<li>database, keeping records of file paths and their tags;</li>
<li>special name convention, similar to database, but tags are
embedded in the file name.</li>
</ol>

<p>
Well, this approach sounds very nice theoretically too.  But I never
seriously try it in practice.
</p>

<ol class="org-ol">
<li>It is actually a framework of file access, not file storage.  It
does not answer how to organize files in the disk.  Indeed, all
current file systems are tree/folder based, not tag based.</li>

<li>Too sophisticated to maintain. Links in tag folders, database and
special words in filenames are all too complicated to manipulate.</li>

<li>Tagging every file is tedious, especially since the need to search
by tags doesn't arise frequently.</li>
</ol>

<p>
I want a simple solution to <i>store</i> my files. Assigning tags to files
might be useful for viewing and searching, but does not solve my
problem. For special type of files, like books and notes, I may try to
manage them by tags, but I will not try to put every file in this
framework.
</p>
</div>
</div>

<div id="outline-container-org3f8c44e" class="outline-3">
<h3 id="org3f8c44e">Event directory is all I need</h3>
<div class="outline-text-3" id="text-org3f8c44e">
<p>
In practice, after I abandoned those category folders, I went to the
event-oriented approach to organize files. Actually, I adopted this
approach even before I notice the concept of event directory.  At the
beginning, I simply put all files I need for a particular task in a
separate folder. Then I had so many those folders and I decided to add
a date prefix to sort them antichronologically. That's it. I found
myself so comfortable with this file structure.
</p>

<ol class="org-ol">
<li><i>Self-contained.</i> An event folder contains all files I need to work
on this task. I can work on it without boring myself on other
folders most of the time.  When I switch machines, I need only to
ensure this event folder is synchronized, without wasting time on
syncing unnecessary files.</li>

<li><i>Flexible.</i> I can put anything inside an event folder and organize
them in the way I like. For example, I can put pictures required by
a latex manuscript, a git repo to track some experimental scripts,
some assets collected from the internet, etc. In fact, I just treat
an event folder as the workspace for it and put any necessary files
in it.</li>

<li><i>Flat strcture.</i> All even folders are placed in the same level.  No
intermediate folders like <code>2023/</code> or <code>2024/</code>. Flat structure is more
efficient to browse and work with. Moreover, by prepending date,
all folders are neatly sorted. Events in the same month come to
close by default, both in file explorer and terminal output of <code>ls</code>.
Adding intermediate folders is meaningless.</li>

<li><i>Archive automatically.</i> Thanks to the nature of self-containing,
moving old event folders to other place does not influence my
workflow.  In parctice, most event folders are rarely needed after
a short period of time. Though from time to time I may want to
review what I have done in the past month, I rarely visit an event
folder created years ago. Even when I want to visit, I typically do
not want to change the content. This fact make it very convenient
to archive event folders and backup them. At any time, the number
of event folders I need pay attention to is generally not larger
than 20.</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-orge3c4ce8" class="outline-2">
<h2 id="orge3c4ce8">Further discussion on the event-oriented approach</h2>
<div class="outline-text-2" id="text-orge3c4ce8">
<p>
Now I summarize some properties of an event folder should have.
</p>

<ol class="org-ol">
<li>Its name starts with a date string in the format <code>YYYY-mm-dd-</code> and
ends with the event name.</li>

<li>It should be self-contained and include necessary staffs for
working on.</li>
</ol>

<p>
Below I want to add two more properties:
</p>

<ol class="org-ol">
<li value="3">It should occupied less than 500MB disk space.</li>
<li>All files with base name <code>notes</code> are reserved for storing metadata of
the event. (This rule does not apply to subfolders in the event
directory.)</li>
</ol>
</div>

<div id="outline-container-org7f6d476" class="outline-3">
<h3 id="org7f6d476">Share assets between events</h3>
<div class="outline-text-3" id="text-org7f6d476">
<p>
The second property is crucial but sometimes can be troublesome.  For
example, if an event involves working with a lot of large immutable
assets, like a lot of data files or a lot of pictures, the event
folder might grow too large, say larger than 4GB.  In addition, if
there is another event involves working with the same assets, copying
them to the new folder does not seem to be a good idea.
</p>

<p>
My resolution is creating another top-level folder, say <code>~/Assets/</code>,
which acts like a repo for large files. For example, if an event
involves accessing to the famous MNIST dataset, I can move the dataset
to folder <code>~/Assets/MNIST/</code> and leave a symbolic link in the event
folder. The folder <code>~/Assets/</code> is also a good place to store data
outputs, like model weights of neural networks.
</p>

<p>
The folder <code>~/Assets/</code> is synced across machines.  In order to avoid
name conflict, I often add the same date prefix when allocating new
asset folders.
</p>
</div>
</div>

<div id="outline-container-org2bd43df" class="outline-3">
<h3 id="org2bd43df">Write a descriptive journal for each event</h3>
<div class="outline-text-3" id="text-org2bd43df">
<p>
I always create a <code>notes.org</code> in each event folder, which serves like a
private README and journal for this event whose audience is future
myself.
</p>

<p>
Generally, I add meta data of the event in the front matter,including
<i>TITLE</i> and <i>DATE</i>. In <a href="../2024-01-14-TryOrgPublish/notes.html">this post</a>, I introduced how I use <code>org-publish</code> to
generate a sitemap of all events based on those notes files. In the
near future, I may add the <i>KEYWORDS</i> field for searching. The body may
contain journal of working on the event, links to useful resources and
anything I want to write down. In general, this file can possibly
contain descriptions to
</p>

<ol class="org-ol">
<li>metadata of the event, like tags, title, date and so on;</li>
<li>purpose and state of the event, like in what circumstance I create it and what is going on;</li>
<li>git repos related to the event;</li>
<li>notes/blogs related to the event;</li>
<li>papers/books related to the event;</li>
<li>assets related to the event, like resources, large files and so on;</li>
<li>file/folder structure of the event; represented as org entries, possibly tagged;</li>
</ol>

<p>
Different from the README file of a git repo, <code>notes.org</code> is always
private and never gets public. If I want to publish some content of it
to my blog, I just create a new post, cut and paste from it and leave
a link in the notes which looks like <i>see my post here</i>.
</p>
</div>
</div>

<div id="outline-container-orge6f3230" class="outline-3">
<h3 id="orge6f3230">How to transform a folder to an event folder</h3>
<div class="outline-text-3" id="text-orge6f3230">
<p>
Given an existed folder <code>dirname/</code>, I go through these steps to transform
it into an event folder.
</p>

<ol class="org-ol">
<li>Normalize its name to ensure it matches the format <code>YYYY-mm-dd-EventName</code>.
Here the date may be inferred from the folder content.</li>

<li><p>
Normalize the journal file <code>notes.org</code>. Ensure there are two metadata
entry <code>#+TITLE</code> and <code>#+DATE</code>. The latter is recommended to be
consistent with the folder name, but not strictly required.
</p>

<p>
In addition, check the content of <code>notes.org</code>. Ensure it can remind
me of the purpose of this folder.
</p></li>

<li>Normalize the folder size to be smaller than 500MB.  If not,
reorganize files inside this folder and move large assets to
<code>~/Assets/</code>.</li>
</ol>
</div>
</div>

<div id="outline-container-org828a94a" class="outline-3">
<h3 id="org828a94a">Tips</h3>
<div class="outline-text-3" id="text-org828a94a">
<ol class="org-ol">
<li><p>
This approach may not be suitable to organize context-free assets.
</p>

<p>
However, for me, most assets have context. For example, books on probability theory
are most refered in writing notes of the subject. So these books are placed in the
same event directory as these notes.
</p></li>

<li><p>
Create a new event and refer to the old event, instead of enlarge the old event folder.
</p>

<p>
Remember to briefly conclude what you obtained from the old event.
</p></li>
</ol>
</div>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-think.html">think</a> </div>]]></description>
  <category><![CDATA[think]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-09-16-UltimateFileManagement/events-oriented-file-storage-framework.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-09-16-UltimateFileManagement/events-oriented-file-storage-framework.html</guid>
  <pubDate>Wed, 31 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Org Static Blog: A Simple Static Site Generator]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgafbecae">Go through the manual</a></li>
<li><a href="#org78688c1">Minimal Configuration</a></li>
<li><a href="#org4e41046">Question</a></li>
<li><a href="#org0ae630e">Build My Blog Site</a></li>
<li><a href="#org5f867cc">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
I picked up most of my computer skills from reading posts online, and
it got me thinking about having my own blog where I can share what
I've learned. But I've always been a bit hesitant about learning all
the complicated stuff in web development.  Recently, I came across a
third-party emacs package called <code>org-static-blog</code> while searching for
the built-in functionality <code>org-publish</code>.  After browsing a few blog
sites created with this package, I was impressed by its simplicity and
the ability to blog using org files. It became clear that this package
is exactly what I need at this stage.
</p>

<p>
After a few minites of survey, I observed the following facts.
</p>

<ol class="org-ol">
<li>The source code is simple enough. There is only a single elisp
script with less than 1000 lines.  The code is well-organized, with
customization variables appearing first, followed by commands. It
doesn't involve any complex or cryptic syntax.</li>

<li>The developer maintains this project over 8 years and he continues to use it in his blog site.</li>

<li>There are a few appealing blog sites are created by org static blog,
e.g.,  <a href="https://bastibe.de/about.html">Bastian</a>,  <a href="https://jao.io/blog/about.html">Jose Antonio Ortega Ruiz</a>,  <a href="https://justin.abrah.ms/">Justin Abrahms</a>, <a href="http://alhassy.com/about">Musa Al-hassy</a>&#x2026;</li>
</ol>

<p>
Finally, I decide to give it a try. I hope it can give me a way to
share my thoughts on the internet.
</p>

<div id="outline-container-orgafbecae" class="outline-2">
<h2 id="orgafbecae">Go through the manual</h2>
<div class="outline-text-2" id="text-orgafbecae">
<p>
The <a href="https://github.com/bastibe/org-static-blog/blob/master/README.org">README</a> contains a brief introduction to the usage and a minimal working example.
</p>

<p>
First, let us review the introduction.
</p>

<blockquote>
<p>
Static blog generators are a dime a dozen. This is one more, which focuses on being simple. All files are simple org-mode files in a directory. The only requirement is that every org file must have a <code>#+TITLE</code> and a <code>#+DATE</code>, and optionally, <code>#+FILETAGS</code>, <code>#+DESCRIPTION</code> and <code>#+IMAGE</code>.
</p>
</blockquote>

<p>
After collecting the appropriate org files, publishing them by org
static blog needs only two steps: 1) customizing org static blog
parameters; 2) calling <code>org-static-blog-publish</code> to publish all posts,
or calling <code>org-static-blog-publish-filename</code> to publish only a
particular post.
</p>

<p>
The blog site generated by org static blog consists of six parts.
</p>

<ol class="org-ol">
<li><i>Posts.</i> Every org file in <code>org-static-blog-posts-directory</code> is one blog post.
Each blog post is rendered as its own HTML page.</li>

<li><i>Index.</i> The index page contains the last few blog posts on a single page.
The number of entries on  the index page can be customized
using <code>org-static-blog-index-length</code>.</li>

<li><i>Tags.</i> Each blog post can be tagged, and each tag links to a page
that lists all other posts of the same tag. This feature is only
enabled when <code>org-static-blog-enable-tags</code> is <code>t</code>.</li>

<li><i>Archives.</i> This page lists the publishing dates and headlines of every blog post.</li>

<li><i>RSS Feeds.</i> This is a machine-readable XML file that contains every blog
post. It is not meant to be consumed by humans. Instead RSS readers
can use the RSS feed to aggregate entries from multiple blogs.</li>

<li><i>Drafts.</i> They are rendered like regular blog posts, but are not included
in the index, the archive, or the RSS feed.</li>
</ol>

<p>
Every HTML page in org static blog can be customized in the following aspects.
</p>

<ol class="org-ol">
<li><code>org-static-blog-page-header</code>. This is inserted into the <code>&lt;head&gt;</code> of every page.
Use this to include custom CSS and JavaScript for your blog.</li>

<li><code>org-static-blog-page-preamble</code>. This is inserted just before the
content of every page. This is a good place to put the header or
menus for your blog.</li>

<li><code>org-static-blog-page-postamble</code>. This is inserted after the content
of every generated page: after any blog post page, after the index
page, the tag pages and the archive. This is where you can include
copyright notices.</li>

<li><code>org-static-blog-post-preamble</code> and
<code>org-static-blog-post-postamble</code>. The returned values are prepended
and appended to every blog post. If you want to change the
formatting of dates, titles, or the tag list, overwrite these
functions. In particular the content of
<code>org-static-blog-post-comments</code> is inserted at the end of each blog
post. Use this to add a comment box.</li>
</ol>

<p>
Other features:
</p>

<ol class="org-ol">
<li>Optionally show a preview of the post (instead of the full post) on
the index page setting <code>org-static-blog-use-preview</code> to <code>t</code>. The region
of the post used as a preview is, by default, its first paragraph,
but can be fine-tuned using <code>org-static-blog-preview-start</code> and
<code>org-static-blog-preview-end</code>.</li>

<li><p>
Activate a few convenience key bindings by
</p>

<div class="org-src-container">
<pre class="src src-elisp">(add-to-list 'auto-mode-alist
             (cons (concat
                    org-static-blog-posts-directory <span style="color: #2aa198;">".*\\.org\\'"</span>)
                   'org-static-blog-mode))
</pre>
</div>

<p>
These key bindings are:
</p>

<ol class="org-ol">
<li><code>C-c C-f</code> / <code>C-c C-b</code> to open next/previous post.</li>
<li><code>C-c C-p</code> to open the matching published HTML file of a post.</li>
<li><code>C-c C-n</code> to create a new blog post.</li>
</ol></li>
</ol>
</div>
</div>

<div id="outline-container-org78688c1" class="outline-2">
<h2 id="org78688c1">Minimal Configuration</h2>
<div class="outline-text-2" id="text-org78688c1">
<p>
Following the example in its manual, I try to build a blog site at
<code>./org-blog/</code> with a folder <code>./org-blog/org/</code> containing several org
files.
</p>

<p>
The first step is, of course, installing the package.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(package-install 'org-static-blog)
</pre>
</div>

<p>
The next step is setting up variables. I want to do the following things.
</p>

<ol class="org-ol">
<li>Set the site title to <i>Hello, Org Static Blog</i></li>
<li>Set the url of the site to <code>file:///home/dou/Documents/2024-01-22-TryOrgStaticBlog/org-blog/</code></li>
<li>Set the directory that holds all html files to <code>./org-blog/</code></li>
<li>Set the directory that holds all org files to be published to  <code>./org-blog/org/</code></li>
<li>Set the directory that holds all drafts to  <code>./org-blog/drafts/</code></li>
<li>Set the page header as the content of the file <code>./org-blog/static/header.html</code></li>
<li>Set the page preamble as the content of the file <code>./org-blog/static/preamble.html</code></li>
<li>Set the page postamble as the content of the file <code>./org-blog/static/postamble.html</code></li>
<li>Enable tags</li>
<li>Enable preview</li>
</ol>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">org-static-blog</span>)

(<span style="color: #859900; font-weight: bold;">setq</span> dms/org-static-blog-root-dir <span style="color: #2aa198;">"/home/dou/Documents/2024-01-22-TryOrgStaticBlog/org-blog/"</span>)

(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-title <span style="color: #2aa198;">"Hello, Org Static Blog"</span>)
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-url (format <span style="color: #2aa198;">"file://%s"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-publish-directory (format <span style="color: #2aa198;">"%s"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-posts-directory (format <span style="color: #2aa198;">"%sorg"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-drafts-directory (format <span style="color: #2aa198;">"%sdrafts"</span> dms/org-static-blog-root-dir))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-header (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/header.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-preamble (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/preamble.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-page-postamble (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
  (insert-file-contents (format <span style="color: #2aa198;">"%sstatic/postamble.html"</span> dms/org-static-blog-root-dir))
  (buffer-string)))
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-enable-tags t)
(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-use-preview t)
</pre>
</div>

<p>
Contents of <code>header.html</code>, <code>preamble.html</code> and <code>postamble.html</code> are given as follows.
Assets <code>static/style.css</code> and <code>static/favicon.ico</code> are downloaded from <a href="https://github.com/bastibe/bastibe.github.com/tree/master/static">Bastian</a>.
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">meta</span> <span style="color: #268bd2;">name</span>=<span style="color: #2aa198;">"author"</span> <span style="color: #268bd2;">content</span>=<span style="color: #2aa198;">"Dou Meishi"</span>&gt;
&lt;<span style="color: #268bd2;">meta</span> <span style="color: #268bd2;">name</span>=<span style="color: #2aa198;">"referrer"</span> <span style="color: #268bd2;">content</span>=<span style="color: #2aa198;">"no-referrer"</span>&gt;
&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"static/style.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
&lt;<span style="color: #268bd2;">link</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"static/favicon.ico"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"icon"</span> /&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"header"</span>&gt;
  Hello, Org Static Blog
&lt;/<span style="color: #268bd2;">div</span>&gt;
</pre>
</div>

<div class="org-src-container">
<pre class="src src-html">Created by &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://github.com/bastibe/org-static-blog/"</span>&gt;Org Static Blog&lt;/<span style="color: #268bd2;">a</span>&gt;
</pre>
</div>

<p>
Currently, the project layout looks like
</p>

<pre class="example" id="orga3f5248">
org-blog/
├── drafts
├── org
│   └── notes.org
└── static
    ├── favicon.ico
    ├── header.html
    ├── postamble.html
    ├── preamble.html
    └── style.css

3 directories, 6 files
</pre>

<p>
Finally, call  <code>org-static-blog-publish</code> to generate the site. At this time, the project layout becomes
</p>

<pre class="example" id="org23be5b2">
org-blog/
├── archive.html
├── drafts
├── index.html
├── notes.html
├── org
│   └── notes.org
├── rss.xml
├── static
│   ├── favicon.ico
│   ├── header.html
│   ├── postamble.html
│   ├── preamble.html
│   └── style.css
└── tags.html

3 directories, 11 files
</pre>
</div>
</div>

<div id="outline-container-org4e41046" class="outline-2">
<h2 id="org4e41046">Question</h2>
<div class="outline-text-2" id="text-org4e41046">
<ol class="org-ol">
<li><p>
Does it scans all org files in <code>org-static-blog-posts-directory</code> recursively or not?
</p>

<p>
Yes. For example, a folder named <code>2024/</code> in it will be published to the folder <code>2024/</code> in
<code>org-static-blog-publish-directory</code>.
</p></li>

<li><p>
Does it support following symbolic links when checking org files?
</p>

<p>
Yes but no. I test the following based on the project layout in the <i>Minimal Configuration</i> section.
I renamed the ordinary file <code>notes.org</code> inside <code>org-blog/org/</code> to <code>org-blog/../</code> but leave
a symbolic link. So the project layout becomes.
</p>

<pre class="example" id="org6dbeaf9">
org-blog/
├── drafts
├── org
│   └── notes.org -&gt; /home/dou/Documents/2024-01-22-TryOrgStaticBlog/notes.org
└── static
    ├── favicon.ico
    ├── header.html
    ├── postamble.html
    ├── preamble.html
    └── style.css

3 directories, 6 files
</pre>

<p>
However, calling <code>org-static-blog-pulish</code> exports <code>org-blog/org/notes.org</code> to <code>~/Documents/notes.html</code>.
</p>

<p>
This issue comes function <code>org-static-blog-get-post-public-path</code>. Running either
</p>

<div class="org-src-container">
<pre class="src src-elisp">(org-static-blog-get-post-public-path <span style="color: #2aa198;">"~/Documents/2024-01-22-TryOrgStaticBlog/notes.org"</span>)
</pre>
</div>

<p>
or
</p>

<div class="org-src-container">
<pre class="src src-elisp">(org-static-blog-get-post-public-path <span style="color: #2aa198;">"~/Documents/2024-01-22-TryOrgStaticBlog/org-blog/org/notes.org"</span>)
</pre>
</div>

<p>
gives the result <code>../../notes.html</code>.
</p></li>

<li><p>
What will happen if <code>org-static-blog-publish-directory</code> is the same
as <code>org-static-blog-posts-directory</code>?  In this case, what will happen
if <code>org-static-blog-drafts-directory</code> is a subfolder?
</p>

<p>
It behaves like exporting all org files to the same directory, and posts inside
the drafts directory will not be included in the index.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org0ae630e" class="outline-2">
<h2 id="org0ae630e">Build My Blog Site</h2>
<div class="outline-text-2" id="text-org0ae630e">
<p>
It is also not hard to extend the minimal configuration to build a
real blog site.  But before tweaking these scripts and assets, I need,
of course, get a public URL for hosting the site. Fortunately, GitHub
Pages allows hosting directly from a GitHub repository. What I need to
do is create a publich repo, say <code>org-blog</code>, and go to <code>Settings -&gt; Pages</code>
and set the deploy target to <code>https://dou-meishi.github.io/blog/</code>.  Now
I can replace the previous local URL to this one in the script and
assets.
</p>

<p>
Besides changing the publish URL, there are a few other things to make
the site a slightly more visual appealing.
</p>

<ol class="org-ol">
<li><p>
Add a top bar at each page, showing links to the homepage and the archive page.
</p>

<p>
This can be easily done by modifying the <code>preamble.html</code>
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"header"</span>&gt;
  &lt;<span style="color: #268bd2;">div</span> <span style="color: #268bd2;">class</span>=<span style="color: #2aa198;">"sitelinks"</span>&gt;
    &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/index.html"</span>&gt;Home&lt;/<span style="color: #268bd2;">a</span>&gt;
    |
    &lt;<span style="color: #268bd2;">a</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/archive.html"</span>&gt;All Posts&lt;/<span style="color: #268bd2;">a</span>&gt;
  &lt;/<span style="color: #268bd2;">div</span>&gt;
&lt;/<span style="color: #268bd2;">div</span>&gt;
</pre>
</div></li>

<li><p>
Render math formulae. This can also be achieved by adding appropriate javascript
and stylesheets. Currently, I use <a href="https://katex.org/docs/browser">KaTeX</a>, which seems to be faster than MathJax.
</p>

<div class="org-src-container">
<pre class="src src-html"><span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">Math Support by KaTeX</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">link</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">href</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span>&gt;
<span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">The loading of KaTeX is deferred to speed up page rendering</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">script</span> defer <span style="color: #268bd2;">src</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span>&gt;&lt;/<span style="color: #268bd2;">script</span>&gt;
<span style="color: #93a1a1;">&lt;!-- </span><span style="color: #93a1a1;">To automatically render math in text elements, include the auto-render extension:</span><span style="color: #93a1a1;"> --&gt;</span>
&lt;<span style="color: #268bd2;">script</span> defer <span style="color: #268bd2;">src</span>=<span style="color: #2aa198;">"https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"</span> <span style="color: #268bd2;">integrity</span>=<span style="color: #2aa198;">"sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05"</span> <span style="color: #268bd2;">crossorigin</span>=<span style="color: #2aa198;">"anonymous"</span> <span style="color: #268bd2;">onload</span>=<span style="color: #2aa198;">"renderMathInElement(document.body);"</span>&gt;&lt;/<span style="color: #268bd2;">script</span>&gt;
</pre>
</div></li>

<li><p>
Customize the top of the index page. This is done by setting the
<code>org-static-blog-index-front-matter</code> variable in the lisp script.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-index-front-matter
      <span style="color: #2aa198;">"&lt;h1 class=title&gt; Recent Posts &lt;/h1&gt;"</span>)
</pre>
</div></li>

<li><p>
Change the default ellipsis <code>(...)</code> used in preview to  <code>...</code>
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">setq</span> org-static-blog-preview-ellipsis <span style="color: #2aa198;">"..."</span>)
</pre>
</div></li>

<li><p>
Use a different CSS stylesheet. I have been using <a href="http://gongzhitaao.org/orgcss">this stylesheet</a>
for three years and always appreciating its clean design. It is
designed for HTML exported from org files by <code>org-publish</code>. To adapt
it to files exported by <code>org-static-blog</code>, I add several additional
rules in <a href="https://dou-meishi.github.io/org-blog/static/dou-org-blog.css">a patched CSS</a>.
</p>

<div class="org-src-container">
<pre class="src src-html">&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"https://gongzhitaao.org/orgcss/org.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
&lt;<span style="color: #268bd2;">link</span> href= <span style="color: #2aa198;">"https://dou-meishi.github.io/org-blog/static/dou-org-blog.css"</span> <span style="color: #268bd2;">rel</span>=<span style="color: #2aa198;">"stylesheet"</span> <span style="color: #268bd2;">type</span>=<span style="color: #2aa198;">"text/css"</span> /&gt;
</pre>
</div></li>

<li><p>
Sync posts from my document folder. As I mentioned in <a href="../2024-01-14-TryOrgPublish/notes.html">the previous post</a>, my notes resides in different event directories
in the document folder, and, of course, I do not want to share the whole <code>~/Documents/</code> folder.
So I list all files I want to share in <code>~/.unison/syncpost.prf</code>, which looks like
</p>

<div class="org-src-container">
<pre class="src src-text">source default.prf

root = /home/dou/Documents
root = /home/dou/Documents/2024-01-24-MyOrgBlog/

nodeletion = /home/dou/Documents

path = 2023-09-19-Compactness/notes.org
path = 2023-10-23-BanachSpaceExample/notes.org
path = 2024-01-07-ReviewUnison/basics.org
path = 2024-01-07-ReviewUnison/advanced.org
path = 2024-01-11-CodeBlockinLaTeX/notes.org
path = 2024-01-11-CodeBlockinLaTeX/simple-code.png
path = 2024-01-11-CodeBlockinLaTeX/tcolorbox-listings.png
path = 2024-01-14-TryOrgPublish/notes.org
path = 2024-01-22-TryOrgStaticBlog/notes.org
</pre>
</div>

<p>
Whenever I want to post something, I just check this file, run <code>unison-gui syncpost</code>,
and execute all lisp script in the <code>build-blog.el</code>.
</p></li>
</ol>

<p>
The lisp script and static assets are all included in <a href="https://github.com/Dou-Meishi/org-blog">my git repo</a> for this blog.
</p>
</div>
</div>

<div id="outline-container-org5f867cc" class="outline-2">
<h2 id="org5f867cc">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-org5f867cc">
<p>
Below are other users' configuration on org static blog.
</p>

<ol class="org-ol">
<li>a simple setup: <a href="https://jao.io/blog/simplicity.html">simplicity - programming (and other) musings</a></li>
<li>another simple setup <a href="https://justin.abrah.ms/dotfiles/emacs.html#orgc787b23">Justin's emacs configuration - Writting - Blogging</a></li>
<li>an extensive setup: <a href="http://alhassy.com/AlBasmala#Why-not-use-an-existing-blogging-platform">AlBasmala: Blogging with Emacs &amp; Org-mode (•̀ᴗ•́)و</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-22-TryOrgStaticBlog/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-22-TryOrgStaticBlog/notes.html</guid>
  <pubDate>Mon, 22 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Review org-publish Utility]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org98e45c0">Go through the manual</a></li>
<li><a href="#org1a7a3e3">Practice</a></li>
<li><a href="#org8f592d2">Questions</a></li>
<li><a href="#orgf796ee0">Further consideration</a></li>
<li><a href="#org7b524b2">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
Recently, I finally decided to create my personal blog site. I
researched a few tools and then I suddenly remembered the <code>org-publish</code>
function in Emacs. Although I have been using Emacs and Org mode for
three years, I never wrote a script in elisp. But since my interest in
Emacs is continuously growing, I think it's a good time to play around
with it. It is also a good practice for me to understand the source code
of <a href="https://github.com/bastibe/org-static-blog/tree/master">Org Static Blog</a>, which is the actual blogging tool I want to use.
</p>

<div id="outline-container-org98e45c0" class="outline-2">
<h2 id="org98e45c0">Go through the manual</h2>
<div class="outline-text-2" id="text-org98e45c0">
<p>
According to <a href="https://orgmode.org/manual/Publishing.html">the manual</a>, publishing in org-mode is configured almost
entirely through setting the value of one variable, called
<code>org-publish-project-alist</code>. Each element of the list configures one
project, and may be in one of the two following forms:
</p>

<ol class="org-ol">
<li><code>("project-name" :property value :property value ...)</code></li>
<li><code>("project-name" :components ("project-name" "project-name" ...))</code></li>
</ol>

<p>
After properly configuring the variable, calling <code>org-publish</code> will prompt for a project name
and publish all files that belong to it. Calling <code>org-publish-all</code> will publish all projects.
</p>

<p>
Publishing means that a file is copied to the destination directory and possibly transformed in the process.
The transformation is controlled by the property <code>publishing-function</code>. Typical values include
</p>

<ol class="org-ol">
<li><code>org-html-publish-to-html</code>, which calls the HTML exporter to export org files to HTML files;</li>
<li><code>org-publish-attachment</code>, which does not modify files but simply copy them.</li>
</ol>

<p>
We may also generate a sitemap for a given project by customizing following properties;
see <a href="https://orgmode.org/manual/Site-map.html">Section 14.1.7</a> in the org manual. Interesting properties include:
</p>

<ol class="org-ol">
<li><code>sitemap-format-entry</code>: tell how a published entry is formatted in the sitemap;</li>
<li><code>sitemap-sort-folders</code>: where folders should appear in the sitemap;</li>
<li><code>sitemap-sort-files</code>: how the files are sorted in the sitemap.</li>
</ol>
</div>
</div>

<div id="outline-container-org1a7a3e3" class="outline-2">
<h2 id="org1a7a3e3">Practice</h2>
<div class="outline-text-2" id="text-org1a7a3e3">
<p>
<i>A simple setting:</i> given a folder <code>./content</code> with several org files in it, we want to publish them
into a different folder <code>./public</code>. Assets should be copied too.
</p>

<blockquote>
<p>
It is convenient to put publishing related source in a standalone <code>build.el</code> file.
Visit it in Emacs and call <code>eval-buffer</code> to publish projects defined it.
</p>
</blockquote>

<p>
First, we define our <code>sitemap-format-entry</code> function, which will format an entry into
a timestamp followed by a URL whose description is the title of the entry.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-sitemap-format-entry</span> (entry style project)
  <span style="color: #2aa198;">"Format ENTRY in org-publish PROJECT Sitemap as [date] [[file][title]]."</span>
  (<span style="color: #859900; font-weight: bold;">let</span> ((filetitle (org-publish-find-title entry project)))
    (<span style="color: #859900; font-weight: bold;">if</span> (= (length filetitle) 0)
        (format <span style="color: #2aa198;">"*%s*"</span> entry)
      (format <span style="color: #2aa198;">"[%s] [[file:%s][%s]]"</span>
              (format-time-string <span style="color: #2aa198;">"%Y-%m-%d"</span>
                                  (org-publish-find-date entry project))
              entry
              filetitle))))
</pre>
</div>

<p>
Then, we set <code>org-publish-project-alist</code>. We create two projects, one for exporting org files
and other one for copying assets. Both projects recursively search files based on a particular REGEXP on
file extension. In addition, we require to generate a sitemap and format entries by our
<code>dms/org-sitemap-format-entry</code> function. In addition, entries  are sorted by date
and organized as a plain list, instead of nested list containing subfolders.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Define the publishing project</span>
(<span style="color: #859900; font-weight: bold;">setq</span> org-publish-project-alist
      (list
       (list <span style="color: #2aa198;">"try-org-publish-org"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"./content"</span>
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"org"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"./public"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #657b83; font-weight: bold;">:recursive</span> t
             <span style="color: #657b83; font-weight: bold;">:auto-sitemap</span> t
             <span style="color: #657b83; font-weight: bold;">:sitemap-title</span> <span style="color: #2aa198;">"Doumeishi's Mainpage"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-format-entry</span> 'dms/org-sitemap-format-entry
             <span style="color: #657b83; font-weight: bold;">:sitemap-sort-files</span> 'anti-chronologically
             <span style="color: #657b83; font-weight: bold;">:sitemap-style</span> 'list
             )
       (list <span style="color: #2aa198;">"try-org-publish-assets"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> <span style="color: #2aa198;">"./content"</span>
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"css</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">js</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">png</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">jpg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">gif</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">pdf</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">mp3</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">ogg</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">swf</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">mov"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> <span style="color: #2aa198;">"./public"</span>
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-publish-attachment
             <span style="color: #657b83; font-weight: bold;">:recursive</span> t
             )
       )
)
</pre>
</div>

<p>
Finally, we publish all projects.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Generate the site output</span>
(org-publish-all t)

(message <span style="color: #2aa198;">"Publish complete!"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-org8f592d2" class="outline-2">
<h2 id="org8f592d2">Questions</h2>
<div class="outline-text-2" id="text-org8f592d2">
<ol class="org-ol">
<li><p>
Can I customize the way of Emacs searching for intended org files rather than
a base dir + extension?
</p>

<p>
Yes, we can first exclude all files by setting the base extension to <code>"dummy"</code> and then use <code>:include</code>
to include a list of files we want to publish.
</p></li>

<li><p>
Aware of privacy, can I customize the exporting scheme to exclude publishing particular files?
</p>

<p>
Yes, we can set the <code>exclude</code> property. Or we can set the <code>:exclude-tags</code> property.
</p></li>

<li><p>
Can I adjust publication settings for particular subfolders?
</p>

<p>
Yes, we can exclude the subfolder from existing projects, then create a new project for it
and apply different rules for this subfolder.
</p></li>

<li><p>
How the <i>last modified</i> time is set? I want it to be set by the mtime of org files.
</p>

<p>
I am not sure about this. With some test I found that if I run the script in Emacs
then everything work as expected. But if I run the script in terminal by
<code>emacs -Q --script</code> then every exported file will update the modification time
to the current time.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-orgf796ee0" class="outline-2">
<h2 id="orgf796ee0">Further consideration</h2>
<div class="outline-text-2" id="text-orgf796ee0">
<p>
<i>A slightly complicated setting:</i> my document folder consists of event directories and looks like
</p>

<pre class="example" id="orge336f51">
.
├── 2023-09-03-CustomizePrompt/
├── 2023-11-18-ContentManagementSystem/
├── 2024-01-03-ReviewPham/
├── 2024-01-07-ReviewUnison/
├── 2024-01-11-CodeBlockinLaTeX/
</pre>

<p>
In each event directory, there is an org file <code>notes.org</code> which contains my notes on this event.
I want to generate a sitemap for my document folder (or some folder with the same
strcture) such that I can review what I have done in browser. In particular, I want to
publish only those event notes, i.e., no other org files are exported during the creation of
my sitemap. Moreover, I want to publish those notes in-place, i.e., the generated html should
be placed in the its event directory.
</p>

<p>
In order to do this, we can first define two variables. One is the root directory to be considered,
and is set to <code>~/Document</code>. The other one is a textual file, in which every line specifies a event
name that should not be published.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">dms/org-publish-event-root-dir</span> <span style="color: #2aa198;">"~/Documents"</span>
  <span style="color: #2aa198;">"The directory contains a list of event directories."</span>)

(<span style="color: #859900; font-weight: bold;">defcustom</span> <span style="color: #268bd2;">dms/org-publish-nopublish-events-fp</span> <span style="color: #2aa198;">"~/org/nopublish-events.txt"</span>
  <span style="color: #2aa198;">"The file path whose content is a list of event names</span>
<span style="color: #2aa198;">which should not be considered when do publishing.</span>
<span style="color: #2aa198;">This file should be a textual file and each line corresponds to</span>
<span style="color: #2aa198;">an event name."</span>)
</pre>
</div>

<p>
Then we define a function to generate the list of event notes to be published.
In this function I first filtered the event directory under the root folder with
the content of that nopublish file, then I concat the filename <code>notes.org</code>
for each event and check the existence of such file.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-publish-get-event-notes</span> ()
  <span style="color: #2aa198;">"Return a list of event notes to be published according to the value</span>
<span style="color: #2aa198;">of dms/org-publish-event-root-dir and dms/org-publish-nopublish-events-fp.</span>

<span style="color: #2aa198;">An event is a directory whose name has the format YYYY-MM-DD-EventName.</span>
<span style="color: #2aa198;">A event note is the file named notes.org under the event directory."</span>
  (<span style="color: #859900; font-weight: bold;">let*</span> ((events (directory-files dms/org-publish-event-root-dir nil
                    <span style="color: #2aa198;">"^[0-9]\\{</span><span style="color: #268bd2;">4\\</span><span style="color: #2aa198;">}-[0-9]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}-[0-9]\\{</span><span style="color: #268bd2;">2\\</span><span style="color: #2aa198;">}-.+"</span>))
         (nopublish-event-alist
          (<span style="color: #859900; font-weight: bold;">if</span> dms/org-publish-nopublish-events-fp
              (<span style="color: #859900; font-weight: bold;">with-temp-buffer</span>
                (insert-file-contents dms/org-publish-nopublish-events-fp)
                (split-string (buffer-string) <span style="color: #2aa198;">"\n"</span> t))))
         (filtered-events (seq-difference events nopublish-event-alist))
         (event-notes-to-publish
          (mapcar (<span style="color: #859900; font-weight: bold;">lambda</span> (event) (concat
                                   (file-name-as-directory event)
                                   <span style="color: #2aa198;">"notes.org"</span>)) <span style="color: #cb4b16; font-weight: bold;">filtered-events)))</span>
    (seq-filter (<span style="color: #859900; font-weight: bold;">lambda</span> (event-note)
                  (file-exists-p (concat (file-name-as-directory
                                          dms/org-publish-event-root-dir)
                                         event-note)))
                event-notes-to-publish)))
</pre>
</div>

<p>
After that we define the way to format the event note in the sitemap, i.e.,
formatting as <code>=date= [[path][title]]</code>.
</p>

<div class="org-src-container">
<pre class="src src-elisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">dms/org-sitemap-format-event-note-entry</span> (entry style project)
  <span style="color: #2aa198;">"Format an event note ENTRY in org-publish PROJECT Sitemap as</span>
<span style="color: #2aa198;">=date= [[file][title]]."</span>
  (<span style="color: #859900; font-weight: bold;">let</span> ((filetitle (org-publish-find-title entry project)))
    (<span style="color: #859900; font-weight: bold;">if</span> (= (length filetitle) 0)
        (format <span style="color: #2aa198;">"*%s*"</span> entry)
      (format <span style="color: #2aa198;">"=%s= [[file:%s][%s]]"</span>
              (format-time-string <span style="color: #2aa198;">"%Y-%m-%d"</span>
                                  (org-publish-find-date entry project))
              entry
              filetitle))))
</pre>
</div>

<p>
Finally, we set up the project alist variable and publish. By the way, we can always check the returned value
of <code>dms/org-publish-get-event-notes</code> to see the list of files to be published.
</p>

<div class="org-src-container">
<pre class="src src-elisp"><span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Define the publishing project</span>
(<span style="color: #859900; font-weight: bold;">setq</span> org-publish-project-alist
      (list
       (list <span style="color: #2aa198;">"event-notes"</span>
             <span style="color: #657b83; font-weight: bold;">:base-directory</span> dms/org-publish-event-root-dir
             <span style="color: #657b83; font-weight: bold;">:base-extension</span> <span style="color: #2aa198;">"dummy"</span>
             <span style="color: #657b83; font-weight: bold;">:include</span> (dms/org-publish-get-event-notes)
             <span style="color: #657b83; font-weight: bold;">:publishing-directory</span> dms/org-publish-event-root-dir
             <span style="color: #657b83; font-weight: bold;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #657b83; font-weight: bold;">:recursive</span> nil
             <span style="color: #657b83; font-weight: bold;">:auto-sitemap</span> t
             <span style="color: #657b83; font-weight: bold;">:sitemap-title</span> <span style="color: #2aa198;">"Event Notes"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-filename</span> <span style="color: #2aa198;">"index.org"</span>
             <span style="color: #657b83; font-weight: bold;">:sitemap-format-entry</span> 'dms/org-sitemap-format-event-note-entry
             <span style="color: #657b83; font-weight: bold;">:sitemap-sort-files</span> 'anti-chronologically
             <span style="color: #657b83; font-weight: bold;">:sitemap-style</span> 'list
             )))

<span style="color: #93a1a1;">;; </span><span style="color: #93a1a1;">Generate the site output</span>
(org-publish-all t)

(message <span style="color: #2aa198;">"Publish complete!"</span>)
</pre>
</div>

<p>
We can place this script in our <code>.emacs.d/</code> directory.
Whenever we want to rebuild the index page of the document folder,
simply visit it and run <code>eval-buffer</code>.
</p>
</div>
</div>

<div id="outline-container-org7b524b2" class="outline-2">
<h2 id="org7b524b2">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-org7b524b2">
<ol class="org-ol">
<li><a href="https://orgmode.org/manual/Publishing.html">Publishing - The Org Mode Manual</a></li>
<li><a href="https://taingram.org/blog/org-mode-blog.html">Building a Emacs Org-Mode Blog</a></li>
<li><a href="https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/">Build Your Website with Org Mode - System Crafaters</a></li>
<li><a href="https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html">Publishing Org-mode files to HTML</a></li>
<li><a href="https://remacs.cc/posts/%E9%9D%A2%E5%90%91%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E7%9A%84emacs%E6%95%99%E7%A8%8B17.-%E9%80%9A%E8%BF%87org-mode%E5%86%99%E5%8D%9A%E5%AE%A2/">面向产品经理的Emacs教程：17. 通过Org mode写博客</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-emacs.html">emacs</a> </div>]]></description>
  <category><![CDATA[emacs]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-14-TryOrgPublish/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-14-TryOrgPublish/notes.html</guid>
  <pubDate>Sun, 14 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Insert Code Block in LaTeX]]></title>
  <description><![CDATA[
<p>
The most simple way of inserting code blocks in LaTeX is the built-in
command <code>\verb</code> and environment <code>verbatim</code>.
</p>

<p>
The command <code>\verb</code> can produce inline code. It is better than
<code>\texttt</code> for source code because characters in <code>\verb</code> will be treated
literally. For example, <code>\verb+\textbf{a}+</code> produces <code>\textbf{a}</code>
in monospace font, but <code>\texttt{\textbf{a}}</code> produces a single
character <b><code>a</code></b>, in bold monospace font. Here, the <code>+</code> character after <code>\verb</code>
acts as a delimiter. Any character except letters and <code>*</code> can be used as a delimiter
in <code>\verb</code>. For example, <code>\verb|...|</code> is equivalent to <code>\verb+...+</code>.
</p>

<p>
Similar to <code>\verb</code>, texts enclosed inside the environment <code>verbatim</code> are printed literally.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\documentclass</span>{<span style="color: #657b83; font-weight: bold;">article</span>}
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">document</span>}

The command <span style="color: #859900; font-weight: bold;">\verb</span>|\verb| can produce inline code.

The <span style="color: #859900; font-weight: bold;">\verb</span>+\verb|\textbf{a}|+ produces <span style="color: #859900; font-weight: bold;">\verb</span>|\textbf{a}|,
but <span style="color: #859900; font-weight: bold;">\verb</span>+\texttt{\textbf{a}}+ produces <span style="color: #859900; font-weight: bold;">\texttt</span>{<span style="color: #859900; font-weight: bold;">\textbf</span>{<span style="font-weight: bold;">a</span>}}.

<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">verbatim</span>}
Text enclosed inside verbatim environment
is printed directly
and all \LaTeX{} commands are ignored.

Blank lines           and spaces are preserved.
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">verbatim</span>}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">document</span>}
</pre>
</div>

<p>
The LaTeX code above produces the following output.
</p>


<figure id="orgcc70cd4">
<img src="./simple-code.png" alt="simple-code.png">

</figure>

<p>
Besides the built-in commands, there are various packages providing more features for redering code blocks.
These packages generally are more powerful and can add syntax highlighting, line numbers, background color
and etc. Usual choices include <code>listings</code> package,  <code>minted</code> package
and <code>tcolorbox</code> package. While  <code>listings</code> and  <code>minted</code> are mainly focusing on redering source codes,
<code>tcolorbox</code> is a general package for redering contents in a box.
Actually, <code>tcolorbox</code> internally loads <code>listings</code> or <code>minted</code> packages.
</p>

<div id="outline-container-org44219d9" class="outline-2">
<h2 id="org44219d9">Create Own Code Block Environment with tcolorbox</h2>
<div class="outline-text-2" id="text-org44219d9">
<p>
When <code>tcolorbox</code> is loaded with the option <code>listings</code>, it provides various useful predefined commands
for rendering source blocks by loading <code>listings</code> package automatically. Besides the <code>listings</code> option,
we can also toggle the <code>breakable</code> option to allow a box to span across pages.
</p>

<p>
In the following example, we create two code block envrionments with <code>tcolorbox</code> and <code>listings</code> in preamble.
These two envrionments are basically identical, except that one can read code from external
files and we do no need to copy the code from source files into our latex manuscript.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\documentclass</span>{<span style="color: #657b83; font-weight: bold;">article</span>}

<span style="color: #859900; font-weight: bold;">\usepackage</span>{<span style="color: #657b83; font-weight: bold;">xcolor</span>}
<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">define colors</span>
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codebg}{RGB}{253, 246, 227}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codefg}{RGB}{101, 123, 131}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegreen}{RGB}{133, 153, 0}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegray}{RGB}{147, 161, 161}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codecyan}{RGB}{42, 161, 152}

<span style="color: #859900; font-weight: bold;">\usepackage</span>[listings,breakable,skins]{<span style="color: #657b83; font-weight: bold;">tcolorbox</span>}
<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">declare our code block environment</span>
  <span style="color: #859900; font-weight: bold;">\newtcblisting</span>{tcbcodeblock}[1]{<span style="color: #93a1a1;">%</span>
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }

<span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">like tcbcodeblock, but read code from files</span>
  <span style="color: #859900; font-weight: bold;">\newtcbinputlisting</span>{<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>}[2]{<span style="color: #93a1a1;">%</span>
    listing file={#2},
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>

<p>
In the main document, we can use <code>tcbcodeblock</code> as a normal environment
with one mandatory argument, which specifies the language of source code,
and use <code>tcbinputcodeblock</code> as a normal command with two mandatory arguments,
which specify the language of source code and the name of the source file.
See the table in <a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/listings/listings.pdf">the manual</a> of <code>listings</code> for a complete list of supported languages.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">document</span>}
After declaring our own environment <span style="color: #859900; font-weight: bold;">\verb</span>|tcbcodeblock|.
we can enclose source codes in it and render them in <span style="color: #859900; font-weight: bold;">\LaTeX</span>.

This is a code block of <span style="color: #859900; font-weight: bold;">\TeX</span>.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{TeX}
Hello, <span style="color: #859900; font-weight: bold;">\TeX</span>!
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

This is a code block of Python.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{Python}
# python code
print("Hello, world!")
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

This is a code block of C.
<span style="color: #859900; font-weight: bold;">\begin</span>{<span style="color: #268bd2;">tcbcodeblock</span>}{C}
// C code
#include &lt;stdio.h&gt;
int main() {
   printf("Hello, World!");
   return 0;
}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">tcbcodeblock</span>}

The <span style="color: #859900; font-weight: bold;">\verb</span>|\tcbinputcodeblock| can read codes from a file
and render them in a source block like <span style="color: #859900; font-weight: bold;">\verb</span>|\tcbcodeblock|.
This is the <span style="color: #859900; font-weight: bold;">\LaTeX</span>\ source code of this manuscript.
<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>{[LaTeX]TeX}{./tcolorbox-listings.tex}
<span style="color: #859900; font-weight: bold;">\end</span>{<span style="color: #268bd2;">document</span>}
</pre>
</div>


<figure id="org643c108">
<img src="./tcolorbox-listings.png" alt="tcolorbox-listings.png">

</figure>
</div>
</div>

<div id="outline-container-org26fc407" class="outline-2">
<h2 id="org26fc407">Explanation of the Created Code Environment</h2>
<div class="outline-text-2" id="text-org26fc407">
<p>
First, we load <code>tcolorbox</code> with appropriate options. In addition, we load the <code>xcolor</code> package for color support.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #859900; font-weight: bold;">\usepackage</span>{<span style="color: #657b83; font-weight: bold;">xcolor</span>}
<span style="color: #859900; font-weight: bold;">\usepackage</span>[listings,breakable,skins]{<span style="color: #657b83; font-weight: bold;">tcolorbox</span>}
</pre>
</div>

<p>
Then, we create our own code environment for furture uses.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">define colors</span>
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codebg}{RGB}{253, 246, 227}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codefg}{RGB}{101, 123, 131}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegreen}{RGB}{133, 153, 0}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codegray}{RGB}{147, 161, 161}
  <span style="color: #859900; font-weight: bold;">\definecolor</span>{codecyan}{RGB}{42, 161, 152}
</pre>
</div>

<p>
After that, we create a new envrionment <code>tcbcodeblock</code> with one argument, which is used to specify the code language.
This envrionment can render source code in a box with following features.
</p>

<ol class="org-ol">
<li>Use the <code>enhanced</code> skin.</li>
<li>Box corners are squared.</li>
<li>Box borders are drawn with black lines.</li>
<li>Text color is set to <code>codefg</code>, which is defined previously by RGB(101, 123, 131).</li>
<li>Background color is set to <code>codebg</code>, which is defined previously by RGB(253, 246, 227).</li>
<li>This box can span across multiple pages.</li>
<li>Minimal margin layout with <code>\fbox</code> style.</li>
<li>Show code only (if the source code is latex manuscript, you can remove the <code>listing only</code> option to show
the expected latex output of the latex code enclosed in this envrionment).</li>
<li>Use the predefined style <code>tcblatex</code>. This overwirtes options of the <code>listings</code> package by
options of <code>tcolorbox</code> package. If this line is absent, some of your settings of <code>tcolorbox</code> will not take
effects in this environment.</li>
<li>Set the language of the source code. This is used to identify strings, comments and keywords in the code.</li>
<li>Does not render space as character <code>␣</code>.</li>
<li>Does not render space in strings as character <code>␣</code>.</li>
<li>Text color of comments, keywords and strings are set to  <code>codegray</code>, <code>codegreen</code> and <code>codecyan</code> respectively.</li>
<li>Set text font to monospace and footnote size.</li>
</ol>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">declare our code block environment</span>
  <span style="color: #859900; font-weight: bold;">\newtcblisting</span>{tcbcodeblock}[1]{<span style="color: #93a1a1;">%</span>
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>

<p>
In addition, we provide a command <code>tcbinputcodeblock</code>, which functions like <code>tcbcodeblock</code> but
read code from external files. It accepts two arguments, one is the language and the other one is the
name of the source file.
</p>

<div class="org-src-container">
<pre class="src src-latex"><span style="color: #93a1a1;">% </span><span style="color: #93a1a1;">like tcbcodeblock, but read code from files</span>
  <span style="color: #859900; font-weight: bold;">\newtcbinputlisting</span>{<span style="color: #859900; font-weight: bold;">\tcbinputcodeblock</span>}[2]{<span style="color: #93a1a1;">%</span>
    listing file={#2},
    enhanced,
    sharp corners,
    colframe=black,
    coltext=codefg,
    colback=codebg,
    breakable,
    size=fbox,
    listing only,
    listing options={<span style="color: #93a1a1;">%</span>
      style=tcblatex,
      language={#1},
      showspaces=false,
      showstringspaces=false,
      commentstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegray},
      keywordstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codegreen},
      stringstyle=<span style="color: #859900; font-weight: bold;">\color</span>{codecyan},
      basicstyle=<span style="color: #859900; font-weight: bold;">\ttfamily\footnotesize</span>
    }
  }
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc4fc538" class="outline-2">
<h2 id="orgc4fc538">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-orgc4fc538">
<ol class="org-ol">
<li><a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/tcolorbox/tcolorbox.pdf">the official manual of tcolorbox - CTAN</a></li>
<li><a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/listings/listings.pdf">the official manual of listings - CTAN</a></li>
<li><a href="https://liam.page/2016/07/22/using-the-tcolorbox-package-to-create-a-new-theorem-environment/">LaTeX 黑魔法（一）：tcolorbox 宏包简明教程</a></li>
<li><a href="https://www.overleaf.com/learn/latex/Code_listing">Code listing - Overleaf</a></li>
<li><a href="https://www.overleaf.com/learn/latex/Code_Highlighting_with_minted">Code Highlighting with minted</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-latex.html">latex</a> </div>]]></description>
  <category><![CDATA[latex]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-11-CodeBlockinLaTeX/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-11-CodeBlockinLaTeX/notes.html</guid>
  <pubDate>Thu, 11 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[An Advanced Guide to Unison]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0b3c5f4">Preferences</a></li>
<li><a href="#org0f0b2ed">Setting Preference</a></li>
<li><a href="#org312df37">Profiles</a></li>
<li><a href="#org57a2ef7">Path Specification</a></li>
<li><a href="#org55ef2db">Ignoring</a></li>
<li><a href="#org036ff8d">Backup</a></li>
<li><a href="#org3c99753">Scenario: Synchronize with a USB Drive</a>
<ul>
<li><a href="#org88731ce">Possible Errors</a></li>
<li><a href="#org9edca16">Syncrhonize with FAT/NTFS Filesystems</a></li>
</ul>
</li>
</ul>
</div>
</nav>
<p>
In the previous blog, we introduced basics of <a href="https://github.com/bcpierce00/unison">Unison</a>, the lightweight yet versatile file-synchronization tool for Unix and Windows.
In this blog, we will cover more advanced topics, including <i>profiles</i>, <i>ignoring</i>, <i>backup,</i> etc.
You can also find the complete documentation in <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
</p>

<div id="outline-container-org0b3c5f4" class="outline-2">
<h2 id="org0b3c5f4">Preferences</h2>
<div class="outline-text-2" id="text-org0b3c5f4">
<p>
Many details of Unison’s behavior are configurable by user-settable <i>preferences</i> (or, arguments,
options, in other words). If we type <code>unison -help</code>, then the outputs will look like
</p>

<pre class="example" id="org1225f28">
Usage: unison [options]
    or unison root1 root2 [options]
    or unison profilename [options]

Basic options:

  General:
   -doc xxx            show documentation ('-doc topics' lists topics)
   -version            print version and exit

  What to sync:
   ...

  How to sync:
   ...

  ...
</pre>

<p>
Here, we see that there are three ways to run Unison, and each way accepts <code>[options]</code>,
standing for various options grouped and detailed below the <i>Usage</i> section.
</p>

<p>
The most general way of running Unison is the first one <code>unison [options]</code>.
Indeed, you can set the two directories that you want to synchronize
inside the options. For example,
</p>

<div class="org-src-container">
<pre class="src src-bash">unison work mirror
</pre>
</div>

<p>
is equivalent to
</p>

<div class="org-src-container">
<pre class="src src-bash">unison -root work -root mirror
</pre>
</div>

<p>
Here, the preference <code>root</code> appears twice, standing for the root directories we want to synchronize.
</p>

<p>
The thrid way of running Unison, <code>unison profilename [options]</code>, is a convenient way
to apply a collection of preferences predefined in profile. Of course, the preferences given
after the <code>profilename</code> will override the values defined in the profile if necessary.
</p>

<p>
Unison provides a lot of preferences for customizing its behaviors and it is recommended to
go through these options once by typing <code>unison -help</code>.
</p>
</div>
</div>

<div id="outline-container-org0f0b2ed" class="outline-2">
<h2 id="org0f0b2ed">Setting Preference</h2>
<div class="outline-text-2" id="text-org0f0b2ed">
<p>
There are two ways to set the values of preferences: temporarily, by providing command-line arguments
to a particular run of Unison, or permanently, by adding commands to a profile in the <code>.unison</code> directory on
the client host.
</p>

<p>
In the command line, if we want to set a value of a preference, say <code>p</code>, then we should be careful about its type.
</p>

<ul class="org-ul">
<li>If <code>p</code> is a boolean flag, then adding an argument <code>-p=false</code> will set <code>p</code> to false and adding <code>-p=true</code> (or simply
<code>-p</code>) will set <code>p</code> to true.</li>

<li>If <code>p</code> is a numeric or string preference, then adding an argument <code>-p value</code> is enough.</li>
</ul>

<p>
In the profile, a line in the form <code>p = value</code> works for both boolean flags and non-boolean falgs.
</p>
</div>
</div>

<div id="outline-container-org312df37" class="outline-2">
<h2 id="org312df37">Profiles</h2>
<div class="outline-text-2" id="text-org312df37">
<p>
A <i>profile</i> is a text file that specifies permanent settings for roots, paths, ignore patterns, and other preferences.
Profiles should reside in the <code>.unison</code> directory on the <i>client</i> machine.
The <code>.unison</code> directory is by default set to <code>$HOME/.unison</code> in Unix; see <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>
for more details on its location in other systems and how to change it.
</p>

<p>
If Unison is started  with just one argument <code>name</code> on the command line, it looks for a profile called
<code>name</code> (or <code>name.prf</code>, if not found) in the <code>.unison</code> directory.
 If Unison is started with no arguments, it will behave as <code>name</code> has been set to <code>default</code>,
i.e., looking for a profile called <code>default</code> or <code>default.prf</code>.
</p>

<p>
Inside a profile,
</p>

<ul class="org-ul">
<li>blank lines and lines beginning with <code>#</code> both are ignored;</li>
<li>a line of the form <code>p = value</code> sets the value of preference <code>p</code> to <code>value</code>;</li>
<li>Spaces and tabs before and after <code>p</code> and <code>value</code> are ignored;</li>
<li>Spaces, tabs, and non-printable characters within values are treated literally,
so that e.g. <code>root = /foo bar</code> refers to a directory containing a space;</li>
<li>a line of the form <code>include name</code> causes the file <code>name</code> (or <code>name .prf</code>,
if not found) to be read at the point, and included as if its contents;</li>
<li>a line of the form <code>source name</code> does the same as <code>include name</code> except that it does not
attempt to add a suffix to name;</li>
<li>Similar lines of the form <code>include? name</code> or <code>source? name</code> do the same
as their respective lines without the question mark except that it does not constitute an error to specify a
non-existing file name.</li>
</ul>

<p>
A profile may include a special preference <code>label</code> to provide a description of the options selected in this
profile. Its value is listed along with the profile name in the graphical user interface.
</p>
</div>
</div>

<div id="outline-container-org57a2ef7" class="outline-2">
<h2 id="org57a2ef7">Path Specification</h2>
<div class="outline-text-2" id="text-org57a2ef7">
<p>
Several Unison preferences (e.g., <code>ignore</code>, <code>backup</code>, <code>merge</code>, etc.) specify individual paths or sets of paths.
These preferences can be set to any of the following patterns.
</p>

<ol class="org-ol">
<li><code>Name name</code> matches any path in which the last component matches <code>name</code>.
For example, <code>Name N</code> can match a pathlike <code>mirror/N</code>, even if it is a directory.</li>

<li><code>Path path</code> matches exactly the path <code>path</code>.</li>

<li><code>BelowPath path</code> matches the path <code>path</code> and any path below.</li>
</ol>

<p>
In those forms, the <code>name</code> or <code>path</code> argument can be a glob pattern, which means
<code>*</code>, <code>?</code>, <code>[]</code> and <code>{}</code> have their special meanings.
</p>
</div>
</div>

<div id="outline-container-org55ef2db" class="outline-2">
<h2 id="org55ef2db">Ignoring</h2>
<div class="outline-text-2" id="text-org55ef2db">
<p>
We can instruct Unison to ignore paths by setting the preference <code>ignore</code>. For example, the below line
in a profile tells Unison to ignore the path <code>a/b</code>:
</p>

<pre class="example" id="orgdd6d085">
ignore = Path a/b
</pre>

<p>
Of course, you can set <code>ignore</code> multiple times to ignore as many files as you want.
</p>

<p>
There is also an <code>ignorenot</code> preference, which specifies a set of patterns for paths that should not be
ignored, even if they match an ignore pattern.
</p>

<p>
Here are a few extra points regarding the ignore preference you probably want to know.
</p>

<ol class="org-ol">
<li>If a directory is ignored, then <i>all its descendants</i> will be too.</li>

<li>Be careful about renaming directories containing ignored files. Because Unison understands the rename
as a delete plus a create, any ignored files in the directory will be lost.</li>

<li>The interaction of these two sets of patterns can be a little tricky.
If a path matches an <i>ignore</i> pattern and does not match an
<i>ignorenot</i> pattern, then this whole path <i>including everything below it</i> will be ignored.
For example, if the ignore pattern contains <code>Name data</code> and the ignorenot pattern contains <code>Name *.py</code>,
then Unison still ignores a path like <code>data/a.py</code>.</li>
</ol>
</div>
</div>

<div id="outline-container-org036ff8d" class="outline-2">
<h2 id="org036ff8d">Backup</h2>
<div class="outline-text-2" id="text-org036ff8d">
<p>
When Unison overwrites (or deletes) a file or directory while propagating changes from the other replica,
it can keep the old version around as a backup. Similar to ignoring, you can set the preference <code>backup</code>
to require what kind of files should be backed up. For example,
</p>

<pre class="example" id="orga95de67">
backup = Name *
</pre>

<p>
causes Unison to create backups for <i>all</i> files and directories. You can also set the preference
<code>backupnot</code> for exceptions, just like <code>ignorenot</code> for <code>ignore</code>.
</p>

<p>
The location of backup files are controlled by <code>backuploc</code>, whose value must be either
</p>

<ul class="org-ul">
<li><code>local</code>, meaning that backup files are stored in the same directory as the original;</li>
<li><code>central</code>, which is the default value, meaning that all backup files should be stored in
the directory specified by preference <code>backupdir</code>. The default value of <code>backupdir</code> is
<code>.unison/backup</code>.</li>
</ul>

<p>
We can have finer controls on backup files by setting preferences like
<code>maxbackups</code>, <code>backupprefix</code>, <code>backupsuffix</code> and etc.
</p>

<p>
It is important to note that Unison will backup will only be checked against updated paths,
not their descendants. For example, if you set <code>backup = Name *.txt</code> and then delete a whole directory named
<code>foo</code> containing some text files, these files will not be backed up because Unison will just check that <code>foo</code>
is updated and it does not match <code>*.txt</code>. Similarly, if the directory itself happened to be called <code>foo.txt</code>,
then the whole directory and all the files in it will be backed up, regardless of their names.
</p>
</div>
</div>

<div id="outline-container-org3c99753" class="outline-2">
<h2 id="org3c99753">Scenario: Synchronize with a USB Drive</h2>
<div class="outline-text-2" id="text-org3c99753">
<p>
Assume We want to synchronize our home directory <code>/home/dou</code> with a USB drive,
mounted at <code>/media/dou/KINGSTON</code>.
It is very likely that Unison will raise errors time to time. But don't worry. Those errors are
intended and we explain them below.
</p>
</div>

<div id="outline-container-org88731ce" class="outline-3">
<h3 id="org88731ce">Possible Errors</h3>
<div class="outline-text-3" id="text-org88731ce">
<p>
If our USB drive is empty, the first time we run Unison will simply copying files.
Suppose we have done and reject the USB drive. What will happen if we accidentally
run Unison again, e.g., triggered by a crontab task?
</p>

<p>
The answer is that Unison will try to <i>remove our whole home directory</i>!
As Unison keeps a records of the state of last synchronization,
it sees that <code>/home/dou</code> hasn't changed and <code>/media/dou/KINGSTON</code> is now empty.
So it will try the apply the changes made in the latter to the former,
which results the deletion of a whoe replica.
Fortunately, if <code>confirmbigdel</code> is set to true, which is the default case,
Unison will ask for the confirmation of such deletion.
If Unison is run in batch mode, it will simply abort and exit.
</p>

<p>
If what we want to do is synchronizing <code>/home/dou/Documents</code> with <code>/media/dou/KINGSTON/Documents</code>,
then Unison might throw the <i>No such file or directory</i> error.
This is the case when our USB drive is rejected, the default mount point <code>/media/dou/KINGSTON</code>
is also deleted. As the second root directory
 <code>/media/dou/KINGSTON/Documents</code>  does not exist, Unison will first try to
cd to the parent directory <code>/media/dou/KINGSTON</code>, which does not exist too.
So Unison exits with <i>Fatal Error: Cannot find canonical name of &#x2026;</i>
</p>
</div>
</div>

<div id="outline-container-org9edca16" class="outline-3">
<h3 id="org9edca16">Syncrhonize with FAT/NTFS Filesystems</h3>
<div class="outline-text-3" id="text-org9edca16">
<p>
If Unison is running on a Unix-like machine but told to synchronize
with FAT/NTFS filesystems, the <code>fat</code> preference should be set to true,
which is equivalent to
</p>

<ul class="org-ul">
<li>do not synchronize permissions, <code>perms = 0</code>;</li>
<li>never use chmod, <code>dontchmod = true</code>;</li>
<li>treat filenames as case insensitive, <code>ignorecase = true</code>;</li>
<li>do not attempt to synchronize symbolic links, <code>links = false</code>;</li>
<li>ignore inode number changes when detecting updates, <code>ignoreinodenumbers = true</code>.</li>
</ul>
</div>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/advanced.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/advanced.html</guid>
  <pubDate>Sun, 07 Jan 2024 21:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Beginner's Guide to Unison]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4cc1eed">A Demo</a></li>
<li><a href="#org18b194c">Basic Concepts</a></li>
<li><a href="#org182b82d">Typical Usage</a></li>
<li><a href="#org60c31f2">Caveats and Shortcomings</a></li>
<li><a href="#org4bc05c3">Going Further</a></li>
</ul>
</div>
</nav>
<p>
<a href="https://github.com/bcpierce00/unison">Unison</a> is a file-synchronization tool for Unix and Windows. It allows two replicas of a collection of files and
directories to be stored on different hosts (or different disks on the same host), modified separately, and then
brought up to date by propagating the changes in each replica to the other.
</p>

<p>
<b>Note:</b> This review is a short summary of <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
Please use version 2.52 or newer to avoid version interoperability issues.
</p>

<div id="outline-container-org4cc1eed" class="outline-2">
<h2 id="org4cc1eed">A Demo</h2>
<div class="outline-text-2" id="text-org4cc1eed">
<p>
Unison can be used with either of two user interfaces: a textual interface and a graphical interface.
</p>

<p>
Let's consider a simple scenario and see how to synchronize two directories on a single machine.
</p>

<ol class="org-ol">
<li value="0">install Unison. Basically, we need only two executable binary files, <code>unison</code> and <code>unison-gui</code>,
downloaded from the proper release tarball in <a href="https://github.com/bcpierce00/unison">its github repository</a>.</li>

<li><p>
Set up a <code>work</code> directory and a <code>mirror</code> direcotry for our illustration
</p>

<div class="org-src-container">
<pre class="src src-bash">    mkdir work
    touch work/a work/b
    mkdir work/d
    touch work/d/f
    cp -r work mirror
</pre>
</div></li>

<li>Try synchronizing <code>work</code> and <code>mirror</code>. Since they are identical, synchronizing them won’t propagate
any changes, but Unison will remember the current state of both directories so that it will be able to tell
next time what has changed by typing <code>unison work mirror</code>.

<ul class="org-ul">
<li><i>textual interface:</i> you should see a message notifying you that all the files are actually equal and then get returned to
the command line, and you may also get a warning message for creating <i>archives</i> (the private data structure used by Unison)
as this is the first run of Unison.</li>

<li><i>graphical interface:</i> You should get a big empty window with a message at the bottom notifying you <i>everything is up-to-date</i>.</li>
</ul></li>

<li><p>
Make some changes in <code>work</code> and <code>mirror</code>
</p>

<div class="org-src-container">
<pre class="src src-bash">    rm work/a
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello"</span> &gt; work/b
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello"</span> &gt; mirror/b
    date &gt; mirror/c
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hi there"</span> &gt; work/d/h
    <span style="color: #657b83; font-weight: bold;">echo</span> <span style="color: #2aa198;">"Hello there"</span> &gt; mirror/d/h
</pre>
</div></li>

<li><p>
Try synchronizing <code>work</code> and <code>mirror</code> again by typing <code>unison work mirror</code>.
</p>

<p>
Let us elaborate the behaviors of the textual interface in this case.
</p>

<ol class="org-ol">
<li value="0">Unison will display <i>only</i> the files that are different and ask for actions one by one.
If a file has been changed in the same way and remain identical in both directories,
Unison will simply note the file is up-to-date and nothing will be shown. So we expect three
changes to be decided: the absent file of <code>a</code> in <code>work</code>, the new file <code>c</code> in <code>mirror</code>
and the conflicting changes on <code>d/h</code>.</li>

<li><p>
Unison will notify the creation of <code>c</code> in <code>mirror</code> and prompt a line like
</p>

<pre class="example" id="org298f060">
         &lt;--- new file   c  [f]
</pre>

<p>
We can follow Unison’s recommendation, press <code>f</code> or <code>[ENTER]</code> at the prompt.
Or we can simply ignore this file and leave both replicas alone by pressing <code>/</code>.
Pressing <code>?</code> for a list of possible responses and their meanings.
See also <a href="https://stackoverflow.com/questions/64587602/how-does-one-use-the-matching-condition-commands-for-the-unison-cli">this question</a> for explanation on the key <code>L</code> and matching conditions.
</p></li>

<li><p>
Similarly, Unison will notify the delete of <code>a</code> in work and prompt a line like
</p>

<pre class="example" id="org550d8b9">
deleted  ---&gt;            a  [f]
</pre></li>

<li><p>
For conflicting changes on <code>d/h</code>, Unison will prompt a line like
</p>

<pre class="example" id="orgfab7013">
new file &lt;-?-&gt; new file   d/h  []
</pre></li>

<li><p>
Suppose we skip the file <code>d/h</code> and accept changes on file <code>a</code> and <code>c</code>, Unison
will briefly summarize the actions it is supposed to do and asks for
confirmation
</p>

<pre class="example" id="org2ba5235">
2 items will be synced, 1 skipped
0 B to be synced from work to mirror
32 B to be synced from mirror to work

Proceed with propagating updates? []
</pre></li>

<li>Finally, if we confirm then Unison will apply changes and output logs of the process.</li>
</ol>

<p>
The usage of the graphical interface is similar. The main window shows all the files that have been modified.
To override a default action (or to select an action in the case when there is no default), first select the file
by clicking on its name, then press the desired action key metioned before.
When you are satisfied with the propagation of changes as shown in the main window,
click the <i>Go</i> button to set them in motion.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org18b194c" class="outline-2">
<h2 id="org18b194c">Basic Concepts</h2>
<div class="outline-text-2" id="text-org18b194c">
<p>
Below is a short summary of <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">the official manual</a>.
</p>

<ol class="org-ol">
<li><i>Roots.</i> A replica’s root tells Unison where to find a set of files to be synchronized, either on the local machine or on
a remote host. The pattern of the root is <code>[protocol:]//[user@][host][:port][path]</code>.
When <code>path</code> is given without any protocol prefix, the protocol is assumed to be <code>file</code>.
Other possible protocol arguments include <code>ssh</code> and <code>socket</code>.
If <code>path</code> is a relative path, then it actually specifies a local root relative to the directory where Unison is started.</li>

<li><i>Paths.</i> A <i>path</i> refers to a point within a set of files being synchronized; it is specified relative to the root of the
replica. Formally, a path is just a sequence of names, separated by <code>/</code>.
The empty path (i.e., the empty sequence of names) denotes the whole replica.
Unison displays the empty path as <code>[root]</code>.</li>

<li><i>Descendants.</i>   If <code>p</code> is a path and <code>q</code> is a path beginning with <code>p</code>, then <code>q</code> is said to be a <i>descendant</i> of <code>p</code>.
Thus, each path is also a descendant of itself.</li>

<li><p>
<i>Contents.</i> The <i>contents</i> of a path <code>p</code> in a particular replica could be a file, a directory, a symbolic link, or absent (if p
does not refer to anything at all in that replica). More specifically:
</p>

<ol class="org-ol">
<li>If <code>p</code> refers to an ordinary file, then the contents of p are the actual contents of this file (a string of
bytes) plus the current permission bits of the file.</li>

<li>If <code>p</code> refers to a symbolic link, then the contents of <code>p</code> are just the string specifying where the link points.</li>

<li>If <code>p</code> refers to a directory, then the contents of p are just the token <i>DIRECTORY</i> plus the current
permission bits of the directory.</li>

<li>If <code>p</code> does not refer to anything in this replica, then the contents of <code>p</code> are the token <i>ABSENT</i>.</li>
</ol>

<p>
Unison keeps a record (named <i>archives</i>) of the contents of each path after each successful synchronization
of that path (i.e., it remembers the contents at the last moment when they were the same in the two replicas).
</p></li>

<li><i>Update.</i> A path is <i>updated</i> (in some replica) if its current contents are different from its contents the
last time it was successfully synchronized.</li>

<li><i>Conflicts.</i> A path is said to be <i>conflicting</i> if the following conditions <i>all</i> hold:

<ol class="org-ol">
<li>it has been updated in one replica,</li>

<li>any of its descendants has been updated in the other replica,</li>

<li>its contents in the two replicas are not identical.</li>
</ol></li>

<li><i>Reconciliation.</i> Unison operates in several distinct stages:

<ol class="org-ol">
<li>On each host, it compares its archive file (which records the state of each path in the replica when it
was last synchronized) with the current contents of the replica, to determine which paths have been updated.</li>

<li>It checks for <i>false conflicts</i>  — paths that have been updated on both replicas, but whose current
values are identical. These paths are silently marked as synchronized in the archive files in both replicas.</li>

<li>It displays all the updated paths to the user. For updates that do not conflict, it suggests a default
action (propagating the new contents from the updated replica to the other). Conflicting updates are
just displayed. The user is given an opportunity to examine the current state of affairs, change the
default actions for nonconflicting updates, and choose actions for conflicting updates.</li>

<li>It performs the selected actions, one at a time. Each action is performed by first transferring the new
contents to a temporary file on the receiving host, then atomically moving them into place.</li>

<li>It updates its archive files to reflect the new state of the replicas.</li>
</ol></li>

<li><p>
<i>Invariants.</i> Unison is careful to protect both its internal state and the state of the replicas at every point in this
process. Specifically, the following guarantees are enforced:
</p>

<ol class="org-ol">
<li>At every moment, each path in each replica has either

<ol class="org-ol">
<li>its original contents (i.e., no change at all has been made to this path), or</li>

<li>its correct final contents (i.e., the value that the user expected to be propagated from the other replica).</li>
</ol></li>

<li>At every moment, the information stored on disk about Unison’s private state can be either

<ol class="org-ol">
<li>unchanged, or</li>
<li>updated to reflect those paths that have been successfully synchronized.</li>
</ol></li>
</ol>

<p>
If Unison gets interrupted during ensuring those guarantees, some manual cleanup may be required.
In this case, a file called DANGER.README will be left in the <code>.unison</code> directory,
containing information about the operation that was interrupted.
The next time you try to run Unison, it will notice this file and warn you about it.
</p>

<p>
If Unison is interrupted, it may sometimes leave temporary working files (with suffix <code>.tmp</code>) in the replicas.
It is safe to delete these files. Also, if the backups flag is set, Unison will leave around old versions of files
that it overwrites, with names like <code>file.0.unison.bak</code>. These can be deleted safely when they are no longer wanted.
</p>

<p>
If Unison finds that its archive files have been deleted (or that the archive format has changed and they
cannot be read, or that they don’t exist because this is the first run of Unison on these particular roots),
it takes a conservative approach: it behaves as though the replicas had both been completely empty at the
point of the last synchronization. Thus, It is also safe to delete those archive files on both replicas.
The next time Unison runs, it will assume that all the files it sees in the replicas are new.
</p></li>
</ol>
</div>
</div>

<div id="outline-container-org182b82d" class="outline-2">
<h2 id="org182b82d">Typical Usage</h2>
<div class="outline-text-2" id="text-org182b82d">
<p>
Once you are comfortable with the basic operation of Unison, you may find yourself wanting to use it
regularly to synchronize your commonly used files. There are several possible ways of going about this:
</p>

<ol class="org-ol">
<li>Synchronize your whole home directory, using the <i>Ignore facility</i> to
avoid synchronizing particular directories and files.</li>

<li>Synchronize your whole home directory, but tell Unison to synchronize only some of
the files and subdirectories within it. This can be accomplished by specifying the <code>-path</code>
arguments in your <i>profile</i>.</li>

<li>Create another directory called <code>shared</code> (or <code>current</code>, or whatever) on each host,
and put all the files you want to synchronize into this directory. Tell Unison to synchronize <code>shared</code>
among different hosts.</li>

<li>Create another directory called <code>shared</code> (or <code>current</code>, or whatever) on each host,
and put <i>links</i> to all the files you want to synchronize into this directory. Use the <code>follow</code> preference
to make Unison treat these links as transparent.</li>
</ol>

<p>
Unison is designed for synchronizing pairs of replicas. However, it is possible to use it to keep larger groups
of machines in sync by performing multiple pairwise synchronizations.
If you need to do this, the most reliable way to set things up is to organize the machines into a <i>star topology</i>
with one machine designated as the <i>hub</i> and the rest as <i>spokes</i> and with each spoke machine
synchronizing only with the hub.
</p>
</div>
</div>

<div id="outline-container-org60c31f2" class="outline-2">
<h2 id="org60c31f2">Caveats and Shortcomings</h2>
<div class="outline-text-2" id="text-org60c31f2">
<p>
Here are some things to be careful of when using Unison.
</p>

<ol class="org-ol">
<li>Unison cannot understand rename, and sees it as a delete and a separate create.</li>

<li><p>
You need to be very <i>CAREFUL</i> when renaming directories containing <code>ignored</code> files.
</p>

<p>
For example, suppose Unison is synchronizing directory <code>A</code> between the two machines called the <i>local</i>
and the <i>remote</i> machine; suppose directory <code>A</code> contains a subdirectory <code>D</code>; and suppose <code>D</code> on the
local machine contains a file or subdirectory <code>P</code> that matches an ignore directive in the profile used to
synchronize. Thus path <code>A/D/P</code> exists on the local machine but not on the remote machine.
</p>

<p>
If <code>D</code> is renamed to <code>Dnew</code> on the remote machine, and this change is propagated to the local machine, all
such files or subdirectories <code>P</code> will be deleted. This is because Unison sees the rename as a delete and
a separate create: it deletes the old directory (including the ignored files) and creates a new one (not
including the ignored files, since they are completely invisible to it).
</p></li>

<li><p>
It could be very <i>DANGEROUS</i> to use Unison with removable media such as USB drives
unless you are careful.
</p>

<p>
If you synchronize a directory that is stored on removable media when the media is not present, it will look to Unison as though
the whole directory has been deleted, and it will proceed to delete the directory from the other replica!
</p></li>

<li>Archives are created based on names of roots (and other informations), meaning that renaming roots
results Unison think it never sync these before. For example, assume you have run Unison to sync
<code>work</code> and <code>mirror</code> before, and you rename <code>mirror</code> to <code>backup</code> then change some files in
<code>backup</code>. Now, running <code>unison</code> work backup will create new archives and ask you to resolve conflicts.
In this case, you may find the option <code>-prefer backup</code> be useful, which effectively choose files
in <code>backup</code> to resolve possible conflicts.</li>

<li>If you want to run Unison continuously as a crontab task, then you have to ensure the same
script will not be called unless its previous call has finished. Otherwise there will be two
running Unison instance caring about same targets and interfere each other. For example,
it could be that a sync of big files takes more than 10 minutes, which would create problems
if you have set every 10 minutes a new sync would be started.</li>

<li>The graphical user interface is single-threaded. This means that if Unison is performing some long-
running operation, the display will not be repainted until it finishes. We recommend not trying to do
anything with the user interface while Unison is in the middle of detecting changes or propagating files.</li>
</ol>
</div>
</div>

<div id="outline-container-org4bc05c3" class="outline-2">
<h2 id="org4bc05c3">Going Further</h2>
<div class="outline-text-2" id="text-org4bc05c3">
<p>
The official manual is <a href="https://raw.githubusercontent.com/bcpierce00/unison/documentation/unison-manual.pdf">here</a> and the FAQ is <a href="https://alliance.seas.upenn.edu/~bcpierce/wiki/index.php">here</a>.
</p>

<p>
Besides the basic concepts mentioned in this blog, you may also want to look at the
following sections in the official manual:
</p>

<ul class="org-ul">
<li>Section 6.1 Running Unison</li>
<li>Section 6.2 The <code>.unison</code> Directory</li>
<li>Section 6.4 Preferences</li>
<li>Section 6.5 Profiles</li>
<li>Section 6.6 Sample Profiles</li>
<li>Section 6.7 Keeping Backups</li>
<li>Section 6.8 Merging Conflicting Versions</li>
<li>Section 6.12 Path Specification</li>
<li>Section 6.13 Ignoring Paths</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/basics.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2024-01-07-ReviewUnison/basics.html</guid>
  <pubDate>Sat, 06 Jan 2024 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Examples of Banach Spaces]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org79a12d3">Prerequisite Concepts</a></li>
<li><a href="#orga15a0dd">Definition</a></li>
<li><a href="#org00a12c1">Main Results</a></li>
<li><a href="#orgb90be52">Examples</a></li>
</ul>
</div>
</nav>
<p>
This note gives some common examples of Banach spaces as well as some
counterexamples.
</p>

<p>
Readers may refer to <i>Chapter 7: Complete Metric Space and Functional
Space</i> in the book <i>Munkres, J. Topology Second Edition</i> for more
details.
</p>

<div id="outline-container-org79a12d3" class="outline-2">
<h2 id="org79a12d3">Prerequisite Concepts</h2>
<div class="outline-text-2" id="text-org79a12d3">
<ul class="org-ul">
<li>normed linear space</li>
<li>complete metric space</li>
<li>the metric induced by a norm</li>
<li>continuity</li>
</ul>
</div>
</div>

<div id="outline-container-orga15a0dd" class="outline-2">
<h2 id="orga15a0dd">Definition</h2>
<div class="outline-text-2" id="text-orga15a0dd">
<p>
A complete normed linear space is called a <b>Banach space</b>.
</p>

<p>
Some common used functional spaces are listed below.
</p>

<ol class="org-ol">
<li>\(Y^X\): the set of all functions from \(X\) to \(Y\).</li>
<li>\(\mathcal{B}(X;Y)\): the set of all bounded functions from \(X\) to \(Y\).</li>
<li>\(\mathcal{C}(X;Y)\): the set of all continuous functions from \(X\) to
\(Y\).</li>
</ol>

<p>
Given a metric space \((Y,d)\), the <b>sup metric</b> on
\(\mathcal{B}(X;Y)\) corresponding to \(d\) is defined by
\[
\rho(f,g):=\sup_{x\in X}d(f(x),g(x)).
\]
</p>

<p>
The <b>standard bounded metric</b> \(\bar{d}\) derived from \(d\) is defined by
\[
\bar{d}(x,y):=\min(d(x,y),1).
\]
</p>

<p>
Given a metric space \((Y,d)\), the <b>uniform metric</b> on \(Y^X\)
corresponding to \(d\) is defined by
\[
\bar{\rho}(f,g):=\sup_{x\in X}\bar{d}(f(x),g(x)).
\]
Clearly, the relation between uniform metric and sup metric is
\[
\bar{\rho}(f,g) = \min(\rho(f,g),1).
\]
</p>

<p>
Given a normed linear space \((Y,\|\cdot\|)\), the <b>sup norm</b> on \(Y^X\)
corresponding to \(\|\cdot\|\) is defined by
\[
\|f\|_\infty:=\sup_{x\in X}\|f(x)\|.
\]
</p>
</div>
</div>

<div id="outline-container-org00a12c1" class="outline-2">
<h2 id="org00a12c1">Main Results</h2>
<div class="outline-text-2" id="text-org00a12c1">
<p>
<b>Lemma 1.</b> If \((Y,d)\) is complete, then \((Y^X,\bar{\rho})\) is also
complete.
</p>

<p>
<b>Lemma 2.</b> Let \(X\) be a topological space and \((Y,d)\) be a metric space
(not necessarily complete), then \(\mathcal{B}(X;Y)\) and
\(\mathcal{C}(X;Y)\) are both closed sets in \((Y^X,\bar{\rho})\).
</p>

<p>
<b>Theorem 3.</b> Let Let \(X\) be a topological space and \((Y,d)\) be a
<i>complete</i> metric space, then \(\mathcal{B}(X;Y)\) and \(\mathcal{C}(X;Y)\)
are both complete in the uniform metric.
</p>
</div>
</div>

<div id="outline-container-orgb90be52" class="outline-2">
<h2 id="orgb90be52">Examples</h2>
<div class="outline-text-2" id="text-orgb90be52">
<p>
<b>Example.</b> \((\mathcal{C}[a,b],\|\cdot\|_\infty)\) is a Banach
space.
</p>

<p>
<b>Example.</b> \((\mathcal{B}[a,b],\|\cdot\|_\infty)\) is a Banach space.
</p>

<p>
<b>Example.</b> \((\ell_\infty,\|\cdot\|_\infty)\)
is a Banach space, where
\[
\ell_\infty := \{\mathbf{x}\in\mathbb{R}^\mathbb{N}\mid
\|\mathbf{x}\|_\infty < \infty\}.
\]
</p>

<p>
<b>Example.</b> \((\mathcal{C}^1[a,b],\|\cdot\|_\infty)\) is not complete,
because \(\mathcal{C}^1[a,b]\) is not closed in \((Y^X,\bar{\rho})\).
Consider \(f_n(x):=\sqrt{x^2+\frac{1}{n}}\). It is easy to check that
\(f_n\) converges to \(|x|\).
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-10-23-BanachSpaceExample/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-10-23-BanachSpaceExample/notes.html</guid>
  <pubDate>Mon, 23 Oct 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Compactness]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb1327ff">Prerequisite Concepts</a></li>
<li><a href="#orge937615">Definitions</a></li>
<li><a href="#org963470b">Main Results</a></li>
<li><a href="#orgd4394c2">Detailed Proofs</a></li>
</ul>
</div>
</nav>
<p>
This note is a review of Chapter IV.8 of the book
<i>An introduction to set theory and topology</i>
by Freiwald.
</p>

<div id="outline-container-orgb1327ff" class="outline-2">
<h2 id="orgb1327ff">Prerequisite Concepts</h2>
<div class="outline-text-2" id="text-orgb1327ff">
<ul class="org-ul">
<li>topological space and its subspace</li>
<li>T1 topological space and T2 topological space</li>
<li>Lindelöf topological space</li>
<li>sequence convergence in a topological space</li>
<li>continuity of functions between topological spaces</li>
<li>first countability of topological spaces</li>
<li>pseudometric space and metric space</li>
<li>separable metric space</li>
</ul>
</div>
</div>

<div id="outline-container-orge937615" class="outline-2">
<h2 id="orge937615">Definitions</h2>
<div class="outline-text-2" id="text-orge937615">
<p>
Two equivalent definition of a <b>compact</b> topological space \((X,\mathcal{T})\):
</p>

<ol class="org-ol">
<li>Any open cover of \(X\) has a finite open subcover<sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup>.</li>
<li>Any family of closed sets \(\mathcal{F}\) with <i>Finite Intersection Property</i>
has \(\bigcap\mathcal{F}\neq\emptyset\)<sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>.</li>
</ol>

<p>
A subset \(K\) in \((X,\mathcal{T})\) is called a <b>compact subset</b>
if the subspace \((K, \mathcal{T}_K)\) is compact<sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup>.
</p>

<p>
Three more different notions of <i>compactness</i>.
</p>

<dl class="org-dl">
<dt>sequentially compact</dt><dd>every sequence has a convergent subsequence</dd>
<dt>countably compact</dt><dd>every countable open cover of \(X\) has a finite subcover</dd>
<dt>pseudocompact</dt><dd>every continuous function \(f:X\to\mathbb{R}\) is bounded.</dd>
</dl>

<p>
In addition, if \(X\) is a pseudometric space, there is another important property.
</p>

<dl class="org-dl">
<dt>totally bounded</dt><dd>for each \(\epsilon > 0\), \(X\) can be covered by
a finite number of \(\epsilon\)-balls.</dd>
</dl>
</div>
</div>

<div id="outline-container-org963470b" class="outline-2">
<h2 id="org963470b">Main Results</h2>
<div class="outline-text-2" id="text-org963470b">
<p>
Let \((X, \mathcal{T})\) be a topological space.
</p>

<p>
<b>Theorem 8.5.</b> <a id="org9ff266f"></a> <i>Let \(K \subset X\).</i>
</p>

<p>
<i>1. \(K\) is closed \(\Longrightarrow\) \(K\) is compact, if \(X\) is compact.</i>
</p>

<p>
<i>2. \(K\) is compact \(\Longrightarrow\) \(K\) is closed, if \(X\) is Hausdorff.</i>
</p>

<p>
<b>Theorem 8.11.</b> <a id="org83b3360"></a> <i>The following implications hold generally.</i>
\[ X\text{ is (sequentially) compact }\Rightarrow X\text{ is countably compact }
\Rightarrow X\text{ is pseudocompact}.\]
</p>

<p>
<b>Lemma 8.12.</b> <a id="orgbe75744"></a> \(X\) is countably compact \(\Longrightarrow\) \(X\) is sequentially compact,
if \(X\) is first countable.
</p>

<p>
<b>Lemma 8.16.</b> <a id="org2eb4465"></a> A totally bounded pseudometric space is separable, and thus Lindelöf.
</p>

<p>
<b>Theorem 8.17.</b> <a id="orgdb4504f"></a> In a pseudometric space \((X,d)\),
the property of compactness, sequentially compactness, countably compactness
and pseudocompactness are all equivalent.
</p>
</div>
</div>

<div id="outline-container-orgd4394c2" class="outline-2">
<h2 id="orgd4394c2">Detailed Proofs</h2>
<div class="outline-text-2" id="text-orgd4394c2">
<p>
<i>Proof to <a href="#org9ff266f">Theorem 8.5</a>.</i>
Assume \(K\) is closed and \(X\) is compact, then any open cover
of \(K\) would form an open cover of \(X\) if augmented by \(K^\mathsf{c}\).
This implies that a finite subcover of \(K\) exists.
</p>

<p>
Assume \(K\) is compact and \(X\) is Hausdorff. Pick any \(p\in
K^\mathsf{c}\).  For any \(q \in K\), there exists a neighborhood \(V_q\)
of \(q\) and a neighborhood \(W_q\) of \(p\) such that \(V_q \cap W_q =
\emptyset\). By the compactness of \(K\), there exists finite many \(q_i\)
such that \(\bigcup_{i=1}^n V_{q_i}\supset K\).  This implies that
\(\bigcap_{i=1}^n W_{q_i}\subset K^\mathsf{c}\) is a neighborhood of
\(p\). Hence, \(p\) is an interior point of \(K^\mathsf{c}\).
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#org83b3360">Theorem 8.11</a>.</i>
</p>

<p>
Compact \(\Rightarrow\) countably compact. Obviously.
</p>

<p>
Sequentially compact \(\Rightarrow\) countably compact.
If not, there exists a countable open cover
\((V_i)_{i=0}^\infty\)
of \(X\) which has no finite subcover.
Let \(x_k\in\bigl(\bigcup_{i=0}^k V_i\bigr)^\mathsf{c}\).
Clearly, the sequence \((x_k)\) has no convergent subsequence.
This contradicts with the hypothesis.
</p>

<p>
Countably compact \(\Rightarrow\) pseudocompact.
For any real-valued continuous function \(f:X\to\mathbb{R}\),
\((f^{-1}(-n,n))_{n=1}^{\infty}\) is a countable open cover of \(X\),
and thus has a finite subcover. WLOG, assume the finite subcover
is \((f^{-1}(-n,n))_{n=1}^{M}\). Clearly, \(f\) is bounded by \(M\).
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#orgbe75744">Lemma 8.12</a>.</i>
First, we prove that \(X\) <span class="underline">is countably compact if and only if every sequence
has a cluster point</span>. The <i>if</i> part has been proved in Theorem 8.11. To prove
the <i>only if</i> part, assume \(X\) be countably compact and \((x_n)\) is a sequence
with no cluster point. Let \(T_n\) be the tail set of \((x_n)\):
\[T_n:=\{x_k\mid k\geq n\}.\]
Let \(\overline{T}_n\) be the closure of \(T_n\). Since \(X\) is countably compact,
the countable family of closed sets \(\{\overline{T}_n \mid n\in\mathbb{N}\}\)
must have
\[\bigcap_{n=0}^\infty\overline{T}_n\neq\emptyset.\]
Pick \(x\in \bigcap_{n=0}^\infty\overline{T}_n\).
For any \(n\), there is \(x\in \overline{T}_n\).
Hence, for any neighborhood \(N_x\) of \(x\), there is \(N_x\cap T_n\neq\emptyset\).
Recalling the definition of \(T_n\), we conclude that \(x\) is a cluster point
of \((x_n)\). However, this contradicts with the hypothesis that \((x_n)\) has
no cluster point. We finish the <i>only if</i> part.
</p>

<p>
Then we prove this lemma.
Let \(X\) be countably compact and first countable.
For any sequence \((x_n)\), it has a cluster point \(x\).
There must exist a subsequence of \((x_n)\) which converges to \(x\).
</p>

<ul class="org-ul">
<li>Let \((B_k)\) be a countable shrinking neighborhood base at \(x\).
Since \((x_n)\) is frequently in \(B_1\), we can pick \(n_1\) so that \(x_{n_1}\in B_1\).
Since \((x_n)\) is frequently in \(B_2\), we can pick \(n_2 > n_1\) so that \(x_{n_2}\in B_2\).
Continue inductively: having chosen \(n_1 < n_2 < \cdots < n_k\) so that
\(x_{n_k}\in U_k \subset U_{k-1} \subset \cdots U_1\), we can then choose \(n_{k+1} > n_k\)
so that \(x_{n_{k+1}}\in U_{k+1}\subset U_k\). Clearly, \((x_{n_k})_{k=1}^\infty\) converges
to \(x\).</li>
</ul>

<p>
In conclusion, if \(X\) is countably compact, then every sequence has a cluster point.
Since \(X\) is first countable, we conclude that every sequence has a convergent
subsequence.
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#org2eb4465">Lemma 8.16</a>.</i>
Let \((X,d)\) be a totally bounded pseudometric space.
</p>

<p>
First, we prove that <span class="underline">a totally bounded pseudometric space is
separable</span>. For each \(n\in\mathbb{N}\), there exists finite many points
\(x^{(n)}_1,x^{(n)}_2,\ldots x^{(n)}_{k_n}\) such that \(X\) can be
covered by \(\frac{1}{n}\)-balls centered at these points.  We claim
that \[ E:=\bigcup_{n=1}^\infty \{x^{(n)}_i\mid 1\leq i\leq k_n\} \]
is a dense subset of \(X\).
</p>

<ul class="org-ul">
<li>For any \(x\in X\) and arbitrary small \(\epsilon > 0\),
we can find \(x^{(n)}_i\in E\) such that \(d( x^{(n)}_i, x ) < \epsilon\).
This is done by choosing \(n > \frac{1}{\epsilon}\) and \(i=1\).</li>
</ul>

<p>
Then, we prove that <span class="underline">a separable pseudometric space is second countable</span>.
Let \(D=\{x_k\mid x\in\mathbb{N}\}\) be a dense subset of \(X\).
We claim that
\[
\mathcal{O} := \bigcup_{k=1}^\infty \{B_{\frac{1}{n}}(x_k)\mid n\in\mathbb{N}\}
\]
is a countable topological base.
</p>

<ul class="org-ul">
<li>For any \(x\in V\in\mathcal{T}_d\), there exists some \(\epsilon > 0\)
such that \(B_\epsilon(x)\subset V\). As \(D\) is dense in \(X\), there is
\(x_k\in D\) such that \(d(x_k, x) < \frac{\epsilon}{2}\). Choose \(n\)
such that \(\frac{1}{n} < \frac{\epsilon}{2}\), we have
\(B_{\frac{1}{n}}(x_k)\subset B_\epsilon(x)\subset V\).</li>
</ul>

<p>
Finally, we prove that <span class="underline">a second countable pseudometric space is Lindelöf</span>.
Let \(\mathcal{B}\) be a countable base of \(\mathcal{T}\), and let \(\mathcal{U}\)
be an arbitrary open cover of \(X\). For any \(x\in X\),
there exists \(U_x\in\mathcal{U}\) such that \(x\in U_x\).
Since \(\mathcal{B}\) is a base, for each \(x\), there exists a \(B_x\in\mathcal{B}\)
such that \(x\in B_x\subset U_x\). Therefore,
\[
\mathcal{V}:=\bigcup_{x\in X}B_x
\]
forms an open cover of \(X\). However, \(\mathcal{V}\subset\mathcal{B}\) must be
countable. Hence, \(\mathcal{V}\) can be represented as
\[
\mathcal{V}:=\bigcup_{i=1}^\infty B_{x_i}.
\]
We conclude that \(\bigcup_{i=1}^\infty U_{x_i}\) is a countable subcover.
</p>

<p>
Q.E.D.
</p>

<p>
<i>Proof to <a href="#orgdb4504f">Theorem 8.17</a>.</i>
Based on Theorem 8.11, we need only to prove the following implications.
</p>

<dl class="org-dl">
<dt>Countably compactness implies sequentially compactness</dt><dd>As any pseudometric space is first countable,
then countably compactness implies sequentially compactness by
Lemma 8.12.</dd>
<dt>Countably compactness implies compactness</dt><dd><p>
By Lemma 8.16, any totally bounded pseudometric space is Lindelöf.
Hence, it is sufficient to prove that a countably pseudometric space
is totally bounded.
</p>

<p>
If a countably compact pseudometric space is not totally bounded,
then there exists \(\epsilon > 0\) such that \(X\) cannot be covered
by finite many \(\epsilon\)-balls. Obviously, \(X\) is nonempty.
Pick \(x_1 \in X\). As \(\{B_\epsilon(x_1)\}\) cannot cover \(X\),
we can pick \(x_2\in X\) such that \(d(x_2,x_1) \geq \epsilon\).
Again, as \(\{B_\epsilon(x_1), B_\epsilon(x_2)\}\) cannot cover \(X\),
we can pick \(x_3\in X\) such that \(d(x_3,x_1) \geq \epsilon\)
and \(d(x_3,x_2)\geq \epsilon\). Continue inductively,
we may construct a sequence \((x_n)\) such that \(d(x_i,x_j) \geq \epsilon\)
for each \(i\neq j\). Clearly, this sequence has no convergent subsequence.
However, since we have proved that
<i>countably compactness implies sequentially compactness</i>, \((x_n)\) must have a
convergent subsequence, leading to a contradiction.
</p></dd>
<dt>Pseudocompactness implies countably compactness</dt><dd>Assume \(X\) is pseudocompact but is not countably compact.
As \(X\) is not countably compact, there exists a sequence \((x_n)\) with
no cluster point.

<ul class="org-ul">
<li>STEP I. Ensure \(d(x_n,x_m) > 0\) for all \(n\neq m\). If not, we may
pick a subsequence \((x_{a_k})\) such that \(d(x_{a_n},x_{a_m}) > 0\)
for all \(n\neq m\).

<ul class="org-ul">
<li>The subsequence is constructed by observing
the following fact: /for any \(n\), the set \[ E_n:= \{m > n \mid
      d(x_m,x_n) =0\} \] must be finite. Otherwise, there would be
convergent subsequence, and contradicts with the assumption that
\((x_n)\) has no cluster point.</li>
</ul></li>

<li>STEP II. Construct a sequence of open sets \((U_n)_{n=1}^\infty\)
such that 1) \(x_n\in U_n\); 2) \(U_i\cap U_j=\emptyset\) if \(i\neq
    j\); 3) \(\mathrm{diam}\,U_n\to 0\).

<ul class="org-ul">
<li>For any \(x_m\), there exists an open ball \(B_{\delta_m}(x_m)\)
containing only finte many \(x_n\)'s (since \(x_m\) is not a cluster
point of \((x_n)\)). Because \(d(x_n,x_m) > 0\) for all \(n\neq m\),
the \(\delta_m\) may be shrunk such that \(B_{\delta_m}(x_m)\)
contains no other \(x_n\)'s except \(x_m\). In other words,
\[
      d(x_m, x_n) \geq \delta_m,\qquad\forall n\neq m.
      \]
Let \(\epsilon_m=\min(\delta_m/3, \frac{1}{m})\). Then we claim
that \(U_n=B_{\epsilon_n}(x_n)\) forms the desired sequence of
open sets. Clearly, \(x_n\in U_n\) and
\(\operatorname{diam}U_n\to0\). To see that \(U_n\cap
      U_m=\emptyset\) if \(n\neq m\), we need only to note that
\(\epsilon_n + \epsilon_m \leq \delta_n/3 + \delta_m/3 <
      d(x_n,x_m)\).</li>
</ul></li>

<li>STEP III. Show \(f_n(x)=n\frac{d(x_n,U_n^\mathsf{c})}{d(x_n,U_n^\mathsf{c})}\)
and \(f=\sum_{n=1}^\infty f_n\) are well defined.

<ul class="org-ul">
<li>As \(x_n\not\in U_n^\mathsf{c}\) and \(U_n^\mathsf{c}\) is closed,
the distance \(d(x_n,U_n^\mathsf{c}\) cannot be 0. Moreover,
\(d(x,U_n^\mathsf{c}\neq 0\) if and only \(x\in U_n\). Hence,
for any \(x\), there exists at most one \(f_n\) such that
\(f_n(x)\neq 0\). Therefore, \(f=\sum_n f_n\) is finite at any
\(x\).</li>
</ul></li>

<li>STEP IV. Prove that \(f\) is an unbounded continuous function.

<ul class="org-ul">
<li><p>
Since \(f(x_n)=f_n(x_n)=n\), we have \(f\) is unbounded. To prove
\(f\) is continuous, we first note that \(f_n\) is continuous.
</p>

<ul class="org-ul">
<li>If \(d\) is a metric on \(X\) and \(E\) is a subset of \(X\), then
for any \(x,y\in X\), there is
\[
        d(x,E) \leq d(y,E) + d(x,y).
        \]
Therefore, \(d(\cdot,E)\) must be continuous.
(If \(d(x_n,x)\to0\), then \(|d(x_n,E)-d(x,E)|\leq d(x_n,x)\to0\).)</li>
</ul>

<p>
Then we prove that for any \(a\in X\), there exists a open set
\(V_a\) such that \(f|_{V_a}=\sum_{n=1}^Nf_n\) for some \(N\).
</p>

<ul class="org-ul">
<li>If \(d(a,x_n)=0\) for some \(n\), then \(V_a\) can be set to \(U_n\) and
\(N=n\).</li>

<li>Suppose \(d(a,x_n)>0\) for all \(n\). Since \(a\) is not a cluster
point of \(x_n\), there exists an open ball \(B_\delta(a)\)
containing no \(x_n\). In other words,
\[
        d(a,x_n) \geq \delta,\qquad\forall n.
        \]
Let \(V_a=B_{\delta/2}(a)\). Then for any \(x\in V_a\),
\[
        d(x,x_n) \geq d(a,x_n) - d(a,x) \geq \delta/2,\qquad\forall n.
        \]
Recalling that \(\operatorname{diam}U_n\to0\),
there must exist \(N\) such that for all \(n\geq N\),
\(\operatorname{diam}U_n < \delta/2\).
Therefore, for any \(x\in V_a\), we have \(x\not\in U_n\) for all
\(n\geq N\). In otherwords, \(f_n(x)=0\) for all \(n\geq N\) if
\(x\in V_a\).</li>
</ul>

<p>
Therefore, \(f\) is continous at any point \(a\).
</p></li>
</ul></li>
</ul></dd>
</dl>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
An open cover of \(X\) is a family of open sets \(\mathcal{O}\)
such that \(\bigcup\mathcal{O} \supset X\).
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
A family \(\mathcal{F}\) of sets with finite intersection property
if every finite subfamily of \(\mathcal{F}\) has nonempty intersection.
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Compactness is a property of topological spaces.
It is different from the definition of closed sets.
We can say a topological space is compact,
but it make no sense to say a topological space is closed.
</p></div></div>


</div>
</div><div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-09-19-Compactness/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-09-19-Compactness/notes.html</guid>
  <pubDate>Tue, 19 Sep 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Optimality Conditions in Convex Optimization]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org0d2f20f">Lagrangian and KKT Points</a></li>
<li><a href="#orga782b09">Dual Problem</a></li>
</ul>
</div>
</nav>
<p>
Consider the following constrained optimization problem
\[\begin{aligned}
\min_{x\in\mathbb{R}^n}\quad & f(x) \\
\mathrm{s.t.}\quad & c_i(x) = 0,\qquad i\in\mathcal{E},\\
&c_i(x) \geq 0,\qquad i\in\mathcal{I}.
\end{aligned}\]
Here, \(f\) is a convex function, and
\(\{c_i \mid i\in\mathcal{E}\cup\mathcal{I}\}\) are linear functions. This
problem encompasses linear programming and quadratic programming, and
represents a special case of general convex optimization problems.
Therefore, it serves as an good starting point for learning about
optimization methods.
</p>

<p>
Let us start by some notations and terminologies.
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Concept</th>
<th scope="col" class="org-left">Notation</th>
<th scope="col" class="org-left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Feasible set</td>
<td class="org-left">\(\Omega\)</td>
<td class="org-left">the set of \(x\) satisfying all constraints</td>
</tr>

<tr>
<td class="org-left">Minimizer</td>
<td class="org-left">\(x^\ast\)</td>
<td class="org-left">the smallest feasible point in its neighbors</td>
</tr>

<tr>
<td class="org-left">Mimimum</td>
<td class="org-left">\(f^\ast\)</td>
<td class="org-left">\(f(x^\ast)\)</td>
</tr>
</tbody>
</table>

<p>
Below is a very basic property of minimizers.
</p>

<p>
<i>Minimizer is stable.</i> If \(x^\ast\) is a minimizer of the considered
optimization problem, then
\[ \langle \nabla f(x^\ast), x-x^\ast \rangle \geq 0, \qquad \forall x \in\Omega.\]
</p>

<p>
In general, if \(f\) is convex, then for any two points \(x_1\) and \(x_2\),
there is
\[ f(x_2) \geq f(x_1) + \langle \nabla f(x_1), x_2 - x_1\rangle. \]
Therefore, for the considered problem any stable point is also a
minimizer.
</p>

<div id="outline-container-org0d2f20f" class="outline-2">
<h2 id="org0d2f20f">Lagrangian and KKT Points</h2>
<div class="outline-text-2" id="text-org0d2f20f">
<p>
The <i>Lagrangian</i> of the considered problem is defined by
\[ L(x, u, v) := f(x) - u^\intercal \mathbf{g}(x) - v^\intercal \mathbf{h}(x),
\qquad x\in\mathbb{R}^n, u\in\mathbb{R}_+^{|\mathcal{I}|}, v\in\mathbb{R}^{|\mathcal{E}|},\]
where \(\mathbf{g}(x)\geq 0\) is the collection of inequality constraints
and \(\mathbf{h}(x)=0\) is the collection of equality constraints. It is
important to note that by writting \(L(x,u,v)\) the multiplier \(u\)
associated with inequality constraints is required to be nonnegative.
</p>

<p>
A KKT point \((x^\ast, u^\ast, v^\ast)\) is a point in the domain of
Lagrangian \(L\) which satsifies the following set of conditions (known as
KKT conditions) \[\begin{cases}
\nabla_{x}L(x^\ast, u^\ast, v^\ast) = 0, \\
\nabla_{u}L(x^\ast, u^\ast, v^\ast) \leq 0, \\
\nabla_{v}L(x^\ast, u^\ast, v^\ast) = 0, \\
\langle \nabla_{u}L(x^\ast, u^\ast, v^\ast), u^\ast\rangle = 0.
\end{cases}\] The last equality is known as the <i>Complementary
slackness</i> condition. In addition, \(u^\ast\geq 0\) is included implicitly
by writting \(L(x^\ast,u^\ast,v^\ast)\).
</p>

<p>
For the considered problem. KKT conditions are necessary.
</p>

<p>
<b>KKT conditions are necessary.</b> <i>If \(x^\ast\) is a minimizer of the
considered problem, then there exists
\(u^\ast\in\mathbb{R}_+^{|\mathcal{I}|}\) and
\(v^\ast\in\mathbb{R}^{|\mathcal{E}|}\) such that
\((x^\ast, u^\ast, v^\ast)\) is a KKT point.</i>
</p>

<blockquote>
<p>
The proof, which utilizes Farkas' lemma, is omitted.
</p>
</blockquote>

<p>
It turns out that KKT conditions are also sufficient to ensure
optimality. To see this, we need to introduce a useful concept <i>saddle
points of Lagrangian</i>.
</p>

<p>
<i>A saddle point of Lagrangian</i> is a point \((x^\ast, u^\ast, v^\ast)\)
which satisfying that
\[ L(x^\ast, u, v) \leq L(x^\ast, u^\ast, v^\ast) \leq L(x, u^\ast, v^\ast),\qquad\forall x, u, v.\]
It is implicit in this definition that \(u^\ast\geq0\) and \(u\geq0\), since
this requirement follows from writing out \(L(x^\ast, u^\ast, v^\ast)\)
and \(L(x^\ast, u, v)\). This convention will be assumed throughout,
unless otherwise specified.
</p>

<p>
The saddle point condition is the most restrictive condition for a
convex optimization problem.
</p>

<p>
<i>Any saddle point is a KKT point, and moreover, any saddle point is a
global minimizer.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> Suppose \((x^\ast,u^\ast,v^\ast)\) is a saddle point. Fix
\(u^\ast,v^\ast\), \(L(\cdot,u^\ast,v^\ast)\) has a minimizer \(x^\ast\).
Therefore \[ \nabla_xL(x^\ast,u^\ast,v^\ast) = 0.\] Fix
\(x^\ast,u^\ast\), \(L(x^\ast,u^\ast,\cdot)\) has a maximizer \(v^\ast\).
Therefore \[ \nabla_vL(x^\ast,u^\ast,v^\ast) = 0.\] Fix
\(x^\ast,v^\ast\), \(L(x^\ast, u, v^\ast)\) has a maxmizer \(u^\ast\) on
\(\mathbb{R}_+^{|\mathcal{I}|}\). Therefore
\[ \langle \nabla_uL(x^\ast,u^\ast,v^\ast), u-u^\ast\rangle \leq 0,\qquad\forall u\geq 0.\]
By choosing \(u=u^\ast+\epsilon_i\), where \(\epsilon_i\) is a unit vector
with only one nonzero component,
\[ \nabla_uL(x^\ast,u^\ast,v^\ast) \leq 0.\] Moreover, by choosing
\(u=0\) and \(u=2u^\ast\), it is clear that
\[ \langle \nabla_uL(x^\ast,u^\ast,v^\ast), u^\ast\rangle = 0.\] This
concludes that \((x^\ast,u^\ast,v^\ast)\) is a KKT point.
</p>

<p>
As \((x^\ast,u^\ast,v^\ast)\) satisfies the KKT conditions, it holds
that \[\mathbf{g}(x^\ast)\geq0,\qquad\mathbf{h}(x^\ast)=0.\] This
implies that \(x^\ast\in\Omega\). In addition, KKT conditions imply that
\[(u^\ast)^\intercal \mathbf{g}(x^\ast) = 0,\qquad (v^\ast)^\intercal \mathbf{h}(x^\ast) = 0.\]
For any \(x\in\Omega\), there is
\[(u^\ast)^\intercal \mathbf{g}(x) \geq 0, \qquad (v^\ast)^\intercal \mathbf{h}(x) = 0.\]
Hence,
\[ f(x) \geq L(x, u^\ast, v^\ast) \geq L(x^\ast, u^\ast, v^\ast) = f(x^\ast),\]
where the second inequality uses the fact that
\((x^\ast,u^\ast,v^\ast)\) is a saddle point. This concludes that
\((x^\ast,u^\ast,v^\ast)\) is a global minimizer.
</p>

<p>
Q.E.D.
</p>
</blockquote>

<p>
Finally, we can prove the sufficiency of KKT conditions by showing that
for the considered problem any KKT point is a saddle point.
</p>

<p>
<b>KKT conditions are sufficient.</b> <i>For the considered problem, if
\((x^\ast, u^\ast, v^\ast)\) is a KKT point, then it is also a saddle
point of Lagrangian. Consequently, it is a global minimizer.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> On one hand, \((u^\ast, v^\ast)\) is a maximizer of
\(L(x^\ast, \cdot, \cdot)\) on
\(\mathbb{R}^{|\mathcal{I}|}_+\times\mathbb{R}^{|\mathcal{E}|}\) because
\(\mathbf{g}(x^\ast)\geq 0\) and \(\mathbf{h}(x^\ast)=0\).
</p>

<p>
On the otherhand, \(x^\ast\) is a minimizer of
\(L(\cdot, u^\ast, v^\ast)\) on \(\mathbb{R}^n\) because it is convex and
there is \(\nabla_xL(x^\ast, u^\ast, v^\ast)=0\).
</p>

<p>
Q.E.D.
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orga782b09" class="outline-2">
<h2 id="orga782b09">Dual Problem</h2>
<div class="outline-text-2" id="text-orga782b09">
<p>
Recall the definition of Lagrangian
\[ L(x, u, v) := f(x) - u^\intercal \mathbf{g}(x) - v^\intercal \mathbf{h}(x),
\qquad x\in\mathbb{R}^n, u\in\mathbb{R}_+^{|\mathcal{I}|}, v\in\mathbb{R}^{|\mathcal{E}|}.\]
It is not hard to show that
\[ \max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} L(x, u, v) =
\begin{cases}
\infty, \qquad \mathrm{if}\ x\not\in\Omega,\\
f(x),\qquad\mathrm{if}\ x\in\Omega.
\end{cases}\] Hence, the original optimization problem (referred to as
the <i>primal problem</i> below) can be rewritten as
\[ \min_{x\in\mathbb{R}^n}\max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} L(x, u, v).\]
The <i>Dual problem</i> is then defined by
\[ \max_{\substack{u\in\mathbb{R}_+^{|\mathcal{I}|}\\ v\in\mathbb{R}^{|\mathcal{E}|}}} \min_{x\in\mathbb{R}^n} L(x, u, v).\]
</p>

<p>
Dual problem has the following properties:
</p>

<ul class="org-ul">
<li>the objective function \(\min_{x}L(x,u,v)\) is concave, regardless of
the convexity of \(f, \mathbf{g}\) and \(\mathbf{h}\).</li>
<li>the optimal objective value is not greater than the optimal value of
the primal problem.</li>
</ul>

<p>
The first property is expected because \(u\) and \(v\) appear linear in \(L\),
and the \(\min\) operator does not break the concavity. The second
property, also known as the <i>weak duality</i>, is a direct consequence of
the following general proposition.
</p>

<p>
<b>Min Max is greater or equal to Max Min</b>. <i>For any function
\(f: X\times Y \to \mathbb{R}\), the following inequality holds trivially</i>
\[ \min_{x\in X}\max_{y\in Y} f(x, y) \geq \max_{y\in Y}\min_{x\in X} f(x, y).\]
</p>

<p>
The <i>duality gap</i> is then defined as the difference between the optimal
values between the primal and dual problems. We have seen that this gap
is always nonnegative. If the duality gap is zero, then we say that
<i>strong duality</i> holds.
</p>

<p>
<b>Strong duality holds if constraints are linear.</b> <i>For the considered
problem, where \(f\) is convex and constraints are linear, the strong
duality holds if any minimizer of the primal problem exists.</i>
</p>

<blockquote>
<p>
<i>Proof.</i> Assume \(x^\ast\) is a minimizer of the primal problem. Due to
the necessity of KKT conditions, there exists \(u^\ast\) and \(v^\ast\)
such that \((x^\ast, u^\ast, v^\ast)\) forms a KKT point. In addition,
we have proved that, for the considered problem, any KKT point is also
a saddle point of Lagrangian. Hence, \[ \begin{aligned}
  f(x^\ast) &= \min_{x}\max_{u\geq0, v} L(x, u, v)& \qquad&  \\
  &\geq \max_{u\geq 0, v}\min_{x}L(x, u, v) & \qquad&\textsf{(weaker duality)} \\
  &\geq \min_{x}L(x, u^\ast, v^\ast)&\qquad& \\
  &= L(x^\ast, u^\ast, v^\ast) &\qquad&\textsf{(saddle point)} \\
  &= f(x^\ast)&\qquad &\textsf{(KKT point)}.
  \end{aligned} \]
</p>

<p>
Q.E.D.
</p>
</blockquote>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-30-OptimalityandKKTCondition/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-30-OptimalityandKKTCondition/notes.html</guid>
  <pubDate>Sun, 30 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Detect Blackbox Running Environments in Algorithm Contests]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org08733e3">Mathematical Analysis</a>
<ul>
<li><a href="#orgc2f7c79">A simple case study</a></li>
<li><a href="#the-revised-simple-case">The revised simple case</a></li>
</ul>
</li>
<li><a href="#a-demo-determine-the-version-of-scipy">A Demo: determine the version of SciPy</a></li>
<li><a href="#discussion">Discussion</a></li>
</ul>
</div>
</nav>
<p>
<b>Authors: Dou Meishi, ChatGPT</b>
</p>

<p>
In some commercial algorithm contests, participants are required to
upload their code to a secure platform to check their results. To
protect the test case information, participants can only receive the
results of their code execution. However, certain information, such as
dependency details and package versions, is essential for developing
specific projects. This post provides a systematic way to collect
useful information about the blackbox running environment by analyzing
the execution results of carefully crafted scripts.
</p>

<div id="outline-container-org08733e3" class="outline-2">
<h2 id="org08733e3">Mathematical Analysis</h2>
<div class="outline-text-2" id="text-org08733e3">
</div>
<div id="outline-container-orgc2f7c79" class="outline-3">
<h3 id="orgc2f7c79">A simple case study</h3>
<div class="outline-text-3" id="text-orgc2f7c79">
<p>
Given a blackbox environment, we aim to detect the true value of a
single target variable \(X\), which can take values in a set \(U\). The
environment can answer queries about \(X\), but the feedback is given in
terms of another variable \(Y\), taking values in a set \(V\). The challenge
is to design a procedure that translates query outputs of \(X\) into
observations of \(Y\) to deduce the true value of \(X\).
</p>

<p>
To be specific, let us study the following simple case where \(X\) takes
discrete values in \(U=\{0, 1, 2, \ldots, 99\}\), and \(Y\) takes boolean
values in \(V=\{0, 1\}\).
</p>

<p>
We may apply the following procedure to determine the true value \(X^*\).
The basic idea is representing \(X^*\) via 7 bits of data and retrieve one
bit at a time through the value of \(Y\).
</p>

<ul class="org-ul">
<li>Repeat the following steps 7 times to generate 7 observations of \(Y\),
denoted by \(y_0, y_1, \ldots, y_6\):

<ul class="org-ul">
<li>For each iteration \(k = 0, 1, \ldots, 6\):

<ul class="org-ul">
<li>Determine the $k$-th bit of \(X^*\): set
\(Y = ( \lfloor \frac{X}{2^k} \rfloor ) \bmod 2\).</li>

<li>Emit \(Y\) as an observation and collect the $k$-th observation as
\(y_k\).</li>
</ul></li>
</ul></li>

<li>Analyze the observations and recover the true value of \(X^*\):

<ul class="org-ul">
<li>Set \(X = \sum_{k=0}^{6} y_k 2^k\).</li>

<li>Return \(X\) as the determined value of \(X^*\).</li>
</ul></li>
</ul>

<p>
In the provided example, we used the binary representation of \(X^*\) to
deduce its true value with a finite number of observations. Since any
integer can be uniquely represented using its binary representation, we
can generalize the procedure to any target variable \(X\) with \(n\)
possible values, which is nothing but a direct usage of the following
formula
</p>

<p>
\[ n = \sum_{k=0}^{N-1} y_k 2^k, \qquad\forall n = 0, 1, \ldots, 2^{N}-1.\]
</p>

<p>
<i>Fact I.</i> Given a target variable \(X\) that takes discrete values within
a set containing \(n\) elements, and a blackbox environment that can emit
at least two distinct states as observations, the true value \(X^*\) can
be determined with \(\lceil\log_2 n\rceil\) observations.
</p>

<p>
This fact could be easily extended in terms of the number of distinct
states.
</p>

<p>
<i>Fact II.</i> Given a target variable \(X\) that takes discrete values within
a set containing \(n\) elements, and a blackbox environment that can emit
\(m\) distinct states as observations, the true value \(X^*\) can be
determined with \(\lceil \frac{\log_2 n}{\log_2 m} \rceil\) observations.
</p>
</div>
</div>

<div id="outline-container-the-revised-simple-case" class="outline-3">
<h3 id="the-revised-simple-case">The revised simple case</h3>
<div class="outline-text-3" id="text-the-revised-simple-case">
<p>
Let's consider the previous example again. But this time assume the
target variable \(X\) is continous. Without loss of generality, we assume
\(X\) takes value in \(U=[0, 1]\). For continous variable, obtaining its
exact value is not reasonable. However, it is possible to narrow down
the range set \(U\) to a much smaller set \(U_0\subset U\) and ensure
\(X^*\in U_0\).
</p>

<ul class="org-ul">
<li>Repeat the following steps N times to generate N observations of \(Y\),
denoted by \(y_0, y_1, \ldots, y_{N-1}\):

<ul class="org-ul">
<li>For each iteration \(k = 0, 1, \ldots, N-1\):

<ul class="org-ul">
<li>Determine the $k$-th bit of \(X^*\): set
\(Y = ( \lfloor X\times 2^{k+1} \rfloor ) \bmod 2\).</li>

<li>Emit \(Y\) as an observation and collect the $k$-th observation as
\(y_k\).</li>
</ul></li>
</ul></li>

<li>Analyze the observations and recover the true value of \(X^*\):

<ul class="org-ul">
<li>Set \(X = 2^{-(N+1)} + \sum_{k=0}^{N-1} y_k 2^{-(k+1)}\).</li>

<li>Return \(X\) as the determined value of \(X^*\).</li>
</ul></li>
</ul>

<p>
In view of the following formula
</p>

<p>
\[ x = \sum_{k = 0}^{N-1} y_k 2^{-(k+1)} + \sum_{k=N}^{\infty} y_k 2^{-(k+1)},\qquad\forall x\in[0,1],\]
</p>

<p>
the following fact is clearly true.
</p>

<p>
<i>Fact III.</i> Given a target variable \(X\) that takes values within the
continuous set \([0, 1]\), and a blackbox environment that can emit at
least two distinct states as observations, an approximation \(X\) of the
true value \(X^*\) can be obtained with \(N\) observations to ensure the
approximation error \(|X-X^*| \leq 2^{-N-1}\).
</p>

<p>
This fact could be extended to \(m\) distinct states similarily.
</p>

<p>
<i>Fact IV.</i> Given a target variable \(X\) that takes values within the
continuous set \([0, 1]\), and a blackbox environment that can emit at
least \(m\) distinct states as observations, an approximation \(X\) of the
true value \(X^*\) can be obtained with \(N\) observations to ensure the
approximation error \(|X-X^*| \leq m^{-N-1}\).
</p>
</div>
</div>
</div>

<div id="outline-container-a-demo-determine-the-version-of-scipy" class="outline-2">
<h2 id="a-demo-determine-the-version-of-scipy">A Demo: determine the version of SciPy</h2>
<div class="outline-text-2" id="text-a-demo-determine-the-version-of-scipy">
<p>
Let us consider a scenario where we are participating in an algorithm
contest. The contest organizer provides a secure platform to execute our
code and return the result: (1) a score between 0 and 100, if our code
executes successfully, and (2) a warning indicating the failure to
execute our code. Our objective is to determine the version of SciPy in
the Python environment being used to run our code.
</p>

<p>
Currently, the version name <code>x.y.z</code> consists of
</p>

<ul class="org-ul">
<li>a major name <code>x</code>, which takes value in \(\{0, 1\}\);</li>
<li>a minor name <code>y</code>, which takes value in \(\{0, 1, \ldots, 19\}\);</li>
<li>a micro name <code>z</code>, which takes value in \(\{0, 1, \ldots, 9\}\).</li>
</ul>

<p>
See <a href="https://scipy.org/news/#releases">SciPy Release News</a> for a
complete release history.
</p>

<p>
A binary search requires at most 1 observation to determine <code>x</code>, at most
5 observations to determine <code>y</code> and at most 4 observations to determine
<code>z</code>
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #859900; font-weight: bold;">import</span> time

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_kbit</span>(n, k):
    <span style="color: #2aa198;">'''return the value of k-th bit of an integer n.</span>
<span style="color: #2aa198;">        n == sum(get_kbit(n, k) * 2**k for k in range(n))</span>
<span style="color: #2aa198;">    should hold trivially.'''</span>
    <span style="color: #859900; font-weight: bold;">return</span> (n // (2 ** k)) % 2

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">recover_from_bits</span>(bits):
    <span style="color: #2aa198;">'''restore n from outputs of get_kbit'''</span>
    <span style="color: #859900; font-weight: bold;">return</span> <span style="color: #657b83; font-weight: bold;">sum</span>(bk * 2**k <span style="color: #859900; font-weight: bold;">for</span> k, bk <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">enumerate</span>(bits))


<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">observation is simulated via exceptions</span>
<span style="color: #268bd2;">ObservationException</span> = <span style="color: #657b83; font-weight: bold;">type</span>(<span style="color: #2aa198;">'ObservationException'</span>, (<span style="color: #b58900;">BaseException</span>,), {})
<span style="color: #268bd2;">Observation0</span> = <span style="color: #657b83; font-weight: bold;">type</span>(<span style="color: #2aa198;">'Observation0'</span>, (ObservationException,), {})
<span style="color: #268bd2;">Observation1</span> = <span style="color: #657b83; font-weight: bold;">type</span>(<span style="color: #2aa198;">'Observation1'</span>, (ObservationException,), {})


<span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">VersionQuerier</span>:

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">__init__</span>(<span style="color: #859900; font-weight: bold;">self</span>, version: <span style="color: #657b83; font-weight: bold;">str</span>):
        <span style="color: #2aa198;">'''version should follow the pattern x.y.z'''</span>
        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">version</span> = version

        <span style="color: #268bd2;">major</span>, <span style="color: #268bd2;">minor</span>, <span style="color: #268bd2;">micro</span> = version.split(<span style="color: #2aa198;">'.'</span>)

        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">major</span> = <span style="color: #657b83; font-weight: bold;">int</span>(major)
        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">minor</span> = <span style="color: #657b83; font-weight: bold;">int</span>(minor)
        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">micro</span> = <span style="color: #657b83; font-weight: bold;">int</span>(micro)

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">set_observation</span>(<span style="color: #859900; font-weight: bold;">self</span>, ob):
        <span style="color: #2aa198;">'''take an action to throw the corresponding observation.'''</span>
        <span style="color: #859900; font-weight: bold;">if</span> ob == 0:
            <span style="color: #859900; font-weight: bold;">raise</span> Observation0
        <span style="color: #859900; font-weight: bold;">elif</span> ob == 1:
            <span style="color: #859900; font-weight: bold;">raise</span> Observation1
        <span style="color: #859900; font-weight: bold;">else</span>:
            <span style="color: #859900; font-weight: bold;">raise</span> <span style="color: #b58900;">ValueError</span>

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">main</span>():
    <span style="color: #859900; font-weight: bold;">import</span> scipy

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">inititliazation</span>
    <span style="color: #268bd2;">querier</span> = VersionQuerier(scipy.__version__)

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">only the first constrol statement would be executed</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">comment those lines run before</span>

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">check set_observation</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(0)</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(1)</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(2)</span>

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">query major version name</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.major, 0))     # output: 1</span>

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">query minor version name</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.minor, 0))     # output: 0</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.minor, 1))     # output: 1</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.minor, 2))     # output: 0</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.minor, 3))     # output: 1</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.minor, 4))     # output: 0</span>

    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">query micro version name</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.micro, 0))     # output: 1</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.micro, 1))     # output: 0</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.micro, 2))     # output: 0</span>
    <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">querier.set_observation(get_kbit(querier.micro, 3))     # output: 0</span>

<span style="color: #859900; font-weight: bold;">if</span> <span style="color: #657b83; font-weight: bold;">__name__</span> == <span style="color: #2aa198;">'__main__'</span>:
    <span style="color: #859900; font-weight: bold;">try</span>:
        main()
    <span style="color: #859900; font-weight: bold;">except</span> Observation0 <span style="color: #859900; font-weight: bold;">as</span> e:
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">simulate a successful run with a particular score</span>
        <span style="color: #859900; font-weight: bold;">pass</span>
    <span style="color: #859900; font-weight: bold;">except</span> Observation1 <span style="color: #859900; font-weight: bold;">as</span> e:
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">simulate a failaure run due to some error of the code</span>
        <span style="color: #859900; font-weight: bold;">raise</span> e
    <span style="color: #859900; font-weight: bold;">except</span> <span style="color: #b58900;">BaseException</span> <span style="color: #859900; font-weight: bold;">as</span> e:
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">in case of any other errors</span>
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">simulate a failaure run due to time limit exceeded</span>
        time.sleep(5)
</pre>
</div>

<p>
The provided code defines a VersionQuerier class that simulates the
process of querying the version of SciPy installed in the environment.
It initializes the class with the actual version of SciPy and provides
methods to set and retrieve observations based on the k-th bit of each
part of the version number (major, minor, and micro).
</p>

<p>
The main function demonstrates how to use the VersionQuerier class by
querying the bits of the version number in sequence. This information
can be used to narrow down the range of possible version numbers.
</p>
</div>
</div>

<div id="outline-container-discussion" class="outline-2">
<h2 id="discussion">Discussion</h2>
<div class="outline-text-2" id="text-discussion">
<p>
If a contest organizer provides an upload limit of at least 20 times per
day and offers at least two distinct forms of feedback, a participant
can ascertain the true value of any integer variable once per day,
provided that it is not greater than \(10^6\). Furthermore, if the
participant can maintain stable occurrence of four different feedback
states (e.g., by observing their score instead of relying solely on
failed code submissions), the number of integer variables they can
determine will double. In general, this number grows linearly with
respect to the logarithm of the number of distinct feedbacks.
</p>

<p>
The procedure demonstrated in the previous section can be automated by
generating a script to be uploaded via another script, which can also
parse the result from the contest website in real time. Ultimately, this
leads to another standard problem: <i>the communication between two
systems</i>.
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-think.html">think</a> </div>]]></description>
  <category><![CDATA[think]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-28-DetectBlackBoxRunningEnvironment/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-28-DetectBlackBoxRunningEnvironment/notes.html</guid>
  <pubDate>Fri, 28 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Simulating Swap Operations Without Modifying Data]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orga0e523c">Introduction</a></li>
<li><a href="#org79902ba">Background and Applications</a></li>
<li><a href="#org552407b">Problem Statement and Our Solution</a></li>
<li><a href="#explanation-of-the-implementation">Explanation of the Implementation</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#orgf1384e6">Mathematical Justifications</a></li>
</ul>
</div>
</nav>
<p>
<b>Authors</b>: Dou Meishi, ChatGPT
</p>

<div id="outline-container-orga0e523c" class="outline-2">
<h2 id="orga0e523c">Introduction</h2>
<div class="outline-text-2" id="text-orga0e523c">
<p>
In many applications, it is often required to simulate swap operations
on a list of elements without actually modifying the underlying data.
This can be useful in various scenarios, such as when you need to
analyze the impact of different permutations on a given data structure
or when you want to maintain multiple views of the data with different
sorting orders.
</p>

<p>
In this blog post, we will discuss the problem of simulating swap
operations without modifying the data, explore the background and
applications, and provide a Python code example that demonstrates how to
implement this functionality using a simple class structure. Finally, we
will explain the reasons behind our implementation and conclude.
</p>
</div>
</div>

<div id="outline-container-org79902ba" class="outline-2">
<h2 id="org79902ba">Background and Applications</h2>
<div class="outline-text-2" id="text-org79902ba">
<p>
Swapping elements in a list is a fundamental operation in many
algorithms, such as sorting algorithms and combinatorial search
algorithms. However, there are situations where we want to simulate
these swaps without actually modifying the original data. Some possible
applications include:
</p>

<ol class="org-ol">
<li><b>Data visualization</b>: When working with interactive visualizations,
it is often necessary to display different views of the same data,
based on user interactions. By simulating swaps without modifying the
data, we can easily switch between different views without affecting
the underlying data.</li>

<li><b>Algorithm analysis</b>: Analyzing the performance of algorithms that
involve swapping elements can be done more efficiently by simulating
swaps without modifying the data. This allows us to observe the
impact of different permutations on the algorithm's performance
without the overhead of actually modifying the data structure.</li>

<li><b>Undo/redo functionality</b>: In some applications, like text editors or
image editing software, users may want to undo or redo certain
actions. By simulating swaps without modifying the data, we can
maintain a history of actions and easily revert to previous states
without affecting the original data.</li>
</ol>
</div>
</div>

<div id="outline-container-org552407b" class="outline-2">
<h2 id="org552407b">Problem Statement and Our Solution</h2>
<div class="outline-text-2" id="text-org552407b">
<p>
Suppose we have a list of elements and we want to simulate swap
operations on this list without modifying the actual data. We also want
to be able to retrieve the elements in their current order, reflecting
the simulated swap operations.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #268bd2;">data</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'beta'</span>, <span style="color: #2aa198;">'gamma'</span>, <span style="color: #2aa198;">'eta'</span>]
<span style="color: #268bd2;">vec</span> = Vector(data)

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">swap 1-th and 3-th value</span>
vec.swap(1, 3)
<span style="color: #268bd2;">view</span> = vec.view
<span style="color: #268bd2;">expect_view</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'eta'</span>, <span style="color: #2aa198;">'gamma'</span>, <span style="color: #2aa198;">'beta'</span>]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(view[i]==expect_view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">swap 2-th and 3-th value</span>
vec.swap(2, 3)
<span style="color: #268bd2;">view</span> = vec.view
<span style="color: #268bd2;">expect_view</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'eta'</span>, <span style="color: #2aa198;">'beta'</span>, <span style="color: #2aa198;">'gamma'</span>]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(view[i]==expect_view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">restore data from view</span>
<span style="color: #268bd2;">restored_data</span> = [view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> vec.addr2name]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(data[i]==restored_data[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))
</pre>
</div>

<p>
To address this problem, we propose the implementation of a class called
<code>Viewable_Mixin</code>. This class maintains two lists, <code>self.indices</code> and
<code>self.inverse_indices</code>, that store the forward and inverse mappings
between the view and the data, respectively. The <code>swap</code> method is used
to simulate swap operations on the view, while the <code>view</code> property
returns the current state of the view.
</p>

<p>
Below is the complete Python code that demonstrates how to simulate swap
operations without modifying the data using a simple class structure
called <code>Viewable_Mixin</code>:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">Viewable_Mixin</span>(<span style="color: #657b83; font-weight: bold;">object</span>):
    <span style="color: #2aa198;">'''Allow swap index without actually modifying the data.'''</span>

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">__init__</span>(<span style="color: #859900; font-weight: bold;">self</span>, *args, **kws):
        <span style="color: #2aa198;">'''Assume data is a list'''</span>
        <span style="color: #657b83; font-weight: bold;">super</span>().__init__(*args, **kws)

        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">indices</span> = <span style="color: #657b83; font-weight: bold;">list</span>(<span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(<span style="color: #859900; font-weight: bold;">self</span>)))
        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">inverse_indices</span> = <span style="color: #657b83; font-weight: bold;">list</span>(<span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(<span style="color: #859900; font-weight: bold;">self</span>)))

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">swap</span>(<span style="color: #859900; font-weight: bold;">self</span>, i, j):
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">swap i-th and j-th value without actually modifying data</span>
        <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">indices</span>[<span style="color: #268bd2;">i</span>], <span style="color: #859900; font-weight: bold;">self</span>.<span style="color: #268bd2;">indices</span>[j] = <span style="color: #859900; font-weight: bold;">self</span>.indices[j], <span style="color: #859900; font-weight: bold;">self</span>.indices[i]

        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">update inverse_indices</span>
        <span style="color: #859900; font-weight: bold;">self</span>.inverse_indices[<span style="color: #859900; font-weight: bold;">self</span>.indices[i]] = i
        <span style="color: #859900; font-weight: bold;">self</span>.inverse_indices[<span style="color: #859900; font-weight: bold;">self</span>.indices[j]] = j

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">__getitem__</span>(<span style="color: #859900; font-weight: bold;">self</span>, i):
        <span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">return the view</span>
        <span style="color: #859900; font-weight: bold;">return</span> <span style="color: #657b83; font-weight: bold;">super</span>().__getitem__(<span style="color: #859900; font-weight: bold;">self</span>.indices[i])

    @<span style="color: #657b83; font-weight: bold;">property</span>
    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">view</span>(<span style="color: #859900; font-weight: bold;">self</span>):
        <span style="color: #859900; font-weight: bold;">return</span> [<span style="color: #859900; font-weight: bold;">self</span>[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(<span style="color: #859900; font-weight: bold;">self</span>))]

    @<span style="color: #657b83; font-weight: bold;">property</span>
    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">addr2name</span>(<span style="color: #859900; font-weight: bold;">self</span>):
        <span style="color: #859900; font-weight: bold;">return</span> <span style="color: #859900; font-weight: bold;">self</span>.inverse_indices


<span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">Vector</span>(Viewable_Mixin, <span style="color: #657b83; font-weight: bold;">list</span>):

    <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">__init__</span>(<span style="color: #859900; font-weight: bold;">self</span>, *args, **kws):
        <span style="color: #657b83; font-weight: bold;">super</span>().__init__(*args, **kws)


<span style="color: #268bd2;">data</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'beta'</span>, <span style="color: #2aa198;">'gamma'</span>, <span style="color: #2aa198;">'eta'</span>]
<span style="color: #268bd2;">vec</span> = Vector(data)

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">swap 1-th and 3-th value</span>
vec.swap(1, 3)
<span style="color: #268bd2;">view</span> = vec.view
<span style="color: #268bd2;">expect_view</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'eta'</span>, <span style="color: #2aa198;">'gamma'</span>, <span style="color: #2aa198;">'beta'</span>]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(view[i] == expect_view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">swap 2-th and 3-th value</span>
vec.swap(2, 3)
<span style="color: #268bd2;">view</span> = vec.view
<span style="color: #268bd2;">expect_view</span> = [<span style="color: #2aa198;">'alpha'</span>, <span style="color: #2aa198;">'eta'</span>, <span style="color: #2aa198;">'beta'</span>, <span style="color: #2aa198;">'gamma'</span>]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(view[i] == expect_view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))

<span style="color: #93a1a1;"># </span><span style="color: #93a1a1;">restore data from view</span>
<span style="color: #268bd2;">restored_data</span> = [view[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> vec.addr2name]

<span style="color: #859900; font-weight: bold;">assert</span> <span style="color: #657b83; font-weight: bold;">all</span>(data[i]==restored_data[i] <span style="color: #859900; font-weight: bold;">for</span> i <span style="color: #859900; font-weight: bold;">in</span> <span style="color: #657b83; font-weight: bold;">range</span>(<span style="color: #657b83; font-weight: bold;">len</span>(data)))
</pre>
</div>
</div>
</div>

<div id="outline-container-explanation-of-the-implementation" class="outline-2">
<h2 id="explanation-of-the-implementation">Explanation of the Implementation</h2>
<div class="outline-text-2" id="text-explanation-of-the-implementation">
<p>
Our solution is based on creating a class called <code>Viewable_Mixin</code> that
maintains two lists: <code>self.indices</code> (name2addr) and
<code>self.inverse_indices</code> (addr2name). These lists represent the forward
and inverse mappings between the view and the data, respectively.
</p>

<p>
<code>self.indices</code> is initialized with a range of indices from 0 to the
length of the data minus 1. This list represents the mapping from the
view's indices to the data's indices. When we swap elements in the view,
we only swap their indices in this list, without actually modifying the
data.
</p>

<p>
<code>self.inverse_indices</code> is also initialized with a range of indices from
0 to the length of the data minus 1. This list represents the inverse
mapping from the data's indices to the view's indices. It is updated
whenever elements are swapped in the view, ensuring that the inverse
mapping remains consistent with the forward mapping.
</p>

<p>
The <code>swap</code> method takes two indices, i and j, and swaps the i-th and
j-th elements in the view without modifying the actual data. This is
achieved by swapping the corresponding indices in <code>self.indices</code> and
updating <code>self.inverse_indices</code>.
</p>

<p>
The <code>__getitem__</code> method is used to return the element in the view at a
given index. It does this by returning the data element at the index
specified by <code>self.indices[i]</code>.
</p>

<p>
Finally, the <code>view</code> and <code>addr2name</code> properties return the current state
of the view and the inverse mapping (<code>self.inverse_indices</code>),
respectively.
</p>
</div>
</div>

<div id="outline-container-conclusion" class="outline-2">
<h2 id="conclusion">Conclusion</h2>
<div class="outline-text-2" id="text-conclusion">
<p>
In this blog post, we have explored the problem of simulating swap
operations without modifying the underlying data. We provided a Python
code example that demonstrates how to achieve this using a simple class
structure called <code>Viewable_Mixin</code>. The solution maintains two lists,
<code>self.indices</code> and <code>self.inverse_indices</code>, to store the forward and
inverse mappings between the view and the data. By swapping elements in
the view and updating the mappings accordingly, we can efficiently
simulate swaps without modifying the actual data.
</p>

<p>
This approach can be useful in various applications, such as data
visualization, algorithm analysis, and undo/redo functionality, where it
is necessary to maintain multiple views of the same data or analyze the
impact of different permutations without affecting the underlying data.
</p>
</div>
</div>

<div id="outline-container-orgf1384e6" class="outline-2">
<h2 id="orgf1384e6">Mathematical Justifications</h2>
<div class="outline-text-2" id="text-orgf1384e6">
<p>
It is possible to interprete <code>indices</code> and <code>inverse_indices</code> as two permutation matrix. To see this, one may write <code>data</code> and <code>view</code> as two column vectors and note the following equations.
</p>

$$ \begin{aligned}
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 0 & 1 \\
0 & 1 & 0 & 0 \\
0 & 0 & 1 & 0
\end{bmatrix}
\begin{bmatrix}
\alpha \\ \beta \\ \gamma \\ \eta
\end{bmatrix}
&= \begin{bmatrix}
\alpha \\ \eta \\ \beta \\ \gamma
\end{bmatrix},
\\
\begin{bmatrix}
\alpha \\ \beta \\ \gamma \\ \eta
\end{bmatrix}
&= \begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0 \\
0 & 0 & 0 & 1 \\
0 & 1 & 0 & 0
\end{bmatrix}
\begin{bmatrix}
\alpha \\ \eta \\ \beta \\ \gamma
\end{bmatrix}.
\end{aligned} $$

<p>
Hence, <code>indices</code> represents the permutation matrix in the first equation, denoted by \(A\) below, and <code>inversed_indices</code> represents the matrix in the second equation, denoted by \(B\).
</p>

<p>
Clearly, \(AB=I\). Moreover, because \(A\) and \(B\) are othrogonal matrix, \(A=B^\intercal\) holds too.
</p>

<p>
In this point of view, <code>indices[i]</code> stores the unique column index <code>j</code> such that \(A_{ij}=1\),
</p>

<p>
\[ \sum_{j}A_{ij} \mathtt{data[j]} = \mathtt{view[i]} = \mathtt{data[indices[i]]}.\]
</p>

<p>
Similarly, <code>inversed_indices[i]</code> stores the unique column index <code>j</code> such that \(B_{ij}=1\),
</p>

<p>
\[ \sum_{j}B_{ij} \mathtt{view[j]} = \mathtt{data[i]} = \mathtt{view[inversed\_indices[i]]}.\]
</p>

<p>
For arbitary vector \(v\), we have (introduce the notation that \(\mathbb{I}[\mathtt{cond}]=1\) if and only if \(\mathtt{cond}\) is true)
</p>

$$ \begin{aligned}
(BAv)_i &= \sum_{k} \sum_{j} A_{ik} B_{kj} v_j \\
&= \sum_{k} \mathbb{I}(k=\mathtt{indices}[i]) \sum_{j} \mathbb{I}(j=\mathtt{inversed\_indices}[k]) \cdot v_j \\
&= \sum_{k} \mathbb{I}(k=\mathtt{indices}[i]) \cdot v[\mathtt{inversed\_indices}[k]] \\
&= v[\mathtt{inversed\_indices}[\mathtt{indices}[i]]].
\end{aligned} $$

<p>
Thus, we have
\[i  = \mathtt{inversed\_indices}[\mathtt{indices}[i]].\]
This is the reflection of the matrix equation \(BA=I\).
</p>

<p>
Now look back to the equation transforming <code>data</code> to <code>view</code>
</p>

$$ \begin{bmatrix}
\mathbb{I}(j = \mathtt{indices}[0]) \\
\mathbb{I}(j = \mathtt{indices}[1]) \\
\mathbb{I}(j = \mathtt{indices}[2]) \\
\mathbb{I}(j = \mathtt{indices}[3])
\end{bmatrix}
\begin{bmatrix}
\mathtt{data}[0] \\
\mathtt{data}[1] \\
\mathtt{data}[2] \\
\mathtt{data}[3]
\end{bmatrix}
= \begin{bmatrix}
\mathtt{view}[0] \\
\mathtt{view}[1] \\
\mathtt{view}[2] \\
\mathtt{view}[3]
\end{bmatrix}, $$

<p>
where \(\mathbb{I}(j = \mathtt{indices}[0])\) denotes a row vector with
subscript \(j\). To swap the <code>view</code> vector without modifying the <code>data</code>
vector, we can swap rows of \(A\) to satisfying the transforming
equation. For example, if we want to swap the $i<sub>1</sub>$-th and $i<sub>2</sub>$-th
entry of <code>view</code>, we can create another indices to represent the new
permutation matrix:
</p>

$$ \begin{cases}
\mathtt{indices}'[i_1] &= \mathtt{indices}[i_2],\\
\mathtt{indices}'[i_2] &= \mathtt{indices}[i_1],\\
\mathtt{indices}'[i] &= \mathtt{indices}[i],\quad \forall i\not\in\{i_1,i_2\}.
\end{cases}$$
The inversed indices need to update accordingly:
$$ \begin{cases}
j_1 = \mathtt{indices}[i_1], \\
j_2 = \mathtt{indices}[i_2], \\
\mathtt{inversed\_indices}'[j_1] &= \mathtt{inversed\_indices}[j_2],\\
\mathtt{inversed\_indices}'[j_2] &= \mathtt{inversed\_indices}[j_1],\\
\mathtt{inversed\_indices}'[j] &= \mathtt{inversed\_indices}[j],\quad \forall j\not\in\{j_1,j_2\},
\end{cases}$$

<p>
or in a more intuitive expression
</p>

$$ \begin{cases}
\mathtt{inversed\_indices}'[\mathtt{indices}'[i_1]] &= \mathtt{inversed\_indices}[\mathtt{indices}'[i_2]] = i_1,\\
\mathtt{inversed\_indices}'[\mathtt{indices}'[i_2]] &= \mathtt{inversed\_indices}[\mathtt{indices}'[i_1]] = i_2,\\
\mathtt{inversed\_indices}'[\mathtt{indices}'[i]] &= \mathtt{inversed\_indices}[\mathtt{indices}'[i]] = i,\quad \forall i\not\in\{i_1, i_2\},
\end{cases} $$

<p>
It's easy to verify that \(\mathtt{inversed\_indices}'\) is indeed the inverse mapping of \(\mathtt{indices}'\).
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-think.html">think</a> </div>]]></description>
  <category><![CDATA[think]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-20-SwapBookkeeping/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-20-SwapBookkeeping/notes.html</guid>
  <pubDate>Thu, 20 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Manage All Your Files]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc71307d">Motivation</a></li>
<li><a href="#org94683e6">A combined solution</a></li>
<li><a href="#orgcca7b10">Further Discussion</a></li>
</ul>
</div>
</nav>
<p>
随着工作和学习的需要，个人电脑里的文件越来越多，几乎每天都会因为各种各样的原因而
或下载或创建各种文件。如何有条理的管理这些文件是一个非常值得讨论和思考的问题。
</p>

<div id="outline-container-orgc71307d" class="outline-2">
<h2 id="orgc71307d">Motivation</h2>
<div class="outline-text-2" id="text-orgc71307d">
<p>
在正式讨论之前，先让我们罗列几种日常情形。
</p>

<ol class="org-ol">
<li>比如当前这篇笔记，它是我心中思考很久的话题，但今天晚上终于正式写成文字讨论一二。
显然，我有必要它保存下来，以供后续的思考和改进。</li>

<li>比如为学习某个课程/书籍创建的笔记，以及伴随学习而产生的其他文件，例如一些代码，图片等等。</li>

<li>比如毕业论文。因为我使用 latex
写论文，所以这要求我管理和保存一系列文件，包括源文件 .tex,
参考文献数据库 .bib, 一些生成的图片，甚至一些下载下来的参考文献 pdf.</li>

<li>比如某次汇报。同样，在准备这个汇报的过程中，我可能不止需要保存汇报所用的
ppt, 还有与此相关的 所有文件，例如视频，代码，图片等等。</li>

<li>一些其他的任务。比如针对某篇文章写的笔记，针对某个研究课题写的综述调研，针对审稿意见写的反馈，
针对某个特别问题的一点点小研究，针对某个特别喜爱游戏做的攻略等等。</li>

<li>收集到的资源。例如字体，软件，音乐等等。</li>
</ol>

<p>
从上面的这些实际情景可以看出，日常里碰见的各种文件来源十分广泛。除去音乐，照片，视频和软件这些
没有上下文的资源文件外，在各种具体情形下遇见的文档显然不能简单粗暴地都放在
<code>Documents</code> 文件夹 下进行管理。
</p>

<p>
以前我的做法是根据类别进行归类。比如属于笔记的归于 <code>Notes</code>
文件夹，属于汇报的归于 <code>Presentation</code> 文件夹， 属于科研的归于 <code>Research</code>
文件夹，属于参考资料的归于 <code>References</code> 文件夹, 属于代码的归于 <code>Code</code>
等等。 但随着时间的推移，我渐渐发现这种方法的一些弊端:
</p>

<ol class="org-ol">
<li><p>
要求设计一组完美的互斥且互补的标签作为 *文件类别*。对我而言 Musics,
Videos, Pictures 这几个标签工作得很好，但是 <code>Documents</code>
的概念就太大了点。随着时间推移，
这个文件夹下的文档越来越多，以至于我必须创建二级文件类别，也就是子文件夹进行管理，比如
<code>Notes</code>, <code>Research</code>, <code>References</code>, <code>Presentation</code>
等。然而可以预见，随着时间推移，
这些子文件夹也会越来越大，以至于将来需要创建三级文件类别。
</p>

<p>
从另一个角度讲，这种方法里
*文件类别的设计先于所需要管理的文件*。这可能是导致实际体验差的根本原因。
在将来一年甚至几年的文件出现之前，文件类别就必需先设定好。如果反过来，对于当前已经存在的文件进行分类管理，
那么文件类别是容易设计的。但实际使用中并不是这样，新的文件每天都在出现。这导致极有可能几个月前设计
的文件类别并不能很好的归类这几个月出现的新文件。这就是
*文件类别设计先于被管理文件的出现*。
</p></li>

<li>不同类别的文件相互之间是内在联系的，是构成上下文关系的。比如为了探究一个小问题而写的思考和
为了验证我的想法而写的代码。如果按照类别归类，那么思考笔记和代码应该分属两个不同的文件夹。
但这就破坏了文件之间的关系，不便于后续的回顾和继续更新。</li>
</ol>

<p>
简而言之，基于文件类别的管理方式十分依赖于 <b>文件类别</b> 标签的设计,
同时，在分类管理的同时，也会导致本来相互之间 具有联系的文件被分开放置。
</p>
</div>
</div>

<div id="outline-container-org94683e6" class="outline-2">
<h2 id="org94683e6">A combined solution</h2>
<div class="outline-text-2" id="text-org94683e6">
<p>
目前的解决办法是：在基于类别管理的基础上,
对某些类别的文件夹设计一套专门的文件组织方式。
具体而言，主目录按照类别进行管理，放有文件夹
</p>

<ul class="org-ul">
<li>Documents.
日常工作所用文件夹，所有文档或者相关文件存放于此，按照特别设计的方式进行组织。</li>
<li>References. 放各种书籍或者参考文献。按照特别设计的方式进行组织。</li>
<li>Plugins.
放各种很有用但相对小众的小软件。各种大型知名软件不必放在这里。</li>
<li>Pictures, Videos, Musics 等等。</li>
</ul>

<p>
目前关于 <code>References</code>
文件夹的管理还没有很成熟的方案，只是简单地根据各个书籍/文献所属的类别进行了二级文件夹的分类。
对于可能属于多个不同子类的书籍/文献，则创建拷贝 (链接)
分别放在需要放置的子类下。
</p>

<p>
<code>Documents</code> 是目前的主要使用的文件夹,
里面放置了近两三年来我所需要管理的几乎所有文件。
它的组织方式是不基于子类别的。事实上，主要是出于解决上面提到
"不同文件相互之间存在上下文联系" 问题的考虑，=Documents=
文件夹被设计成了按照 <b>事件</b> 进行组织，以时间 +
事件名称的方式命名子文件夹以保存文件的形式。例如下面是一些 <code>Documents</code>
下的子文件夹的内容。
</p>

<pre class="example" id="org1e07249">
  ├── 2022-11-25-MidtermExam/
  │   ├── notes.md
  │   ├── report.pdf
  │   └── report.tex
  ├── 2022-11-28-ReviewPIBSDE/
  │   ├── latex/
  │   └── notes.md
  ├── 2022-12-04-PhDSubmission/
  │   ├── About-TOEFL-home-edition.pdf
  │   ├── CV.pdf
  │   ├── PS.pdf
  │   ├── RP.pdf
  │   ├── TOEFL-SCORE.pdf
  │   ├── academic-certificates/
  │   ├── academic-recommendation/
  │   └── transcript/
  └── 2022-12-09-NotesSystemPlan/
      └── notes.md
</pre>

<p>
可以看到，对于简单的笔记，例如 <code>2022-12-09-NotesSystemPlan/</code>,
里面可以只放一个单独的笔记文件 <code>notes.md</code>. 如果需要使用 latex, 例如
<code>2022-11-25-MidtermExam</code> 和 <code>2022-11-28-ReviewPIBSDE</code>,
里面也可以放对应的文件。特别的，对于某个特定的任务，比如
<code>2022-12-04-PhDSubmission</code>, 文件夹里可以放此任务需要的所有相关资料。
</p>

<p>
这样一来，所有的文件都以它们所针对的 <b>事件</b> 进行存储。
虽然过去半年多，但是只要我看到 tree 的输出，我就能很轻松地说出上面示例里
针对的到底是那些事件
</p>

<ul class="org-ul">
<li>2022-11-25-MidtermExam, 研二上学期的期中考核</li>
<li>2022-11-28-ReviewPIBSDE, 对课题 PIBSDE 的一些思考</li>
<li>2022-12-04-PhDSubmission, 申请 PhD 需要提交的相关材料</li>
<li>2022-12-09-NotesSystemPlan, 一个关于笔记系统的初步想法</li>
</ul>

<p>
我认为以 <b>事件</b> 进行组织，按照时间 +
事件名的方式创建子文件夹保存文件的好处有以下几点：
</p>

<ol class="org-ol">
<li>便于回顾和查找文件。就实践下来的经验而言， 时间 +
事件名以及足够我回忆起和此文件夹的几乎所有内容，
包括创建它的目的，里面主要用于放那些文件等等。</li>
<li>几乎不会因为时间增加而增大管理难度。实践表明，在一个具体的时间段，
我一般最多只关心十来个 <b>事件</b>
文件夹，即这个时间段我只需要管理这些特定的文件夹。
其他文件夹只作为背景存在。得益于这种组织形式，所有不太关心的文件都被收容在这些背景
文件夹中。换而言之， <code>Documents</code> 文件夹等价于永远只有十来个子文件夹。</li>
<li>方便备份。一般而言时间超过一年的事件文件夹不在有很大的变动，可以在做好备份后直接删去。</li>
<li>能保证文件之间的联系。因为同一个事件的相关文件都放在一起。</li>
<li>不必操心每个文件到底该如何归类。当有需要时，直接创建事件文件夹即可。</li>
<li>方便后续批量管理。比如可以在每个事件文件夹下放一个数据文件，
用来指定此事件的各种元数据。</li>
</ol>

<p>
坏处则有
</p>

<ol class="org-ol">
<li>内容太分散。可能许多个 <b>事件</b> 是围绕一个 <b>主题</b>
的，比如都是个人笔记。
但因为还有其他的事件文件夹混在一起，所以如果我想检阅最近一个月做的所有笔记，
那么只能列出这一个月内创建的文件夹后手动筛选。</li>
</ol>
</div>
</div>

<div id="outline-container-orgcca7b10" class="outline-2">
<h2 id="orgcca7b10">Further Discussion</h2>
<div class="outline-text-2" id="text-orgcca7b10">
<p>
我认为文件的 <b>存储</b> 和 <b>浏览/管理</b> 是可以区分开的。
</p>

<p>
<b>存储</b> 面向的是存储设备。因为文件系统都是以树的形式组织的，
所以每个文件有且仅有 <i>唯一</i> 的存储位置。
</p>

<p>
<b>浏览/管理</b>
则面向的是使用者。我们在考虑一个文件时，其实并不关心它被存储在哪里。
我们真正对一个文件的印象是它的用途，它的内容，它的类别。为了方便浏览/管理，
我们可以根据文件的各种元数据给打上合适的标签。这些标签对文件归了类，
但标签与文件所存放的位置不必相关。
</p>

<p>
一个典型的例子就是 Git. 在 Git 中，文件以特定的形式存储在 <code>.git</code>
文件夹中。 当使用者指定需要哪个版本的哪个文件时，Git
才会将指定的文件取出放在当前文件夹下。
使用者不必清楚文件的具体存放方式，他清楚他需要哪些文件即可。
</p>

<p>
一些文献管理软件，例如 Zotero
也是采用的这种逻辑。呈现给使用者的是文献的各种元数据，
例如文章标题，作者，发表年份等等。而软件内部对文献的组织方式和这些元数据
(标签) 完全无关。
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-think.html">think</a> </div>]]></description>
  <category><![CDATA[think]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-09-ManageFiles/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-09-ManageFiles/notes.html</guid>
  <pubDate>Sun, 09 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Visual Studion Code - A Morden Source Code Editor]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#interface">1. Interface</a></li>
<li><a href="#command-palette">2. Command Palette</a></li>
<li><a href="#customization">3. Customization</a></li>
<li><a href="#extensions">4. Extensions</a></li>
<li><a href="#snippets">5. Snippets</a></li>
</ul>
</div>
</nav>
<p>
Visual Studio Code is a lightweight but powerful source code editor
which runs on your desktop and is available for Windows, macOS and
Linux. It comes with built-in support for JavaScript, TypeScript and
Node.js and has a rich ecosystem of extensions for other languages and
runtimes (such as C++, C#, Java, Python, PHP, Go, .NET).
</p>

<p>
Here is the official documentation <a href="https://code.visualstudio.com/docs">VS Code - Get Started</a>
</p>

<p>
See also <a href="https://adamtheautomator.com/visual-studio-code-tutorial/">The Visual Studio Code Tutorial Worth Learning</a> for a brief
introduction to VS Code.
</p>

<p>
TODO
</p>

<ul class="org-ul">
<li class="off"><code>[&#xa0;]</code> Add a section to discuss math in Markdown. Consider Extension
<code>Markdown+Math</code>.</li>

<li class="off"><code>[&#xa0;]</code> Add a section to discuss output to html. Consider Extension
<code>Markdown All in One</code>.</li>
</ul>

<div id="outline-container-interface" class="outline-2">
<h2 id="interface">1. Interface</h2>
<div class="outline-text-2" id="text-interface">
<p>
The UI is divided into five areas:
</p>

<ul class="org-ul">
<li>Editor - The main area to edit your files. You can open as many
editors as you like side by side vertically and horizontally.</li>

<li>Side Bar - Contains different views like the Explorer to assist you
while working on your project.</li>

<li>Status Bar - Information about the opened project and the files you
edit.</li>

<li>Activity Bar - Located on the far left-hand side, this lets you switch
between views and gives you additional context-specific indicators,
like the number of outgoing changes when Git is enabled.</li>

<li>Panels - You can display different panels below the editor region for
output or debug information, errors and warnings, or an integrated
terminal. Panel can also be moved to the right for more vertical
space.</li>
</ul>


<figure id="orgfc4b0ca">
<img src="./vscode-UI.png" alt="vscode-UI.png">

<figcaption><span class="figure-number">Figure 1: </span>VS Code UI</figcaption>
</figure>
</div>
</div>

<div id="outline-container-command-palette" class="outline-2">
<h2 id="command-palette">2. Command Palette</h2>
<div class="outline-text-2" id="text-command-palette">
<p>
The Command Palette in VS Code is a menu that <b><i>provides access to all
functionality within VS Code and any installed extensions</i></b>. It can be
accessed via the View menu or by using the <code>Ctrl-Shift-P</code> shortcut. The
Command Palette is <i>a single location for managing tasks, settings,
snippets, and more</i>, making it a useful tool for easy and efficient
navigation within VS Code.
</p>
</div>
</div>

<div id="outline-container-customization" class="outline-2">
<h2 id="customization">3. Customization</h2>
<div class="outline-text-2" id="text-customization">
<p>
There are many things you can do to customize VS Code.
</p>

<ul class="org-ul">
<li>Change your theme <code>&gt;Preferences: Color Theme</code></li>

<li><p>
Change your keyboard shortcuts <code>&gt;Preferences: Open Keyboard Shortcuts</code>
</p>

<blockquote>
<p>
See also<a href="https://code.visualstudio.com/docs/getstarted/keybindings#_detecting-keybinding-conflicts">Detecting keybinding conflicts</a> if necessary.
</p>
</blockquote></li>

<li><p>
Tune your settings <code>&gt;Preferences: Open Settings (UI)</code>
</p>

<blockquote>
<p>
You can scope the settings that you only want for specific languages
by the language identifier, see <a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_language-specific-settings">Language specific settings</a>.
</p>
</blockquote></li>

<li>Create snippets</li>

<li>Install extensions</li>
</ul>

<p>
To manage settings, open the Command Palette with <code>Ctrl-Shift-P</code>. Type
"settings" and choose <code>Preferences: Open Settings (JSON)</code> or
<code>Preferences: Open Settings (UI)</code>
</p>

<p>
Depending on your platform, the user settings file is located here:
</p>

<ul class="org-ul">
<li>Windows <code>%APPDATA%\Code\User\settings.json</code></li>
<li>macOS <code>$HOME/Library/Application\ Support/Code/User/settings.json</code></li>
<li>Linux <code>$HOME/.config/Code/User/settings.json</code></li>
</ul>
</div>
</div>

<div id="outline-container-extensions" class="outline-2">
<h2 id="extensions">4. Extensions</h2>
<div class="outline-text-2" id="text-extensions">
<p>
One of the most important features of VS Code is its extensions. An
extension is a small package you can load into VS Code that makes
working with various resources easier.
</p>

<p>
Extensions are installed in a per user extensions folder. Depending on
your platform, the location is in the following folder:
</p>

<ul class="org-ul">
<li>Windows <code>%USERPROFILE%\.vscode\extensions</code></li>
<li>macOS <code>~/.vscode/extensions</code></li>
<li>Linux <code>~/.vscode/extensions</code></li>
</ul>
</div>
</div>

<div id="outline-container-snippets" class="outline-2">
<h2 id="snippets">5. Snippets</h2>
<div class="outline-text-2" id="text-snippets">
<p>
Snippets allow you to type a few characters in a code editor tab that
quickly expands to whatever you need. Each snippet is a single JSON
element that matches a particular syntax.
</p>

<p>
Snippets exist by language or extension and are stored in JSON files.
For example, you can have a set of PowerShell, ARM template, Python, C#,
and Javascript snippets installed simultaneously.
</p>

<p>
You can find snippets by opening up the command palette with
<code>Ctrl-Shift-P</code>, typing "snippets" and hitting Enter.
</p>

<p>
See <a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">Snippets in Visual Studio Code</a> for more details.
</p>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-06-IntroVSCode/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-06-IntroVSCode/notes.html</guid>
  <pubDate>Thu, 06 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Configure Git]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org245d1d9">1. Basic Configuration</a>
<ul>
<li><a href="#org29b6188">1.1. Transfer Existed Configuration</a></li>
<li><a href="#orge7ce122">1.2. First-Time Set up</a></li>
</ul>
</li>
<li><a href="#orgfb63118">2. Add-ons</a>
<ul>
<li><a href="#org3aa08be">2.1. Prompt</a></li>
<li><a href="#orgf2947ae">2.2. Pager</a></li>
</ul>
</li>
<li><a href="#orgdc0a108">3. An Example of .gitconfig</a></li>
</ul>
</div>
</nav>
<p>
See <a href="https://git-scm.com/book/en/v2">Pro Git</a> if you are not familiar
with Git.
</p>

<div id="outline-container-org245d1d9" class="outline-2">
<h2 id="org245d1d9">1. Basic Configuration</h2>
<div class="outline-text-2" id="text-org245d1d9">
</div>
<div id="outline-container-org29b6188" class="outline-3">
<h3 id="org29b6188">1.1. Transfer Existed Configuration</h3>
<div class="outline-text-3" id="text-org29b6188">
<ol class="org-ol">
<li>Copy the global git configuration file to <code>~/.gitconfig</code>.</li>

<li>Copy SSH keys to <code>~/.ssh/</code>.</li>

<li><p>
Add SSH key to <code>ssh-agent</code>.
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #657b83; font-weight: bold;">eval</span> <span style="color: #2aa198;">"$(</span><span style="color: #6c71c4; font-weight: bold;">ssh-agent -s</span><span style="color: #2aa198;">)"</span>
ssh-add ~/.ssh/id_ed25519
</pre>
</div></li>
</ol>
</div>
</div>

<div id="outline-container-orge7ce122" class="outline-3">
<h3 id="orge7ce122">1.2. First-Time Set up</h3>
<div class="outline-text-3" id="text-orge7ce122">
<p>
See also <a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup">Pro Git - Section 1.6</a>
</p>

<ol class="org-ol">
<li><p>
Set up your identity
</p>

<div class="org-src-container">
<pre class="src src-sh">git config --global user.name <span style="color: #2aa198;">"John Doe"</span>
git config --global user.email johndoe@example.com
</pre>
</div></li>

<li><p>
Set up default editor
</p>

<div class="org-src-container">
<pre class="src src-sh">git config --global core.editor vim
</pre>
</div></li>

<li><p>
Set up default branch name
</p>

<div class="org-src-container">
<pre class="src src-sh">git config --global init.defaultBranch master
</pre>
</div></li>

<li><p>
Set up git aliases
</p>

<div class="org-src-container">
<pre class="src src-sh">git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
</pre>
</div></li>

<li><p>
(Optional) Review your settings
</p>

<div class="org-src-container">
<pre class="src src-sh">git config --list --show-origin
</pre>
</div></li>

<li>Set up SSH.

<ol class="org-ol">
<li>See  <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">Generating  a new SSH key and adding it to the ssh-agent</a></li>
<li>See  <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding  a new SSH key to your GitHub account</a></li>
</ol></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-orgfb63118" class="outline-2">
<h2 id="orgfb63118">2. Add-ons</h2>
<div class="outline-text-2" id="text-orgfb63118">
</div>
<div id="outline-container-org3aa08be" class="outline-3">
<h3 id="org3aa08be">2.1. Prompt</h3>
<div class="outline-text-3" id="text-org3aa08be">
<p>
<a href="https://github.com/magicmonty/bash-git-prompt">bash-git-prompt</a>: A bash prompt that displays information about the
current git repository.  In particular the branch name, difference
with remote branch, number of files staged, changed, etc.
</p>


<figure id="org082717c">
<img src="./gitprompt.png" alt="gitprompt.png">

<figcaption><span class="figure-number">Figure 1: </span>Example of bash-git-prompt</figcaption>
</figure>
</div>
</div>

<div id="outline-container-orgf2947ae" class="outline-3">
<h3 id="orgf2947ae">2.2. Pager</h3>
<div class="outline-text-3" id="text-orgf2947ae">
<p>
<a href="https://github.com/dandavison/delta">delta</a>: A syntax-highlighting pager for git, diff, and grep output.
</p>


<figure id="org5431c03">
<img src="./delta.png" alt="delta.png">

<figcaption><span class="figure-number">Figure 2: </span>Example of delta</figcaption>
</figure>
</div>
</div>
</div>

<div id="outline-container-orgdc0a108" class="outline-2">
<h2 id="orgdc0a108">3. An Example of .gitconfig</h2>
<div class="outline-text-2" id="text-orgdc0a108">
<pre class="example" id="org7205e2d">
[user]
    name = John Doe
    email = johndoe@example.com
[core]
    editor = code --wait
    pager = delta
[init]
    defaultBranch = master
[alias]
    a = add
    b = branch
    co = checkout
    ci = commit
    ca = commit -a
    cm = commit -m
    d = diff
    l = log --oneline -15
    la = log --oneline --all -15
    rb = rebase
    s = status

    last = log -1
    squash = rebase --autosquash -i
[interactive]
    diffFilter = delta --color-only
[delta]
    light = true      # set to true if you're in a terminal light background color
    side-by-side = true
[merge]
    conflictstyle = diff3
[diff]
    colorMoved = default
</pre>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2023-04-05-ConfigGit/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2023-04-05-ConfigGit/notes.html</guid>
  <pubDate>Wed, 05 Apr 2023 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[Helly's Selection Theorem]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org6b3cd0a">Statement</a></li>
<li><a href="#org673ef1a">Problems</a></li>
<li><a href="#org664b97e">Further discussion</a></li>
<li><a href="#orgd19e674">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
By Bolzano-Weierstrass’ theorem, we know that any bounded sequence of
real values has a convergent subsequence. This result can be extended
to finite dimensional space, i.e, any bounded sequence in
\(\mathbb{R}^n\) has a convergent subsequence. However, it is not true
in infinite dimensional space, say,
\(\mathbb{R}^{[0,1]}\). Nevertheless, there are two well-known theorem
to establish the convergence of a sequence of functions, the
<a href="https://en.wikipedia.org/wiki/Arzel%C3%A0%E2%80%93Ascoli_theorem">Arzelà–Ascoli theorem</a> and <a href="https://en.wikipedia.org/wiki/Helly%27s_selection_theorem">Helly's selection theorem</a>. The main
difference between these two results is the notion of convergence of a
function sequence. Arzelà–Ascoli theorem deals with the uniformly
convergence and Helly's selection theorem deals with the pointwise
convergence.
</p>

<div id="outline-container-org6b3cd0a" class="outline-2">
<h2 id="org6b3cd0a">Statement</h2>
<div class="outline-text-2" id="text-org6b3cd0a">
<p>
<i>Lemma (Helly).</i> Suppose that \(\{f_n\}_{n\in\mathbb{N}}\) is a <i>uniformly
bounded</i> sequence of <i>increasing</i> functions on an interval. Then there is
a subsequence converging <i>pointwise</i> to an increasing function.
</p>

<p>
In probability theory, this theorem is often stated in the following manner.
</p>

<p>
<i>Theorem (Helly).</i> For every sequence of \(\{F_n\}\) of distribution
functions from \(\mathbb{R}\) to \([0,1]\), there exists a subsequence
\(\{F_{n_k}\}\) and a nondecreasing, right-continuous function \(F\) such
that \(\lim_k F_{n_k}(x) = F(x)\) at continuity points \(x\) of \(F\).
</p>

<p>
<i>Proof.</i> The proof is based on the <a href="./diagonal-argument.jpg">diagonal argument</a>. See <a href="./proof-Helly-by-Billingsley.png">here</a> for the
complete proof given in Billingsley's book.
</p>

<p>
<i>Remark.</i> The limiting funciton \(F\) may not be a distribution function.
For example, let \(F_n(x) = \mathbb{1}(x \geq n)\) be the distribution
function corresponding to a unit mass at \(n\). Then the limiting
function \(F(x)\equiv0\) is clearly not a distribution function.
</p>

<p>
<i>Remark.</i> The proof of this version can be adapted to prove the original
version. First, it is necessary that \(0 \leq F_n \leq 1\) but \(F_n\)
need not to be a distribution function.  Second, if we do not require
\(F\) to be right-continuous, then we can redefine the values of \(F\) at
discontinuity points, and select a finer subsequence such that \(\lim_k
F_{n_k}(x)=F(x)\) at every \(x\).  This is because the set of
discontinuity points of a monotone function is countable.
</p>
</div>
</div>

<div id="outline-container-org673ef1a" class="outline-2">
<h2 id="org673ef1a">Problems</h2>
<div class="outline-text-2" id="text-org673ef1a">
<ol class="org-ol">
<li>Is there a subsequence of \((\sin (x/k))_{k=1}^\infty\) converges pointwise?</li>
<li>Is there a subsequence of \((\sin (x+k))_{k=1}^\infty\) converges pointwise?</li>
<li>Is there s subsequence of \((\sin (kx))_{k=1}^\infty\) converges pointwise?</li>
</ol>

<p>
Answers to the first two questions are positive, which can be shown
easily by Arzelà–Ascoli theorem. The answer to the last question,
however, is negative; see <a href="https://math.stackexchange.com/questions/1380286/pointwise-almost-everywhere-convergent-subsequence-of-sin-nx">this discussion</a>. Hence, the last
one is a perfect example that shows the monotone condition is
essential in Helly's selection theorem.
</p>
</div>
</div>

<div id="outline-container-org664b97e" class="outline-2">
<h2 id="org664b97e">Further discussion</h2>
<div class="outline-text-2" id="text-org664b97e">
<p>
<i>Pointwise convergence is weaker than uniformly convergence.</i> In
\(\mathbb{R}^{\mathbb{N}}\), let \(e^n=(e^n_k)_{k=1}^\infty\) be the
sequence with all zero entries except the \(n\)-th entry be 1. Then
the sequence \((e^n)_{n=1}^\infty\) is bounded under the sup
norm. Moreover, it converges pointwise to \(e^*\equiv0\). However, The
sequence \((e^n)\) is clearly divergent under the sup norm.
Indeed, by the diagonal argument, any uniformly bounded sequence in
\(\mathbb{R}^{\mathbb{N}}\) has a subsequence which converges pointwise.
</p>
</div>
</div>

<div id="outline-container-orgd19e674" class="outline-2">
<h2 id="orgd19e674">External Links&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-orgd19e674">
<ol class="org-ol">
<li><a href="https://math.stackexchange.com/questions/397931/hellys-selection-theorem">Helly's selection theorem - Mathematics</a></li>
</ol>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-math.html">math</a> </div>]]></description>
  <category><![CDATA[math]]></category>
  <link>https://dou-meishi.github.io/org-blog/2022-06-25-HellySelectionTheorem/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2022-06-25-HellySelectionTheorem/notes.html</guid>
  <pubDate>Sat, 25 Jun 2022 00:00:00 +0800</pubDate>
</item>
<item>
  <title><![CDATA[配置 Ubuntu 系统]]></title>
  <description><![CDATA[
<nav id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org7258851">Get Ubuntu</a></li>
<li><a href="#org78e26f3">Appearance</a>
<ul>
<li><a href="#org2b91ef8">Customize Fonts</a></li>
<li><a href="#org062d7ba">Customize Bash</a></li>
<li><a href="#orgd501bf9">GNOME Tweaks</a></li>
<li><a href="#orgc5c282d">Choose Cinnamon (Deprecated)</a></li>
</ul>
</li>
<li><a href="#org450f770">Toolkits</a>
<ul>
<li><a href="#orgb23a466">Install Edge</a></li>
<li><a href="#org836d105">Install VS code</a></li>
<li><a href="#org6fc5993">Install Clash</a></li>
<li><a href="#orga52832e">Install Git</a></li>
<li><a href="#orga54ec0f">Install Emacs</a></li>
<li><a href="#orge4c582d">Install Python</a></li>
<li><a href="#org81ccadf">Install TeXLive</a></li>
<li><a href="#org313dc3d">Customize Input Methods (Deprecated)</a></li>
</ul>
</li>
<li><a href="#orgb27ac32">Future Customization</a></li>
<li><a href="#org8782143">References&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></a></li>
</ul>
</div>
</nav>
<p>
用了五年的小破本今早又罢工了.
系统启动卡在某个硬盘挂载出错.
费了老劲儿, 一度以为这位战友终于走到寿命尽头,
还感慨前两天才奶了一口能再战几年呢.
最后发现似乎是 UEFI 分区挂了,
在 BIOS 里调成 Legacy 模式就能顺利启动.
尽管看起来是回到了一天前的样子,
能跑能跳的,
但我知道,
看起来流畅运行的表面下是已经服役五年多的残躯.
</p>

<p>
终于, 我下定决心将实验室电脑也配置成它的形状.
以后就让这位老战友退居二线吧.
</p>

<div id="outline-container-org7258851" class="outline-2">
<h2 id="org7258851">Get Ubuntu</h2>
<div class="outline-text-2" id="text-org7258851">
<p>
在 Ubuntu 官网下载 20.04 LTS 版本,
用 Universal USB Installer 将 <code>.iso</code> 文件烧录到 U 盘上.
</p>

<blockquote>
<p>
22.04 LTS 版 Ubuntu 的安装推荐参考 <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">官方指南</a>
</p>
</blockquote>

<p>
启动盘做好后直接遵照引导安装,
因为懒得自己规划分区,
就干脆将所有文档备份后选择格式化整个硬盘,
交给 Ubuntu 自己划分.
(这一步居然没出什么岔子,
着实让我有点小惊讶.)
最后正常登陆,
</p>

<p>
系统安装, 完成!
</p>
</div>
</div>

<div id="outline-container-org78e26f3" class="outline-2">
<h2 id="org78e26f3">Appearance</h2>
<div class="outline-text-2" id="text-org78e26f3">
<p>
安装完成后首先更新
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt update
sudo apt upgrade
</pre>
</div>

<p>
然后浏览 `设置` 并根据喜欢进行调整.
</p>

<p>
在 <code>~/.config/user-dirs.dirs</code> 里修改默认下载路径, 默认桌面路径, 默认图片路径等等.
</p>
</div>

<div id="outline-container-org2b91ef8" class="outline-3">
<h3 id="org2b91ef8">Customize Fonts</h3>
<div class="outline-text-3" id="text-org2b91ef8">
<p>
从小破本里将 <code>~/.local/share/fonts/</code> 复制到主目录.
然后刷新缓存
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo fc-cache -fsv
</pre>
</div>

<p>
用 <code>dconf-editor</code> 更改终端字体为 FiraCode Nerd Font Mono Ret 14
</p>
</div>
</div>

<div id="outline-container-org062d7ba" class="outline-3">
<h3 id="org062d7ba">Customize Bash</h3>
<div class="outline-text-3" id="text-org062d7ba">
<p>
将 <code>.bashrc</code>, <code>.bash_env</code>, <code>.bash_aliases</code>, <code>.inputrc</code>, <code>bin/</code> 复制到主目录.
</p>

<p>
然后配置 GNOME 终端颜色.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt install dconf-cli git
git clone https://github.com/aruhier/gnome-terminal-colors-solarized.git
<span style="color: #657b83; font-weight: bold;">cd</span> gnome-terminal-colors-solarized
./install.sh
</pre>
</div>

<p>
装好后运行 <code>set_light.sh</code> (或者 <code>set_dark.sh</code>).
</p>

<p>
然后安装 <code>oh-my-posh</code>
</p>

<div class="org-src-container">
<pre class="src src-bash">curl -s https://ohmyposh.dev/install.sh | bash -s -- -d ~/bin
</pre>
</div>

<p>
复制 <code>~/.config/oh-my-posh/</code> 到对应位置.
</p>

<p>
重启终端即配置完成.
</p>
</div>
</div>

<div id="outline-container-orgd501bf9" class="outline-3">
<h3 id="orgd501bf9">GNOME Tweaks</h3>
<div class="outline-text-3" id="text-orgd501bf9">
<p>
Ubuntu 的很多系统外观设置需要使用 GNOME Tweaks，
参考 <a href="https://linuxhint.com/gnome_tweak_installation_ubuntu/">How to Install the Gnome Tweak Tool on Ubuntu 22.04</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo add-apt-repository universe
sudo apt install gnome-tweaks
</pre>
</div>

<p>
接着安装 GNOME Shell Extensions, 参考 <a href="https://itsfoss.com/gnome-shell-extensions/">How to Use GNOME Shell Extensions [Complete Guide</a>].
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt install gnome-shell-extensions
</pre>
</div>

<p>
一些 <del>有用</del> 有趣的扩展包括
</p>

<ul class="org-ul">
<li>Dash to Dock. 可以自定义任务栏外观和行为.</li>
<li>User Themes. 可以选择更多的系统主题. 个人偏爱 <a href="https://www.gnome-look.org/p/1099856/">Ant alt style</a> (Application theme) + <a href="https://www.gnome-look.org/p/1360254">Oreo Pink</a> (Cursor theme) + <a href="https://www.pling.com/s/Gnome/p/1305251">Candy icons</a> (Icon theme).</li>
<li>Gesture Improvements. 可以自定义更多的触摸板手势.</li>
<li>Burn My Windows. 可以自定义窗口打开和关闭的动画.</li>
<li>Desktop Cube. Workspace 3D 切换动画.</li>
<li>Compiz alike magic lamp effect. MacOS-like 窗口最小化动画.</li>
<li>Coverflow Alt-Tab. Alt-Tab 3D 切换动画.</li>
</ul>
</div>
</div>

<div id="outline-container-orgc5c282d" class="outline-3">
<h3 id="orgc5c282d">Choose Cinnamon (Deprecated)</h3>
<div class="outline-text-3" id="text-orgc5c282d">
<p>
<del>个人更习惯 Win 风格的 UI
于是偏爱 Cinnamon 桌面环境</del>
<b>现在更喜欢 Ubuntu 22.04 LTS Jellyfish 自带 UI.</b>
</p>

<p>
在命令行安装后, 登陆界面右下角选择 Cinnamon 启动即可.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt install cinnamon-desktop-environment
</pre>
</div>

<p>
进入 Cinnamon 后找到 系统设置 -&gt; 主题,
随便调一调.
</p>
</div>
</div>
</div>

<div id="outline-container-org450f770" class="outline-2">
<h2 id="org450f770">Toolkits</h2>
<div class="outline-text-2" id="text-org450f770">
</div>
<div id="outline-container-orgb23a466" class="outline-3">
<h3 id="orgb23a466">Install Edge</h3>
<div class="outline-text-3" id="text-orgb23a466">
<p>
下载 Edge, 设置字体 Fira Sans + Lora, 登陆帐号.
</p>
</div>
</div>

<div id="outline-container-org836d105" class="outline-3">
<h3 id="org836d105">Install VS code</h3>
<div class="outline-text-3" id="text-org836d105">
<p>
下载 VS Code, 登录账号. See also <a href="../2023-04-06-IntroVSCode/notes.html">this note</a> for a brief intro to VS code.
</p>
</div>
</div>

<div id="outline-container-org6fc5993" class="outline-3">
<h3 id="org6fc5993">Install Clash</h3>
<div class="outline-text-3" id="text-org6fc5993">
<p>
准备科学上网.
从小破本上复制 <del>或者从 github 上下载</del> 到 <del>最新版本的</del> clash,
然后进行如下配置
</p>

<div class="org-src-container">
<pre class="src src-bash">mkdir ~/clash
mv ~/Download/clash-linux-amd64-v1.7.1 ~/clash/clash
<span style="color: #657b83; font-weight: bold;">cd</span> ~/clash/
sudo chmod a+x ./clash
</pre>
</div>

<p>
然后从代理商那里拿到配置文件并覆盖 <code>~/clash/config.yaml</code>,
在本地网络连接里设置代理端口.
最后启动 clash 并登陆网址 <a href="http://clash.razord.top/#/settings">http://clash.razord.top/#/settings</a> or <a href="https://yacd.haishan.me/">https://yacd.haishan.me/</a> 进行节点选择.
</p>
</div>
</div>

<div id="outline-container-orga52832e" class="outline-3">
<h3 id="orga52832e">Install Git</h3>
<div class="outline-text-3" id="text-orga52832e">
<p>
安装 <code>git</code> 后登陆 GitHub, 按照提示生成 SSH key 并添加.
See also <a href="../2023-04-05-ConfigGit/notes.html">this note</a> for details.
</p>

<p>
安装 diff 程序的语法高亮版 <a href="https://github.com/dandavison/delta">delta</a>.
</p>

<p>
将 <code>~/.gitconfig</code> 复制到对应位置.
</p>

<p>
<del>配置 <a href="https://github.com/magicmonty/bash-git-prompt">bash git prompt</a></del> (<code>oh-my-posh</code> 已针对 <code>git</code> 仓库做了 prompt segment, 这里无需再次配置)
</p>
</div>
</div>

<div id="outline-container-orga54ec0f" class="outline-3">
<h3 id="orga54ec0f">Install Emacs</h3>
<div class="outline-text-3" id="text-orga54ec0f">
<p>
添加源并下载最新的 Emacs
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo add-apt-repository ppa:ubuntu-elisp/ppa
sudo apt update
sudo apt install emacs-snapshot
</pre>
</div>

<p>
下载后复制小破本 <code>~/.emacs.d</code> 到对应位置.
</p>
</div>
</div>

<div id="outline-container-orge4c582d" class="outline-3">
<h3 id="orge4c582d">Install Python</h3>
<div class="outline-text-3" id="text-orge4c582d">
<p>
Ubuntu 20.04 LTS 是自带 <code>Python3.8</code> 的,
但一些第三方包还是需要自己装.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt install python3-pip
pip3 install --user numpy matplotlib pandas jupytext
</pre>
</div>

<p>
然后安装 <a href="https://github.com/dunovank/jupyter-themes">jupyter-themes</a> 并进行一定的配置.
</p>

<div class="org-src-container">
<pre class="src src-bash">pip3 install --user jupyterthemes
jt -t solarizedd -T -N -kl -f dejavu -fs 140
pip3 install --user jupyter_contrib_nbextensions
jupyter contrib nbextension install --user
</pre>
</div>

<p>
启动 jupyter 后即可手动选择开启各类扩展.
</p>
</div>
</div>

<div id="outline-container-org81ccadf" class="outline-3">
<h3 id="org81ccadf">Install TeXLive</h3>
<div class="outline-text-3" id="text-org81ccadf">
<p>
See official doc
</p>
</div>
</div>

<div id="outline-container-org313dc3d" class="outline-3">
<h3 id="org313dc3d">Customize Input Methods (Deprecated)</h3>
<div class="outline-text-3" id="text-org313dc3d">
<p>
<b>Ubuntu 22.04 LTS 自带的输入法已经足够使用，不必再进行后续配置</b>
</p>

<p>
卸载 <code>ibus</code> 后安装 <code>fcitx</code>, 重启后右下角点击小企鹅图标进一步配置.
</p>

<div class="org-src-container">
<pre class="src src-bash">sudo apt purge ibus
sudo apt install fcitx
sudo apt install fcitx-googlepinyin
sudo apt install fcitx-config-gtk
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgb27ac32" class="outline-2">
<h2 id="orgb27ac32">Future Customization</h2>
<div class="outline-text-2" id="text-orgb27ac32">
<ul class="org-ul">
<li>Customize titlebar</li>
<li>More funny animations</li>
</ul>
</div>
</div>

<div id="outline-container-org8782143" class="outline-2">
<h2 id="org8782143">References&#xa0;&#xa0;&#xa0;<span class="tag"><span class="refs">refs</span></span></h2>
<div class="outline-text-2" id="text-org8782143">
<ul class="org-ul">
<li><a href="https://einverne.github.io/post/2021/03/linux-use-clash.html">在 Linux 上使用 Clash 作代理</a></li>
<li><a href="http://www.webupd8.org/2011/04/solarized-must-have-color-paletter-for.html">SOLARIZED: A MUST HAVE COLOR SCHEME FOR GNOME TERMINAL, VIM, GEDIT AND LOTS MORE</a></li>
<li><a href="https://stackoverflow.com/questions/36419342/how-to-wrap-code-text-in-jupyter-notebooks">How to wrap code/text in Jupyter notebooks</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://dou-meishi.github.io/org-blog/tags.html">Tags</a>: <a href="https://dou-meishi.github.io/org-blog/tag-tool.html">tool</a> </div>]]></description>
  <category><![CDATA[tool]]></category>
  <link>https://dou-meishi.github.io/org-blog/2021-10-25-CustomizeUbuntu/notes.html</link>
  <guid>https://dou-meishi.github.io/org-blog/2021-10-25-CustomizeUbuntu/notes.html</guid>
  <pubDate>Mon, 25 Oct 2021 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
